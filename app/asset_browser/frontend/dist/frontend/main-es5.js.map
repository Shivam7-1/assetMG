{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/account-struct/account-struct.component.ts","webpack:///src/app/account-struct/account-struct.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app-setup/app-setup.component.ts","webpack:///src/app/app-setup/app-setup.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/asset-details/asset-details.component.ts","webpack:///src/app/asset-details/asset-details.component.html","webpack:///src/app/asset-gallery/asset-gallery.component.ts","webpack:///src/app/asset-gallery/asset-gallery.component.html","webpack:///src/app/asset-grid/asset-grid.component.ts","webpack:///src/app/asset-grid/asset-grid.component.html","webpack:///src/app/asset/asset.component.ts","webpack:///src/app/asset/asset.component.html","webpack:///src/app/error-dialog/error-dialog.component.ts","webpack:///src/app/error-dialog/error-dialog.component.html","webpack:///src/app/interceptors/http-error.interceptor.ts","webpack:///src/app/interceptors/loader.interceptor.ts","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/model/asset.ts","webpack:///src/app/model/response.ts","webpack:///src/app/preview/preview.component.ts","webpack:///src/app/preview/preview.component.html","webpack:///src/app/search-bar/search-bar.component.ts","webpack:///src/app/search-bar/search-bar.component.html","webpack:///src/app/services/asset.service.ts","webpack:///src/app/services/authorization.service.ts","webpack:///src/app/services/config.service.ts","webpack:///src/app/services/loader.service.ts","webpack:///src/app/services/reload-app.service.ts","webpack:///src/app/services/upload-asset.service.ts","webpack:///src/app/settings/settings.component.ts","webpack:///src/app/settings/settings.component.html","webpack:///src/app/shared/client-id.pipe.ts","webpack:///src/app/shared/config/credentials/credentials.component.ts","webpack:///src/app/shared/config/credentials/credentials.component.html","webpack:///src/app/shared/config/refresh-code/refresh-code.component.ts","webpack:///src/app/shared/config/refresh-code/refresh-code.component.html","webpack:///src/app/shared/config/yt-conifg/yt-conifg.component.ts","webpack:///src/app/shared/config/yt-conifg/yt-conifg.component.html","webpack:///src/app/shared/error-msg.pipe.ts","webpack:///src/app/shared/loader/loader.component.ts","webpack:///src/app/shared/loader/loader.component.html","webpack:///src/app/shared/material.module.ts","webpack:///src/app/shared/progress-btn/progress-btn.component.ts","webpack:///src/app/shared/progress-btn/progress-btn.component.html","webpack:///src/app/shared/shared.module.ts","webpack:///src/app/shared/upload/upload.component.ts","webpack:///src/app/shared/upload/upload.component.html","webpack:///src/app/toolbar/toolbar.component.ts","webpack:///src/app/toolbar/toolbar.component.html","webpack:///src/app/upload-assets/upload-assets.component.ts","webpack:///src/app/upload-assets/upload-assets.component.html","webpack:///src/app/upload-assets/upload-html/upload-html.component.ts","webpack:///src/app/upload-assets/upload-html/upload-html.component.html","webpack:///src/app/upload-assets/upload-img/upload-img.component.ts","webpack:///src/app/upload-assets/upload-img/upload-img.component.html","webpack:///src/app/upload-assets/upload-text/upload-text.component.ts","webpack:///src/app/upload-assets/upload-text/upload-text.component.html","webpack:///src/app/upload-assets/upload-video/upload-video.component.ts","webpack:///src/app/upload-assets/upload-video/upload-video.component.html","webpack:///src/app/upload-assets/video-select/video-select.component.ts","webpack:///src/app/upload-assets/video-select/video-select.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","$event","stopPropagation","AssetConn","AccountStructComponent","dataService","_changeDetectorRef","_subscriptions","assetConn","displayedColumns$","nonTextAssetCols","textAssetCols","adgroup_sel","headline_sel","description_sel","pageSizeOptions","uploadMode","selectionMade","changes","account","currentValue","previousValue","addAdGroupsToTable","next","getDisplayedColumns","detectChanges","push","activeAssetAdGroups$","subscribe","adGroups","_assetToAdgroups","dataSource","paginator","firstPage","updateRowSelections","activeAsset$","asset","_activeAsset","isTextAsset","activeAsset","type","TEXT","applyFilterPredicate","filter","sub","unsubscribe","_adGroupRows","createAdGroupRows","sort","sortingDataAccessor","item","property","selected","includes","filterPredicate","data","filterKeywords","split","searchFilter","i","length","keyword","String","name","toLowerCase","campaign_name","headlinePerformance","descriptionPerformance","status","campaign_status","performance","cols","showAdGroupColOnly","adgroups","forEach","ag","isEdited","disabled","clear","selectAdGroup","ADGROUP","HEADLINE","DESC","connType","selectAdGroups","get","selectedRows","agRow","some","adGroup","map","performance_type","selArray","getSelectionArray","select","row","start","direction","sortChange","emit","event","filterValue","target","value","trim","clearSelection","toggle","markForCheck","isEmpty","selArr","numSelected","numRows","filteredData","isAllSelected","selectAll","unselectRow","selectRow","isSelected","toggleSelection","updatedRows","rows","getUpdatedRows","agIds","_account","applyFilter","selector","templateUrl","styleUrls","routes","path","component","redirectTo","AppRoutingModule","forRoot","imports","AppSetupComponent","_configService","_authorizationService","_cidPipe","setupDialogRef","generateTokenURL","verificationTitle","verificationText","setupInProgress","isLoggedIn","errorFound","updateSize","loggedIn$","loggedIn","resetState","config","client_customer_id","Number","transform","credentials","form","REMOVE_DASHES","client_id","client_secret","developer_token","selectedIndex","updateConfigCache","setConfigCredentials","subscription","setConfigRefreshCode","getRefreshToken","response","refresh_token","body","config_valid","logout","error","authenticate","provide","useValue","displayDefaultIndicatorType","selectionChange","forceLogin","providers","AppComponent","title","isLoaded","AppModule","declarations","bootstrap","AssetDetailsComponent","_snackBar","assetType","updateInProgress","updateMessage","isErrorMessage","_","updateFinished$","msg","status_code","SUCCESS","accountAdGroups","resetEditedRows","open","duration","horizontalPosition","verticalPosition","closeAssetDetails","mutateRecords","createMutateRecord","console","log","updateAsset","sortBySelection","mutateObjs","connection","createMutateObj","action","ADD","REMOVE","assetObj","createAssetObj","mutateObj","adgroup","asset_text","text_type_to_assign","VIDEO","video_id","onClose","AssetGalleryComponent","_dataService","_reloadAppService","_setupDialog","openSideNav","showAssetGrid","loadConfigSettings","loadYtConfigSettings","configLoaded$","loaded","getConfigSettings","configDialogRef","disableClose","afterClosed","success","loadMccStruct","accountAGs$","sideNav","close","reloadMcc","loadAccounts","openSnackBar","configValid","reloadAccountIds","dismissSnackBar","openSnackBarStructFail","opened","assetDetails","loadAdGroups","unselectAsset","undefined","dismiss","openAssetDetails","bind","ASSET_TYPES","label","ALL","IMG","HTML","AssetGridComponent","_uploadDialog","filterOptions","filterStr","filterType","filteredAssets","assetsPerPage$","connect","allAssets$","assets","disconnect","uploadDialogRef","successful","lastPage","activeAssetId","searchStr","filterAssetType","toLocaleLowerCase","indexOf","AssetComponent","router","_previewDialog","_cd","changeAsset","url","_asset","image_url","full_url","link","ErrorDialogComponent","dialogRef","reloadApp","HttpErrorInterceptor","dialog","reloadAppService","request","handle","pipe","ErrorEvent","errorMessage","message","openErrorDialog","width","autoFocus","result","LoaderInterceptor","loaderService","totalRequests","show","hide","LoginComponent","_authService","btnLabel","btnClick","setLabel","loginOrOut","AssetType","AssetConnType","MutateAction","STATUS","PreviewComponent","tag","document","createElement","src","appendChild","SearchBarComponent","searchPlaceholder","searchCriteria","filterCriteria","searchPlaceholderTxt","searchThis","checkPlaceHolder","AssetService","_http","API_SERVER","location","origin","_activeAccountId$","_activeAccount$","_accountAGs$","_allAssets$","_assetsToAdGroups","_activeAsset$","_activeAssetAdGroups$","_updateFinished$","asObservable","activeAccount$","activeAccountId$","accountId","endpoint","params","cid","toString","accountAGs","getActiveAssetAdGroups","getAllAssets","getAccountAdGroups","getAssetsToAdGroups","assetId","assetAdGroups","Map","AssetConnection","text_type","set","changedAsset","updateArray","load","post","observe","updatedAssets","update","index","txt_asset","PARTIAL_SUCCESS","failures","failure","adgroup_name","error_message","FAIL","waitTime","setTimeout","getValue","concat","providedIn","AuthorizationService","authInstance","refreshToken","retrieveStoredRefreshToken","token","loggedInSubject","pload","gapi","auth2","init","scope","auth","force","storedToken","initGoogleAuth","grantOfflineAccess","access_type","prompt","res","refreshAccessToken","err","getConfigRefreshCode","toPromise","storeRefreshToken","window","localStorage","setItem","getItem","removeItem","removeStoredRefreshToken","login","ConfigService","http","_configSettings","_YtConfigSettings","_configLoaded$","subscritpion","mcc","clientId","clientSecret","dev_token","redirect_uri","configObj","refreshCode","conf","channel_id","api_key","LoaderService","isLoading","ReloadAppService","UploadAssetService","_YtVidList$","ytVidList$","text","textAsset","asset_type","asset_name","assetName","height","image","vids","uploadList","payload","SettingsComponent","editMode","backdropClick","revertConfigSettings","YtConf","ytCredentials","YTform","setYouTubeConfig","updateYtConfigSettings","onEdit","onYtSubmit","transformAction","ClientIDPipe","newStr","ADD_DASHES","slice","replace","CredentialsComponent","_formBuilder","mcc_cid","group","mccCtrl","required","minLength","maxLength","pattern","clientIDCtrl","clientSecretCtrl","devTokenCtrl","refreshCodeCtrl","setValue","invalid","onBlur","RefreshCodeComponent","workInProgress","openURL","onGenerateToken","YtConifgComponent","fb","showText","api_url","console_url","instructions","ytData","channel","key","toggleText","ErrorMsgPipe","sanitizer","newValue","replaceAll","urlStartIdx","urlEndIdx","startTag","substring","endTag","bypassSecurityTrustHtml","LoaderComponent","cdf","loading","MaterialModule","ProgressBtnComponent","isError","SharedModule","useClass","multi","FileType","UploadComponent","_uploadService","fileNames","selectedFileName","invalidDimensionsMsg","isValid","files","file","acceptsType","fileReader","FileReader","img","Image","self","onload","validateDimensions","valid","readAsDataURL","nativeElement","submit","onChange","ToolbarComponent","_settingsDialog","loadAccountIds","accounts$","getAccountIds","accounts","defaultAccount","changeAccount","isUserInput","source","ytConfig","getYtConfigSettings","yt","mailText","href","openSettings","feedbackClicked","ErrorMatcher","control","dirty","UploadAssetsComponent","_uploadAssetService","_assetService","assetTypes","isBulkFilesSelected","isChildFormValid","uploadInProgress","uploadMessage","types","TEXT_HEADLINE","TEXT_DESC","canAddAsset","uploadAssetType","beforeClosed","clearUploads","yt_creds","loadYtChannelVideos","isBulkUpload","uploadVideo","uploadBulkVids","addNewAsset","stepper","uploadImg","uploadToServer","uploadHtml","uploadText","isCurrentStepValid","previous","canAdd","assetText","getSelectedAdGroupIDs","upload","addTextAsset","processUploadResponse","buildErrorResponse","uploadAsset","unsuccessfull","onAssetTypeChange","updateCanAddAsset","UploadHtmlComponent","fileTypes","validEvent","updateIsValid","UploadImgComponent","UploadTextComponent","errorMatcher","textCtrl","valueChanges","change","isHeadline","textAssetType","setValidators","onBackspace","UploadVideoComponent","_vidSelect","options","display","disable","chosenVids","isBulkVidFilesSelected","videoNameCtrl","videoUrlCtrl","bulkUploadToYt","emitIsBulkUpload","VideoSelectComponent","formBuilder","mySelect","myOtherControl","videos","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Component,\n  ViewChild,\n  OnChanges,\n  SimpleChanges,\n  Input,\n  ChangeDetectorRef,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort, MatSortable } from '@angular/material/sort';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { AssetAdGroups, Asset, AssetConnType, AssetType } from '../model/asset';\nimport { AssetService } from '../services/asset.service';\nimport { AccountAGs, AdGroup } from '../model/account';\nimport { BehaviorSubject, Subscription } from 'rxjs';\n\n/** checkmark options allows the storing of states for all three checkboxes at the same time\n * adGroup, headlines and description - to be accessed by AssetConn\n */\nexport enum AssetConn {\n  ADGROUP = 0,\n  HEADLINE = 1,\n  DESC = 2,\n}\nexport type checkBoxOptions = Array<boolean>;\n\n/** Each row in the ad groups table is represented by one of these objects */\nexport interface AdGroupRow extends AdGroup {\n  name: string;\n  id: number;\n  status: string;\n  campaign: string;\n  campaign_id: number;\n  campaign_status: string;\n  performance: string;\n  headlinePerformance: string;\n  descriptionPerformance: string;\n\n  /** Every adgroups has to store the edited/disabled state of all three checkmarks  */\n  disabled: checkBoxOptions;\n  isEdited: checkBoxOptions;\n}\n/**\n * This component works in two modes: Update and Upload\n * . Update mode has 3 selection columns (1 for non-text assets and 2 for text assets)\n *   Depending on the selected asset type, the selection columns are visible\n * . Upload mode only makes use of the adgroup selection column\n */\n@Component({\n  selector: 'app-account-struct',\n  templateUrl: './account-struct.component.html',\n  styleUrls: ['./account-struct.component.css'],\n})\nexport class AccountStructComponent implements OnChanges {\n  private _subscriptions: Subscription[] = [];\n\n  /** Memebers that represent the data that will be displayed */\n  private _account: AccountAGs;\n  private _activeAsset: Asset;\n  private _adGroupRows: AdGroupRow[];\n  private _assetToAdgroups: AssetAdGroups;\n  assetConn = AssetConn; /** connection types to be used in the html file */\n  isTextAsset: boolean; /** When this is set, Headline and Description columns appear and main selection column disappears */\n  filter: string;\n\n  displayedColumns$ = new BehaviorSubject<string[]>(null);\n  /** Members that represent the table UI\n   * There are three selectable columns; one for non-text assets\n   * 2 for text assets (Headlines and Descriptions)\n   * the visibility of the columns depends on the asset type\n   */\n  nonTextAssetCols: string[] = ['adgroup-sel', 'adgroup', 'adgroup-enabled', 'performance', 'campaign', 'campaign-enabled'];\n  textAssetCols: string[] = ['headline-sel', 'headline-performance', 'desc-sel', 'desc-performance', 'adgroup', 'adgroup-enabled', 'campaign', 'campaign-enabled'];\n\n  dataSource: MatTableDataSource<AdGroupRow>;\n  adgroup_sel = new SelectionModel<AdGroupRow>(true, []);\n  headline_sel = new SelectionModel<AdGroupRow>(true, []);\n  description_sel = new SelectionModel<AdGroupRow>(true, []);\n  pageSizeOptions = [10, 25, 50];\n\n  @Input()\n  set account(account: AccountAGs) {\n    this._account = account;\n  }\n  get account(): AccountAGs {\n    return this._account;\n  }\n\n  @Input()\n  set activeAsset(asset: Asset) {\n    this._activeAsset = asset;\n  }\n  get activeAsset(): Asset {\n    return this._activeAsset;\n  }\n\n  @Input() uploadMode: boolean = false;\n  @Output() selectionMade: EventEmitter<boolean> = new EventEmitter<boolean>();\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n\n  constructor(\n    private dataService: AssetService,\n    private _changeDetectorRef: ChangeDetectorRef\n  ) {}\n  ngOnChanges(changes: SimpleChanges): void {\n    // Get new adgroups if active account has changed\n    if (\n      changes.account?.currentValue?.id != changes.account?.previousValue?.id\n    ) {\n      this.addAdGroupsToTable();\n    }\n    if (changes.uploadMode) {\n      this.displayedColumns$.next(this.getDisplayedColumns());\n      this.pageSizeOptions = [5, 25, 50];\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  ngOnInit(): void {\n    // Refresh asset to ad group\n    this._subscriptions.push(\n      this.dataService.activeAssetAdGroups$.subscribe((adGroups) => {\n        this._assetToAdgroups = adGroups;\n        if (this.dataSource?.paginator) {\n          this.dataSource.paginator.firstPage();\n        }\n        this.updateRowSelections();\n      })\n    );\n\n    // Refresh the asset details in the table if asset changes\n    this._subscriptions.push(\n      this.dataService.activeAsset$.subscribe((asset) => {\n        if (asset) {\n          this._activeAsset = asset;\n          // Update table according to asset type\n          this.isTextAsset = this.activeAsset.type == AssetType.TEXT;\n          this.displayedColumns$.next(this.getDisplayedColumns());\n          this._changeDetectorRef.detectChanges();\n          this.applyFilterPredicate();\n\n          // Reset the filter if any\n          this.filter = '';\n          this.dataSource.filter = '';\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    for (let sub of this._subscriptions) {\n      sub.unsubscribe();\n    }\n  }\n\n  addAdGroupsToTable() {\n    this._adGroupRows = this.createAdGroupRows();\n    // Assign the data to the data source for the table to render\n    this.dataSource = new MatTableDataSource(this._adGroupRows);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n\n    this.applyFilterPredicate();\n\n    // Adjust sorting criteria\n    this.dataSource.sortingDataAccessor = (item, property) => {\n      switch (property) {\n        case 'adgroup-sel':\n          return this.adgroup_sel.selected.includes(item);\n        case 'headline-sel':\n        case 'desc-sel':\n          return (\n            this.headline_sel.selected.includes(item) ||\n            this.description_sel.selected.includes(item)\n          );\n        default:\n          return item[property];\n      }\n    };\n  }\n\n  applyFilterPredicate(): void {\n    /** Creates the Filter Predicate for searching within the adgroup table.\n     * \n     * A different predicate is made depending on whether the asset is a text asset\n     * or not. This is due to text assets displaying a different set of columns.\n     */\n\n    if (this.isTextAsset) {\n      this.dataSource.filterPredicate = function(data, filter: string): boolean {\n        var filterKeywords = filter.split(' ');\n        var searchFilter = true;\n  \n        for (var i=0; i < filterKeywords.length; i++) {\n          var keyword = filterKeywords[i];\n          searchFilter = searchFilter &&\n            String(data.name).toLowerCase().includes(keyword) ||\n            String(data.campaign_name).toLowerCase().includes(keyword) ||\n            String(data.headlinePerformance).toLowerCase().includes(keyword) ||\n            String(data.descriptionPerformance).toLowerCase().includes(keyword) ||\n            String(data.status).toLowerCase().includes(keyword) ||\n            String(data.campaign_status).toLowerCase().includes(keyword);\n        }\n        return searchFilter;\n      };\n    } else {\n      this.dataSource.filterPredicate = function(data, filter: string): boolean {\n        var filterKeywords = filter.split(' ');\n        var searchFilter = true;\n  \n        for (var i=0; i < filterKeywords.length; i++) {\n          var keyword = filterKeywords[i];\n          searchFilter = searchFilter &&\n            String(data.name).toLowerCase().includes(keyword) ||\n            String(data.campaign_name).toLowerCase().includes(keyword) ||\n            String(data.performance).toLowerCase().includes(keyword) ||\n            String(data.status).toLowerCase().includes(keyword) ||\n            String(data.campaign_status).toLowerCase().includes(keyword);\n        }\n        return searchFilter;\n      };\n    }\n  }\n\n  getDisplayedColumns(): string[] {\n    let cols = [];\n    this.showAdGroupColOnly()\n      ? (cols = this.nonTextAssetCols)\n      : (cols = this.textAssetCols);\n    return cols;\n  }\n\n  /** Creates adGroup rows for all account adgroups */\n  private createAdGroupRows(): AdGroupRow[] {\n    let adgroups = this.account.adgroups;\n    // Add any additional fields here\n    adgroups.forEach(ag => {\n      (ag as AdGroupRow).isEdited = [false, false, false];\n      (ag as AdGroupRow).disabled = [false, false, false];\n    });\n    return adgroups as AdGroupRow[];\n  }\n\n  updateRowSelections() {\n    // Clear previous selections\n    this.adgroup_sel.clear();\n    this.headline_sel.clear();\n    this.description_sel.clear();\n\n    // Filter the rows that need to be selected\n    if (this._assetToAdgroups) {\n      if (this.showAdGroupColOnly()) {\n        this.selectAdGroup(AssetConn.ADGROUP);\n      } else {\n        this.selectAdGroup(AssetConn.HEADLINE);\n        this.selectAdGroup(AssetConn.DESC);\n      }\n    }\n    this._changeDetectorRef.detectChanges();\n  }\n\n  selectAdGroup(assetConn: AssetConn) {\n    let connType: AssetConnType = AssetConnType.ADGROUP;\n    switch (assetConn) {\n      case AssetConn.HEADLINE:\n        connType = AssetConnType.HEADLINE;\n        break;\n      case AssetConn.DESC:\n        connType = AssetConnType.DESC;\n        break;\n    }\n    let selectAdGroups = this._assetToAdgroups?.get(connType);\n    if (selectAdGroups) {\n      let selectedRows = this._adGroupRows.filter((agRow) =>\n        selectAdGroups.some((adGroup) => agRow.id == adGroup.id)\n      );\n\n      this._adGroupRows.map(agRow => {\n        selectAdGroups.filter(ag => ag.id == agRow.id).forEach(adGroup => {\n          switch (adGroup.performance_type) {\n            case 'adgroup': {\n              agRow.performance = adGroup.performance;\n              break;\n            }\n            case 'headlines': {\n              agRow.headlinePerformance = adGroup.performance;\n              break;\n            }\n            case 'descriptions': {\n              agRow.descriptionPerformance = adGroup.performance;\n              break;\n            }\n            default: {\n              agRow.performance = adGroup.performance;\n              break;\n            }\n          }\n        })\n      });\n\n      let selArray = this.getSelectionArray(assetConn);\n      selArray.select(...selectedRows);\n    }\n  }\n\n  resetEditedRows() {\n    this.dataSource?.data?.forEach((row) => {\n      row.isEdited = [false, false, false];\n    });\n  }\n\n  sortBySelection() {\n    if (this.showAdGroupColOnly()) {\n      this.sort.sort(<MatSortable>{ id: 'adgroup-sel', start: 'desc' });\n    } else {\n      this.sort.sort(<MatSortable>{ id: 'desc-sel', start: 'desc' });\n      this.sort.sort(<MatSortable>{ id: 'headline-sel', start: 'desc' });\n    }\n    this.sort.direction = 'desc';\n    this.dataSource.sort = this.sort;\n    this.dataSource.sort.sortChange.emit();\n  }\n\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n    \n    this.clearSelection(AssetConn.HEADLINE);\n    this.clearSelection(AssetConn.DESC);\n    this.clearSelection(AssetConn.ADGROUP);\n  }\n\n  toggleSelection(agRow: AdGroupRow, assetConn: AssetConn) {\n    if (agRow) {\n      // Toggle the edited property then update the selection array\n      switch (assetConn) {\n        case AssetConn.HEADLINE:\n          agRow.isEdited[AssetConn.HEADLINE] = !agRow.isEdited[\n            AssetConn.HEADLINE\n          ];\n          break;\n        case AssetConn.DESC:\n          agRow.isEdited[AssetConn.DESC] = !agRow.isEdited[AssetConn.DESC];\n          break;\n        default:\n          agRow.isEdited[AssetConn.ADGROUP] = !agRow.isEdited[\n            AssetConn.ADGROUP\n          ];\n          break;\n      }\n\n      this.getSelectionArray(assetConn).toggle(agRow);\n      this._changeDetectorRef.markForCheck();\n\n      // Now that there is a selection change check if at least one row is selected\n      // This is needed to enable the \"Add Asset\" button in the upload dialog\n      // Note: the check is only made on the adgroup selection array because\n      // the upload button opnly supports one selection column (adgroup_sel)\n      this.selectionMade.emit(!this.adgroup_sel.isEmpty());\n    }\n  }\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected(assetConn: AssetConn) {\n    let selArr = this.getSelectionArray(assetConn);\n    const numSelected = selArr.selected.length;\n    const numRows = this.dataSource.filteredData.length;\n    return numSelected === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle(assetConn: AssetConn) {\n    this.isAllSelected(assetConn)\n      ? this.clearSelection(assetConn)\n      : this.selectAll(assetConn);\n  }\n\n  clearSelection(assetConn: AssetConn) {\n    this.dataSource.data.forEach((row) => this.unselectRow(row, assetConn));\n    this.adgroup_sel.clear();\n    this.headline_sel.clear();\n    this.description_sel.clear();\n  }\n\n  selectAll(assetConn: AssetConn) {\n    this.dataSource.filteredData.forEach((row) => this.selectRow(row, assetConn));\n  }\n\n  getSelectionArray(assetConn: AssetConn) {\n    let selArr;\n    switch (assetConn) {\n      case AssetConn.HEADLINE:\n        selArr = this.headline_sel;\n        break;\n      case AssetConn.DESC:\n        selArr = this.description_sel;\n        break;\n      default:\n        selArr = this.adgroup_sel;\n        break;\n    }\n    return selArr;\n  }\n\n  private selectRow(row: AdGroupRow, assetConn: AssetConn) {\n    let selArr = this.getSelectionArray(assetConn);\n    if (!selArr.isSelected(row)) {\n      this.toggleSelection(row, assetConn);\n    }\n  }\n\n  private unselectRow(row: AdGroupRow, assetConn: AssetConn) {\n    let selArr = this.getSelectionArray(assetConn);\n    if (selArr.isSelected(row)) {\n      this.toggleSelection(row, assetConn);\n    }\n  }\n\n  private showAdGroupColOnly(): boolean {\n    return !this.isTextAsset || this.uploadMode;\n  }\n\n  getUpdatedRows(): AdGroupRow[] {\n    let updatedRows = this._adGroupRows.filter(\n      (agRow) =>\n        (this.showAdGroupColOnly() &&\n          agRow.isEdited[AssetConn.ADGROUP] == true) ||\n        (this.isTextAsset &&\n          (agRow.isEdited[AssetConn.HEADLINE] == true ||\n            agRow.isEdited[AssetConn.DESC] == true))\n    );\n    return updatedRows;\n  }\n\n  getSelectedAdGroupIDs(): number[] {\n    let rows = this.getUpdatedRows();\n    let agIds = [];\n    rows.forEach((row) => agIds.push(row.id));\n\n    return agIds;\n  }\n}\n","<mat-form-field id=\"accountFilter\">\n    <mat-label>Filter</mat-label>\n    <input matInput\n      [(ngModel)]=\"filter\"\n      (keyup)=\"applyFilter($event)\"\n      placeholder=\"Use spaces to separate search terms\"\n      #tableFilterInput>\n</mat-form-field>\n\n<div>\n  <table mat-table [dataSource]=\"dataSource\" matSort>\n\n    <!-- Selection column for non-text assets -->\n    <ng-container\n      *ngIf=\"!isTextAsset\"\n      matColumnDef=\"adgroup-sel\">\n      <th mat-header-cell *matHeaderCellDef>\n        <mat-checkbox class=\"header-checkmark\"\n          (change)=\"$event ? masterToggle(assetConn.ADGROUP) : null\"\n          [checked]=\"adgroup_sel.hasValue() && isAllSelected(assetConn.ADGROUP)\"\n          [indeterminate]=\"adgroup_sel.hasValue() && !isAllSelected(assetConn.ADGROUP)\">\n        </mat-checkbox>\n      </th>\n      <td mat-cell *matCellDef=\"let row\">\n        <i *ngIf=\"row.isEdited[assetConn.ADGROUP]\" class=\"fas fa-pen\"></i>\n        <mat-checkbox\n          [disabled] = \"row.disabled[assetConn.ADGROUP]\"\n          (click)=\"$event.stopPropagation()\"\n          (change)=\"toggleSelection(row, assetConn.ADGROUP)\"\n          [checked]=\"adgroup_sel.isSelected(row)\">\n        </mat-checkbox>\n      </td>\n    </ng-container>\n\n    <!-- Selection column for text assets -->\n    <ng-container\n      matColumnDef=\"headline-sel\">\n      <th mat-header-cell *matHeaderCellDef>\n        <mat-checkbox class=\"header-checkmark\"\n          (change)=\"$event ? masterToggle(assetConn.HEADLINE) : null\"\n          [checked]=\"headline_sel.hasValue() && isAllSelected(assetConn.HEADLINE)\"\n          [indeterminate]=\"headline_sel.hasValue() && !isAllSelected(assetConn.HEADLINE)\">\n        </mat-checkbox>Headline\n      </th>\n      <td mat-cell *matCellDef=\"let row\">\n        <i *ngIf=\"row.isEdited[assetConn.HEADLINE]\" class=\"fas fa-pen\"></i>\n        <mat-checkbox\n          [disabled] = \"row.disabled[assetConn.HEADLINE]\"\n          (click)=\"$event.stopPropagation()\"\n          (change)=\"toggleSelection(row, assetConn.HEADLINE)\"\n          [checked]=\"headline_sel.isSelected(row)\">\n        </mat-checkbox>\n      </td>\n    </ng-container>\n    <!-- Headline Performance Column -->\n    <ng-container *ngIf=\"isTextAsset\" matColumnDef=\"headline-performance\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Headline Performance </th>\n      <td mat-cell *matCellDef=\"let row\"> {{row.headlinePerformance}} </td>\n    </ng-container>\n    <ng-container\n      matColumnDef=\"desc-sel\">\n      <th mat-header-cell *matHeaderCellDef>\n        <mat-checkbox class=\"header-checkmark\"\n          (change)=\"$event ? masterToggle(assetConn.DESC) : null\"\n          [checked]=\"description_sel.hasValue() && isAllSelected(assetConn.DESC)\"\n          [indeterminate]=\"description_sel.hasValue() && !isAllSelected(assetConn.DESC)\">\n        </mat-checkbox>Desc.\n      </th>\n      <td mat-cell *matCellDef=\"let row\">\n        <i *ngIf=\"row.isEdited[assetConn.DESC]\" class=\"fas fa-pen\"></i>\n        <mat-checkbox\n          [disabled] = \"row.disabled[assetConn.DESC]\"\n          (click)=\"$event.stopPropagation()\"\n          (change)=\"toggleSelection(row, assetConn.DESC)\"\n          [checked]=\"description_sel.isSelected(row)\">\n        </mat-checkbox>\n      </td>\n    </ng-container>\n    <!-- Description Performance Column -->\n    <ng-container *ngIf=\"isTextAsset\" matColumnDef=\"desc-performance\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Description Performance </th>\n      <td mat-cell *matCellDef=\"let row\"> {{row.descriptionPerformance}} </td>\n    </ng-container>\n      <!-- Type Column -->\n      <!-- <ng-container matColumnDef=\"type\">\n        <th mat-header-cell *matHeaderCellDef> Type </th>\n        <td mat-cell *matCellDef=\"let row\"> {{row.type}}% </td>\n      </ng-container> -->\n\n      <!-- AdGroup Column -->\n      <ng-container matColumnDef=\"adgroup\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Ad group </th>\n        <td mat-cell *matCellDef=\"let row\"> {{row.name}} </td>\n      </ng-container>\n      <!-- AdGroup Enabled Column -->\n      <ng-container matColumnDef=\"adgroup-enabled\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Active </th>\n        <td mat-cell *matCellDef=\"let row\"> {{row.status}} </td>\n      </ng-container>\n\n      <!-- Performance Column -->\n      <ng-container *ngIf=\"!isTextAsset\" matColumnDef=\"performance\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Performance </th>\n        <td mat-cell *matCellDef=\"let row\"> {{row.performance}} </td>\n      </ng-container>\n\n      <!-- Campaign Column -->\n      <ng-container matColumnDef=\"campaign\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Campaign </th>\n        <td mat-cell *matCellDef=\"let row\"> {{row.campaign_name}} </td>\n      </ng-container>\n      <!-- Campaign Enabled Column -->\n      <ng-container matColumnDef=\"campaign-enabled\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Active </th>\n        <td mat-cell *matCellDef=\"let row\"> {{row.campaign_status}} </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns$ | async\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns$ | async\"></tr>\n\n      <!-- Row shown when there is no matching data. -->\n      <tr class=\"mat-row\" *matNoDataRow>\n        <td class=\"mat-cell\" colspan=\"3\">No data matching the filter \"{{tableFilterInput.value}}\"</td>\n      </tr>\n    </table>\n  <mat-paginator\n    [pageSizeOptions]=\"pageSizeOptions\"\n    [showFirstLastButtons]=true>\n  </mat-paginator>\n</div>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AssetGalleryComponent } from './asset-gallery/asset-gallery.component';\n\nconst routes: Routes = [\n  { path: '', component: AssetGalleryComponent},\n  { path: '**', redirectTo: ''}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, OnInit, Inject, ViewChild } from '@angular/core';\n//import { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Subscription, from } from 'rxjs';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n} from '@angular/material/dialog';\nimport { ConfigSettings } from '../model/settings';\nimport {\n  StepperSelectionEvent,\n  STEPPER_GLOBAL_OPTIONS,\n} from '@angular/cdk/stepper';\nimport { ConfigService } from '../services/config.service';\nimport { CredentialsComponent } from '../shared/config/credentials/credentials.component';\nimport { ClientIDPipe, transformAction } from '../shared/client-id.pipe';\nimport { AuthorizationService } from '../services/authorization.service';\n\n@Component({\n  selector: 'app-app-setup',\n  templateUrl: './app-setup.component.html',\n  styleUrls: ['./app-setup.component.css'],\n  providers: [\n    {\n      provide: STEPPER_GLOBAL_OPTIONS,\n      useValue: { displayDefaultIndicatorType: false },\n    },\n  ],\n})\nexport class AppSetupComponent implements OnInit {\n  private _subscriptions: Subscription[] = [];\n\n  generateTokenURL: string = '';\n  verificationTitle: string = 'Setup verification';\n  verificationText: string = '';\n  setupInProgress: boolean = true;\n  isLoggedIn: boolean = false;\n  errorFound: boolean = false;\n\n  @ViewChild('credentialsFormGroup') credentials: CredentialsComponent;\n  @ViewChild('refreshCodeFormGroup') refreshCode: CredentialsComponent;\n\n  constructor(\n    private _configService: ConfigService,\n    private _authorizationService: AuthorizationService,\n    private _cidPipe: ClientIDPipe,\n    public setupDialogRef: MatDialogRef<AppSetupComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: ConfigSettings\n  ) {}\n\n  ngOnInit(): void {\n    this.setupDialogRef.updateSize('800px', '520px');\n\n    this._subscriptions.push(\n      this._authorizationService.loggedIn$.subscribe((loggedIn) => {\n        this.isLoggedIn = loggedIn;\n      })\n    )\n  }\n\n  revertChanges() {}\n\n  selectionChange(event: StepperSelectionEvent) {\n    this.resetState();\n    let config: ConfigSettings = {\n      client_customer_id: Number(\n        this._cidPipe.transform(\n          this.credentials.form.get('mccCtrl').value,\n          transformAction.REMOVE_DASHES\n        )\n      ),\n      client_id: this.credentials.form.get('clientIDCtrl').value.trim(),\n      client_secret: this.credentials.form.get('clientSecretCtrl').value.trim(),\n      developer_token: this.credentials.form.get('devTokenCtrl').value.trim(),\n    };\n    if (event.selectedIndex === 1) {\n      // This is the login-to-server section.\n      // Updates the config settings in the Auth service and on the\n      // server-side to ensure correct gapi behaviour.\n      this._configService.updateConfigCache(config);\n      this._configService.setConfigCredentials(\n          config.client_customer_id,\n          config.client_id,\n          config.client_secret,\n          config.developer_token\n        ).subscribe();\n    } else if (event.selectedIndex === 2) {\n      // Update the refresh token - this will trigger a verification of\n      // the credentials in the backend\n      let subscription = this._configService\n        .setConfigRefreshCode(\n          this._authorizationService.getRefreshToken()\n        )\n        .subscribe(\n          (response) => {\n            config.refresh_token = response.body;\n            config.config_valid = true;\n            this._configService.updateConfigCache(config);\n            this.setupInProgress = false;\n            this.verificationText = 'Setup complete!';\n            this._authorizationService.logout();\n            subscription.unsubscribe();\n          },\n          (error) => {\n            this.setupInProgress = false;\n            this.errorFound = true;\n            this.verificationText = 'Setup failed. Invalid credentials.';\n            subscription.unsubscribe();\n          }\n        );\n    }\n  }\n\n  forceLogin() {\n    this.resetState();\n\n    let subscription = from(this._authorizationService.authenticate(true))\n      .subscribe(\n        (response) => {\n          subscription.unsubscribe();\n        },\n        (error) => {\n          this.errorFound = true;\n          this.verificationText = error;\n          subscription.unsubscribe();\n        });\n  }\n\n  private resetState() {\n    this.errorFound = false;\n    this.verificationText = '';\n    this.setupInProgress = true;\n  }\n}\n","<h1 mat-dialog-title>Setup AssetMG</h1>\n<div mat-dialog-content>\n  <mat-vertical-stepper linear=true (selectionChange)=\"selectionChange($event)\" #stepper>\n    <mat-step [stepControl]=\"credentialsFormGroup\">\n        <ng-template matStepLabel>Enter your account credentials</ng-template>\n        <app-credentials #credentialsFormGroup\n          [data]=\"this.data\"\n          editMode=\"true\"></app-credentials>\n        <div>\n          <button\n            mat-stroked-button\n            matStepperNext\n            [disabled]=\"!credentialsFormGroup.form.valid\"\n            color=\"primary\"\n            class=\"right-align\">Next</button>\n        </div>\n    </mat-step>\n    <mat-step>\n      <ng-template matStepLabel>Generate a refresh token</ng-template>\n      <p>Click below to login with your service account. Once you've done so, click next.</p>\n      <app-progress-btn\n        btnLabel='Server Login'\n        (btnClick)=\"forceLogin()\">\n      </app-progress-btn>\n      <div class=\"vertical-padding setup-result\">\n        <p [ngClass]=\"{'error-msg': this.errorFound }\">{{verificationText}}</p>\n      </div>\n      <div>\n        <button mat-stroked-button matStepperPrevious color=\"primary\">Back</button>\n        <button mat-stroked-button\n          matStepperNext\n          [disabled]=\"!isLoggedIn\"\n          color=\"primary\"\n          class=\"right-align\">Next</button>\n      </div>\n    </mat-step>\n    <mat-step>\n      <ng-template matStepLabel>{{verificationTitle}}</ng-template>\n      <div class=\"vertical-padding setup-result\">\n        <p [ngClass]=\"{'error-msg': this.errorFound }\">{{verificationText}}</p>\n      </div>\n      <div><app-loader></app-loader></div>\n      <div *ngIf=\"!this.setupInProgress\" mat-dialog-actions>\n        <button mat-stroked-button\n          matStepperPrevious\n          color=\"primary\">Back</button>\n        <button *ngIf=\"!this.errorFound\"\n          mat-stroked-button\n          [mat-dialog-close]=\"true\"\n          color=\"primary\"\n          class=\"right-align\">Done</button>\n        <!-- <button *ngIf=\"this.errorFound && this.getOldConf().config_valid\"\n          mat-stroked-button\n          [mat-dialog-close]=\"true\"\n          (click)=\"revertChanges()\"\n          color=\"primary\"\n          class=\"right-align\">Revert</button> -->\n      </div>\n    </mat-step>\n  </mat-vertical-stepper>\n</div>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  title = 'Asset Manager';\n  isLoaded = true;\n}\n","<!--The content below is only a placeholder and can be replaced.-->\n<div class = \"asset-mg-window\">\n<router-outlet></router-outlet>\n<div id=\"main-loader\" *ngIf=\"!isLoaded\">\n  <div class=\"wrap\">\n    <div class=\"loading\">\n        <img src=\"assets/gtech_logo.png\">\n        <div class=\"text\">LOADING</div>\n    </div>\n  </div>\n</div>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { AssetGalleryComponent } from './asset-gallery/asset-gallery.component';\nimport { AssetDetailsComponent } from './asset-details/asset-details.component';\nimport { AssetComponent } from './asset/asset.component';\nimport { ToolbarComponent } from './toolbar/toolbar.component';\nimport { SearchBarComponent } from './search-bar/search-bar.component';\nimport { SettingsComponent } from './settings/settings.component';\nimport { AppSetupComponent } from './app-setup/app-setup.component';\nimport { UploadAssetsComponent } from './upload-assets/upload-assets.component';\nimport { UploadTextComponent } from './upload-assets/upload-text/upload-text.component';\nimport { UploadImgComponent } from './upload-assets/upload-img/upload-img.component';\nimport { UploadVideoComponent } from './upload-assets/upload-video/upload-video.component';\nimport { UploadHtmlComponent } from './upload-assets/upload-html/upload-html.component';\nimport { SharedModule } from './shared/shared.module';\nimport { PreviewComponent } from './preview/preview.component';\nimport { YouTubePlayerModule } from '@angular/youtube-player';\nimport { AccountStructComponent } from './account-struct//account-struct.component';\nimport { AssetGridComponent } from './asset-grid/asset-grid.component';\nimport { ErrorDialogComponent } from './error-dialog/error-dialog.component';\nimport { VideoSelectComponent } from './upload-assets/video-select/video-select.component';\nimport { Ng2SearchPipeModule } from 'ng2-search-filter';\nimport { LoginComponent } from './login/login.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    AssetGalleryComponent,\n    AssetDetailsComponent,\n    AssetComponent,\n    ToolbarComponent,\n    SearchBarComponent,\n    SettingsComponent,\n    AppSetupComponent,\n    UploadAssetsComponent,\n    UploadTextComponent,\n    UploadImgComponent,\n    UploadVideoComponent,\n    UploadHtmlComponent,\n    PreviewComponent,\n    AccountStructComponent,\n    AssetGridComponent,\n    ErrorDialogComponent,\n    VideoSelectComponent,\n    LoginComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    SharedModule,\n    YouTubePlayerModule,\n    Ng2SearchPipeModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, Input, OnInit, ViewChild } from '@angular/core';\n\nimport {\n  Asset,\n  MutateRecord,\n  MutateAction,\n  AssetConnType,\n  MutateAsset,\n  AssetType,\n  TextAsset,\n  VideoAsset,\n} from './../model/asset';\nimport { Account } from '../model/account';\nimport { AssetService } from './../services/asset.service';\nimport { STATUS } from '../model/response';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport {\n  AccountStructComponent,\n  AdGroupRow,\n  AssetConn,\n} from '../account-struct/account-struct.component';\nimport { Subscription } from 'rxjs';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { setClassMetadata } from '@angular/core/src/r3_symbols';\n\n@Component({\n  selector: 'app-asset-details',\n  templateUrl: './asset-details.component.html',\n  styleUrls: ['./asset-details.component.css'],\n})\nexport class AssetDetailsComponent implements OnInit {\n  private _subscriptions: Subscription[] = [];\n\n  private _account: Account;\n  private _activeAsset: Asset;\n  assetType = AssetType;\n\n  /** Update button params */\n  updateInProgress: boolean = false;\n  updateMessage: string = '';\n  isErrorMessage: boolean = false;\n\n  get asset(): any {\n    return this._activeAsset;\n  }\n\n  @Input()\n  set account(account: Account) {\n    this._account = account;\n  }\n\n  get account(): Account {\n    return this._account;\n  }\n\n  @Input() closeAssetDetails: Function;\n  @ViewChild('accountAdGroups') accountAdGroups: AccountStructComponent;\n\n  constructor(\n    private dataService: AssetService,\n    private _snackBar: MatSnackBar\n  ) {}\n\n  ngOnInit(): void {\n    this._subscriptions.push(\n      this.dataService.activeAsset$.subscribe((asset) => {\n        this._activeAsset = asset;\n      })\n    );\n\n    this._subscriptions.push(\n      this.dataService.activeAssetAdGroups$.subscribe((_) => {\n        this.updateMessage = '';\n        this.isErrorMessage = false;\n      })\n    );\n\n    this._subscriptions.push(\n      this.dataService.updateFinished$.subscribe((response) => {\n        this.updateInProgress = false;\n        if (response) {\n          this.updateMessage = response.msg;\n          this.isErrorMessage = response.status_code !== STATUS.SUCCESS;\n          if (!this.isErrorMessage) {\n            // Update succeeded - reset the checkboxes edit state\n            this.accountAdGroups.resetEditedRows();\n            this._snackBar.open('Updated Successfully', '', {\n              duration: 2000,\n              horizontalPosition: 'center',\n              verticalPosition: 'bottom',\n            });\n          }\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    for (let sub of this._subscriptions) {\n      sub.unsubscribe();\n    }\n  }\n\n  onClose() {\n    this.closeAssetDetails();\n  }\n\n  updateAsset() {\n    let mutateRecords: MutateRecord[] = [];\n    this.accountAdGroups.getUpdatedRows().forEach((row) => {\n      mutateRecords.push(...this.createMutateRecord(row));\n    });\n\n    // console.log('Updates: ', this.accountAdGroups.getUpdatedRows());\n    console.log('Mutate: ', mutateRecords);\n\n    if (mutateRecords.length) {\n      this.updateInProgress = true;\n      this.dataService.updateAsset(this.asset, mutateRecords);\n    }\n  }\n\n  loadAdGroups() {\n    this.accountAdGroups.sortBySelection();\n    this.accountAdGroups.resetEditedRows();\n  }\n\n  private createMutateRecord(row: AdGroupRow): MutateRecord[] {\n    // Assume it's a non-text asset unless it is text\n    let selArray: any;\n    let mutateObjs = [];\n    let connection = AssetConnType.ADGROUP;\n\n    if (this.asset.type != this.assetType.TEXT) {\n      selArray = this.accountAdGroups.adgroup_sel;\n      mutateObjs.push(this.createMutateObj(connection, row, selArray));\n    } else {\n      if (row.isEdited[AssetConn.HEADLINE]) {\n        connection = AssetConnType.HEADLINE;\n        selArray = this.accountAdGroups.headline_sel;\n        mutateObjs.push(this.createMutateObj(connection, row, selArray));\n      }\n      if (row.isEdited[AssetConn.DESC]) {\n        connection = AssetConnType.DESC;\n        selArray = this.accountAdGroups.description_sel;\n        mutateObjs.push(this.createMutateObj(connection, row, selArray));\n      }\n    }\n    return mutateObjs;\n  }\n\n  /** Helper function to create the mutate Object */\n  private createMutateObj(\n    connection: AssetConnType,\n    row: AdGroupRow,\n    selArray: SelectionModel<AdGroupRow>\n  ) {\n    // Check if its added or removed\n    let action = selArray.isSelected(row)\n      ? MutateAction.ADD\n      : MutateAction.REMOVE;\n\n    let assetObj = this.createAssetObj(connection);\n    let mutateObj: MutateRecord = {\n      account: this._account.id,\n      adgroup: row.id,\n      action: action,\n      asset: assetObj,\n    };\n\n    return mutateObj;\n  }\n\n  /** Helper function that creates the appropriate asset object */\n  private createAssetObj(connection: AssetConnType) {\n    let assetObj: MutateAsset = {\n      id: this._activeAsset.id,\n      type: <AssetType>this._activeAsset.type,\n    };\n    switch (this._activeAsset.type) {\n      case AssetType.TEXT:\n        assetObj.asset_text = (this._activeAsset as TextAsset).asset_text;\n        assetObj.text_type_to_assign = connection.toLowerCase();\n        break;\n      case AssetType.VIDEO:\n        assetObj.video_id = (this._activeAsset as VideoAsset).video_id;\n        break;\n    }\n    return assetObj;\n  }\n}\n","\n<h1 class=\"primary-color\">Asset Details\n  <button mat-icon-button class=\"close-button\" (click)=\"onClose()\">\n    <mat-icon class=\"close-icon\">close</mat-icon>\n  </button>\n</h1>\n<mat-divider></mat-divider>\n<div class=\"asset-details\">\n  <div class=\"asset-info\">\n    <app-asset [asset]=\"asset\"> </app-asset>\n    <p>\n      <span class=\"primary-color info-header\">{{ asset?.name }}</span>\n      <span [ngSwitch]=\"asset?.type\">\n        <span class=\"img-details\" *ngSwitchCase=\"assetType.IMG\">\n          <span>\n            Dimensions: {{ asset?.image_width }} x {{ asset?.image_height }}\n          </span>\n          <span>Size: {{ asset?.file_size }}</span>\n        </span>\n        <span class=\"video-details\" *ngSwitchCase=\"assetType.VIDEO\">\n          <!-- <span>Video id: {{ asset?.video_id }}</span> -->\n          <span>\n            <a href=\"{{ asset?.link }}\" target=\"_blank\">URL</a>\n          </span>\n        </span>\n      </span>\n      <span class=\"primary-color info-header\">Stats</span>\n      <span class=\"asset-stats\">\n        <span>Clicks: {{ asset?.stats?.clicks }}</span>\n        <span>Impressions: {{ asset?.stats?.impressions }}</span>\n        <span>Cost: {{ asset?.stats?.cost }}</span>\n        <span>All conversions: {{ asset?.stats?.all_conversions }}</span>\n      </span>\n    </p>\n  </div>\n  <app-account-struct\n    #accountAdGroups\n    [account]=\"account\"\n    [activeAsset]=\"asset\">\n  </app-account-struct>\n</div>\n<app-progress-btn\n  btnLabel='Update'\n  [btnUpdateMsg]=\"updateMessage\"\n  [isError]=\"isErrorMessage\"\n  [inProgress]=\"updateInProgress\"\n  (btnClick)=\"updateAsset()\">\n</app-progress-btn>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AssetService } from './../services/asset.service';\nimport { AccountAGs } from './../model/account';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { Subscription, Observable, from } from 'rxjs';\nimport { MatSidenav } from '@angular/material/sidenav';\nimport { ConfigService } from '../services/config.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AppSetupComponent } from '../app-setup/app-setup.component';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { AssetDetailsComponent } from '../asset-details/asset-details.component';\nimport { ReloadAppService } from '../services/reload-app.service';\nimport { AuthorizationService } from '../services/authorization.service';\n\n@Component({\n  selector: 'app-asset-gallery',\n  templateUrl: './asset-gallery.component.html',\n  styleUrls: ['./asset-gallery.component.css'],\n})\nexport class AssetGalleryComponent implements OnInit {\n  private _subscriptions: Subscription[] = [];\n\n  account: AccountAGs;\n  openSideNav: boolean = false;\n  showAssetGrid: boolean = false;\n\n  @ViewChild('sideNav') sideNav: MatSidenav;\n  @ViewChild('assetDetails') assetDetails: AssetDetailsComponent;\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n  constructor(\n    private _dataService: AssetService,\n    private _configService: ConfigService,\n    private _authorizationService: AuthorizationService,\n    private _reloadAppService: ReloadAppService,\n    private _setupDialog: MatDialog,\n    private _snackBar: MatSnackBar\n  ) {}\n\n  getConfigService(): ConfigService {\n    return this._configService;\n  }\n\n  ngOnInit(): void {\n    this._configService.loadConfigSettings();\n    this._configService.loadYtConfigSettings();\n    this._configService.configLoaded$.subscribe((loaded) => {\n      let config = this._configService.getConfigSettings();\n      if (!loaded && config) {\n        const configDialogRef = this._setupDialog.open(AppSetupComponent, {\n          disableClose: true,\n          data: config,\n        });\n\n        configDialogRef.afterClosed().subscribe((success) => {\n          if (success) {\n            this.loadMccStruct();\n          }\n        });\n      }\n    });\n\n    this._subscriptions.push(\n      this._authorizationService.loggedIn$.subscribe((loggedIn) => {\n        if (loggedIn) {\n          this.showAssetGrid = true;\n        } else {\n          this.showAssetGrid = false;\n        }\n      })\n    )\n\n    this._subscriptions.push(\n      this._dataService.accountAGs$.subscribe((account) => {\n        this.account = account;\n        this.sideNav?.close();\n      })\n    );\n\n    this._subscriptions.push(\n      this._reloadAppService.reloadMcc.subscribe(() => {\n        this.loadMccStruct(true);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    for (let sub of this._subscriptions) {\n      sub.unsubscribe();\n    }\n  }\n\n  /** Binder functions to enable calling from child */\n  get openAssetDetailsFunc() {\n    return this.openAssetDetails.bind(this);\n  }\n\n  get closeAssetDetailsFunc() {\n    return this.closeAssetDetails.bind(this);\n  }\n\n  loadMccStruct(loadAccounts: boolean = false) {\n    this.openSnackBar();\n    let subscription = this._dataService.loadMccStruct().subscribe(\n      () => {\n        this._configService.configValid = true;\n        if (loadAccounts) this._reloadAppService.reloadAccountIds.next(true);\n        this.dismissSnackBar();\n        subscription.unsubscribe();\n      },\n      (error) => {\n        this.dismissSnackBar();\n        if (error.status != 403) this.openSnackBarStructFail();\n        subscription.unsubscribe();\n      }\n    );\n  }\n\n  /** Functions that may need to be called from a child component */\n  openAssetDetails() {\n    this.openSideNav = true;\n    if (!this.sideNav.opened) {\n      this.assetDetails.loadAdGroups();\n      this.sideNav.open();\n    }\n  }\n\n  closeAssetDetails() {\n    this.sideNav.close();\n    this._dataService.unselectAsset();\n  }\n\n  private openSnackBar() {\n    this._snackBar.open(\n      'Loading AssetMG. This may take a few mintues... ',\n      '',\n      {\n        duration: undefined,\n        horizontalPosition: 'center',\n        verticalPosition: 'bottom',\n      }\n    );\n  }\n\n  private openSnackBarStructFail() {\n    this._snackBar.open('Failed Loading AssetMG', '', {\n      duration: undefined,\n      horizontalPosition: 'center',\n      verticalPosition: 'bottom',\n    });\n  }\n\n  private dismissSnackBar() {\n    this._snackBar.dismiss();\n  }\n}\n","<!-- <div class =\"main-container\"> -->\n  <app-toolbar class=\"toolbar\" [loadAccounts]=\"this.getConfigService().configValid\"></app-toolbar>\n  <app-loader></app-loader>\n  <mat-sidenav-container *ngIf=\"this.getConfigService().configValid\">\n    <mat-sidenav #sideNav\n      class=\"asset-details-container mat-elevation-z8\"\n      position=\"end\"\n      mode=\"over\"\n      closed>\n      <app-asset-details #assetDetails\n        [account]=\"account\"\n        [closeAssetDetails]=\"closeAssetDetailsFunc\">\n      </app-asset-details>\n    </mat-sidenav>\n    <mat-sidenav-content>\n      <ng-template [ngIf]=\"showAssetGrid\">\n        <app-asset-grid \n          [account]=\"account\"\n          [openAssetDetails]=\"openAssetDetailsFunc\"\n          [closeAssetDetails]=\"closeAssetDetailsFunc\"\n          [hidden]>\n        </app-asset-grid>\n      </ng-template>\n\n      <ng-template [ngIf]=\"!showAssetGrid\">\n        <div class=\"pad-div\">\n          <mat-card>Please login to view assets.</mat-card>\n        </div>\n      </ng-template>\n    </mat-sidenav-content>\n  </mat-sidenav-container>\n","import {\n  Component,\n  OnInit,\n  ViewChild,\n  EventEmitter,\n  Output,\n  Input,\n  HostListener,\n} from '@angular/core';\nimport { AssetType, Asset, TextAsset } from '../model/asset';\nimport { Subscription, Observable } from 'rxjs';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { AssetService } from '../services/asset.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { UploadAssetsComponent } from '../upload-assets/upload-assets.component';\n\nconst ASSET_TYPES = [\n  {\n    label: 'All Assets',\n    value: AssetType.ALL,\n  },\n  {\n    label: 'Image',\n    value: AssetType.IMG,\n  },\n  {\n    label: 'Text',\n    value: AssetType.TEXT,\n  },\n  {\n    label: 'Video',\n    value: AssetType.VIDEO,\n  },\n  {\n    label: 'HTML',\n    value: AssetType.HTML,\n  },\n];\n\n@Component({\n  selector: 'app-asset-grid',\n  templateUrl: './asset-grid.component.html',\n  styleUrls: ['./asset-grid.component.css'],\n})\nexport class AssetGridComponent implements OnInit {\n  private _subscriptions: Subscription[] = [];\n\n  activeAssetId: number;\n  assets: Asset[];\n  filteredAssets: Asset[];\n\n  filterOptions = ASSET_TYPES;\n  filterStr: string = '';\n  filterType: AssetType = AssetType.ALL;\n\n  @Input() account: Account;\n  @Input() openAssetDetails: Function;\n  @Input() closeAssetDetails: Function;\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n  assetsPerPage$: Observable<any>;\n  dataSource: MatTableDataSource<Asset> = new MatTableDataSource<Asset>(\n    this.filteredAssets\n  );\n\n  constructor(\n    private _dataService: AssetService,\n    private _uploadDialog: MatDialog\n  ) {}\n\n  ngOnInit(): void {\n    this.assetsPerPage$ = this.dataSource.connect();\n\n    this._subscriptions.push(\n      this._dataService.allAssets$.subscribe((assets) => {\n        this.assets = assets;\n        this.filteredAssets = assets;\n        if (this.filteredAssets && this.assets) {\n          this.dataSource.data = this.filteredAssets;\n          this.dataSource.paginator = this.paginator;\n        }\n      })\n    );\n  }\n  ngOnDestroy() {\n    for (let sub of this._subscriptions) {\n      sub.unsubscribe();\n    }\n    if (this.dataSource) {\n      this.dataSource.disconnect();\n    }\n  }\n\n  uploadAsset() {\n    // Make sure to unselect any assets to avoid loading the campaign selection\n    // of any previously selected assets\n    this.unselectAsset();\n\n    const uploadDialogRef = this._uploadDialog.open(UploadAssetsComponent, {\n      disableClose: true,\n      data: this.account,\n    });\n\n    uploadDialogRef.afterClosed().subscribe((response) => {\n      if (response?.successful) {\n        this.paginator.lastPage();\n      }\n    });\n  }\n\n  selectAsset(id) {\n    this.activeAssetId = id;\n    this.openAssetDetails(id);\n  }\n\n  unselectAsset() {\n    this.activeAssetId = null;\n    this.closeAssetDetails();\n  }\n\n  /** Close side nav when escape is pressed */\n  @HostListener('document:keydown.escape', ['$event']) onKeydownHandler(\n    event: KeyboardEvent\n  ) {\n    this.unselectAsset();\n  }\n\n  filterByStr(searchStr) {\n    this.filterStr = searchStr;\n    this.filteredAssets = this.applyFilter();\n    this.dataSource.data = this.filteredAssets;\n  }\n\n  filterByType(filterAssetType) {\n    this.filterType = <AssetType>filterAssetType;\n    this.filteredAssets = this.applyFilter();\n    this.dataSource.data = this.filteredAssets;\n  }\n\n  /** Resturns assets with the search string their name or\n   * in their text (for text assets) */\n  private applyFilter(): Asset[] {\n    // Nothing to filter - return full set of assets\n    if (!this.filterStr.length && this.filterType == AssetType.ALL) {\n      return this.assets;\n    }\n\n    // Filter by name and/or type\n    let searchStr = this.filterStr.toLocaleLowerCase();\n    return this.assets.filter(\n      (asset: Asset) =>\n        // Filter assets by string\n        (!searchStr.length ||\n          asset.name.toLocaleLowerCase().indexOf(searchStr) != -1 ||\n          (asset.type === AssetType.TEXT &&\n            (asset as TextAsset).asset_text\n              .toLocaleLowerCase()\n              .indexOf(searchStr) != -1)) &&\n        // filter assets by type\n        (this.filterType === AssetType.ALL || asset.type === this.filterType)\n    );\n  }\n}\n","<app-search-bar *ngIf=\"filteredAssets\"\n  searchPlaceholderTxt=\"Search your assets\"\n  [filterOptions]=\"filterOptions\"\n  (searchCriteria)=\"filterByStr($event)\"\n  (filterCriteria)=\"filterByType($event)\">\n</app-search-bar>\n<div class = \"grid-layout\">\n  <div *ngIf=\"filteredAssets\" class=\"placeholder-card\">\n    <button mat-mini-fab color=\"accent\"\n      aria-label=\"Add Asset\"\n      (click)=\"uploadAsset()\">\n      <mat-icon>add</mat-icon>\n    </button>\n    <p>Add Assets</p>\n  </div>\n  <app-asset\n    *ngFor=\"let asset of assetsPerPage$ | async\"\n    [asset] = \"asset\"\n    [selectedAssetId] = \"activeAssetId\"\n    (click)=\"selectAsset(asset.id)\"\n    >\n  </app-asset>\n</div>\n<mat-paginator\n  [pageSizeOptions]=\"[25, 50, 100]\"\n  [showFirstLastButtons]=true></mat-paginator>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Component,\n  Input,\n  OnInit,\n  SimpleChange,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { Asset, AssetType, ImgAsset, VideoAsset } from './../model/asset';\nimport { AssetService } from './../services/asset.service';\nimport { PreviewComponent } from '../preview/preview.component';\n\n@Component({\n  selector: 'app-asset',\n  templateUrl: './asset.component.html',\n  styleUrls: ['./asset.component.css'],\n})\nexport class AssetComponent implements OnInit {\n  assetType = AssetType;\n  private _asset: Asset;\n  @Input()\n  set asset(asset: any) {\n    this._asset = asset;\n  }\n  get asset(): any {\n    return this._asset;\n  }\n\n  @Input()\n  selectedAssetId: number;\n\n  constructor(\n    private router: Router,\n    private dataService: AssetService,\n    private _previewDialog: MatDialog,\n    private _cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {}\n\n  openDetails() {\n    this.dataService.changeAsset(this.asset);\n  }\n\n  openPreview() {\n    let url = '';\n    if (this._asset.type === AssetType.IMG) {\n      url = (this._asset as ImgAsset).image_url;\n    } else if (this._asset.type === AssetType.VIDEO) {\n      let full_url = (this._asset as VideoAsset).link.split('=');\n      url = full_url[full_url.length - 1];\n    }\n    this._previewDialog.open(PreviewComponent, {\n      data: {\n        type: this.asset.type,\n        url: url,\n      },\n    });\n  }\n}\n","<div class=\"asset-card\" [ngSwitch]=\"asset?.type\">\n  <mat-card *ngSwitchCase=\"assetType.IMG\"\n            [ngClass]=\"{'accent-border': selectedAssetId === asset.id }\"\n            (click)=\"openDetails()\">\n    <mat-card-subtitle><i class=\"far fa-image\"></i> {{asset.name}} </mat-card-subtitle>\n    <mat-card-content>\n      <img mat-card-image [src]= 'asset.image_url' alt=\"\">\n      <button mat-icon-button (click)=\"openPreview()\">\n        <mat-icon>pageview</mat-icon>\n    </button>\n    </mat-card-content>\n  </mat-card>\n  <mat-card *ngSwitchCase=\"assetType.VIDEO\"\n            [ngClass]=\"{'accent-border': selectedAssetId === asset.id }\"\n            (click)=\"openDetails()\">\n    <mat-card-subtitle><i class=\"fab fa-youtube\"></i> {{asset.name}} </mat-card-subtitle>\n    <mat-card-content>\n      <img mat-card-image [src]= 'asset.image_url' alt=\"\">\n      <button mat-icon-button (click)=\"openPreview()\">\n        <mat-icon>pageview</mat-icon>\n      </button>\n    </mat-card-content>\n  </mat-card>\n  <mat-card *ngSwitchCase=\"assetType.TEXT\"\n            [ngClass]=\"{'accent-border': selectedAssetId === asset.id }\"\n            (click)=\"openDetails()\">\n    <mat-card-subtitle><i class=\"fas fa-font\"></i> Text </mat-card-subtitle>\n    <mat-card-content>\n        <p [ngClass]=\"{'fit-more-text': asset.asset_text.length >= 60 }\">\n          {{asset.asset_text}}\n        </p>\n    </mat-card-content>\n  </mat-card>\n  <mat-card *ngSwitchCase=\"assetType.HTML\"\n            [ngClass]=\"{'accent-border': selectedAssetId === asset.id }\"\n            (click)=\"openDetails()\">\n    <mat-card-subtitle><i class=\"fab fa-html5\"></i> {{asset.name}} </mat-card-subtitle>\n    <mat-card-content>\n      <img mat-card-image src= \"./../../assets/html5_logo.png\" alt=\"\">\n    </mat-card-content>\n  </mat-card>\n</div>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nexport interface DialogData {\n  errorMessage: string;\n}\n\n@Component({\n  selector: 'error-dialog',\n  templateUrl: 'error-dialog.component.html',\n  styleUrls: ['./error-dialog.component.css'],\n})\nexport class ErrorDialogComponent {\n  updateMessage: string;\n  isErrorMessage: boolean;\n  updateInProgress: boolean;\n\n  constructor(\n    public dialogRef: MatDialogRef<ErrorDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData\n  ) {}\n\n  reloadApp() {\n    this.updateInProgress = true;\n    this.dialogRef.close({ success: true });\n  }\n}\n","<h2 mat-dialog-title>Error</h2>\n<p class=\"error-message\"[innerHtml] = \"data.errorMessage | styleErrorMsg\"></p>\n<app-progress-btn\n  btnLabel='Retry'\n  [btnUpdateMsg]=\"updateMessage\"\n  [isError]=\"isErrorMessage\"\n  [inProgress]=\"updateInProgress\"\n  (btnClick)=\"reloadApp()\">\n</app-progress-btn>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  HttpEvent,\n  HttpInterceptor,\n  HttpHandler,\n  HttpRequest,\n  HttpErrorResponse,\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport { ErrorDialogComponent } from '../error-dialog/error-dialog.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ReloadAppService } from '../services/reload-app.service';\n\n@Injectable()\nexport class HttpErrorInterceptor implements HttpInterceptor {\n  constructor(\n    public dialog: MatDialog,\n    private reloadAppService: ReloadAppService\n  ) {}\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error.error instanceof ErrorEvent) {\n          // client-side error\n          let errorMessage = `Client Side Error: ${error.error.message}`;\n          return throwError(errorMessage);\n        }\n        if (error.status === 403) {\n          this.openErrorDialog(error.error);\n        }\n        // server-side error\n        return throwError(error);\n      })\n    );\n  }\n\n  openErrorDialog(errorMessage) {\n    const dialogRef = this.dialog.open(ErrorDialogComponent, {\n      width: '700px',\n      disableClose: true,\n      autoFocus: false,\n      data: { errorMessage: errorMessage },\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result.success) {\n        this.reloadAppService.reloadMcc.next(true);\n      }\n    });\n  }\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport { LoaderService } from '../services/loader.service';\n@Injectable()\nexport class LoaderInterceptor implements HttpInterceptor {\n  private totalRequests = 0;\n\n  constructor(public loaderService: LoaderService) {}\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    this.totalRequests++;\n    this.loaderService.show();\n    \n    return next.handle(req).pipe(\n      finalize(() => {\n        this.totalRequests--;\n        if (this.totalRequests === 0) {\n          this.loaderService.hide();\n        }\n      })\n    );\n  }\n}\n","import {\n  Component,\n  OnInit,\n  EventEmitter,\n  Output,\n  HostListener,\n  Input,\n} from '@angular/core';\nimport { from, Subscription } from 'rxjs';\nimport { AuthorizationService } from '../services/authorization.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  @Input() btnLabel = \"\";\n  private _subscriptions: Subscription[] = [];\n\n  constructor(private _authService: AuthorizationService) {}\n  \n  ngOnInit(): void {\n    this._subscriptions.push(\n      this._authService.loggedIn$.subscribe((loggedIn) => {\n        this.setLabel(loggedIn);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    for (let sub of this._subscriptions) {\n      sub.unsubscribe();\n    }\n  }\n\n  @Output() btnClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  @HostListener('click', ['$event'])\n  public onClick(event: MouseEvent) {\n    this.btnClick.emit(event);\n  }\n\n  public setLabel(loggedIn) {\n    if (loggedIn) {\n      this.btnLabel = \"Logout\";\n    } else {\n      this.btnLabel = \"Login\";\n    }\n  }\n\n  public loginOrOut() {\n    this._authService.loginOrOut();\n  }\n}\n","<button\nmat-flat-button\ncolor=\"primary\"\n(click)=\"loginOrOut()\"\n>\n{{btnLabel}}\n</button>","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Different kinds of assets as returned from API */\nexport enum AssetType {\n  TEXT = 'TEXT',\n  TEXT_HEADLINE = 'headlines',\n  TEXT_DESC = 'descriptions',\n  IMG = 'IMAGE',\n  VIDEO = 'YOUTUBE_VIDEO',\n  HTML = 'MEDIA_BUNDLE',\n  ALL = 'ALL', // Mainly used for filtering\n}\n\n/** Different kind of adgroups connections to assets */\nexport enum AssetConnType {\n  ADGROUP = 'AdGroup',\n  HEADLINE = 'Headlines',\n  DESC = 'Descriptions',\n}\n\nexport enum MutateAction {\n  ADD = 'ADD',\n  REMOVE = 'REMOVE',\n}\n\nexport type AssetAdGroups = Map<AssetConnType, AssetAdGroup[]>;\n\ninterface AssetAdGroup {\n  id: number;\n  performance: string;\n  performance_type: string;\n}\n\ninterface AssetStats {\n  clicks: number;\n  all_conversions: number;\n  impressions: number;\n  cost: number;\n}\n\ninterface AssetBase {\n  id: number;\n  type: string;\n  name?: string;\n  adgroups?: AssetAdGroup[];\n  stats?: AssetStats;\n  performance?: string;\n}\n\nexport interface ImgAsset extends AssetBase {\n  image_url: string;\n  file_size?: number;\n  image_height?: number;\n  image_width?: number;\n}\n\nexport interface TextAsset extends AssetBase {\n  asset_text: string;\n  text_type?: string;\n}\n\nexport interface VideoAsset extends AssetBase {\n  image_url: string;\n  video_id: string;\n  link: string;\n}\n\nexport interface HtmlAsset extends AssetBase {}\nexport type Asset = ImgAsset | TextAsset | VideoAsset | HtmlAsset;\nexport interface MutateAsset {\n  id: number;\n  type: AssetType;\n  asset_text?: string; // for TEXT\n  text_type_to_assign?: string; // for TEXT - headlines or description\n  video_id?: string; // for VIDEO\n}\n\nexport interface MutateRecord {\n  account: number;\n  adgroup: number;\n  action: MutateAction;\n  asset: MutateAsset;\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Asset } from './asset';\n\nexport enum STATUS {\n  SUCCESS = 200,\n  PARTIAL_SUCCESS = 206,\n  FAIL = 500,\n}\n\n/** Interface for the API response */\nexport interface UpdateResponse {\n  status_code: STATUS;\n  msg: string;\n  assets: Asset[];\n}\n\nexport interface UploadResponse {\n  //  status_code: STATUS;\n  asset?: Asset;\n  successfull?: number[];\n  unsuccessfull?: number[];\n  msg?: string;\n}\n\nexport interface ValidationResponse{\n  valid: boolean\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { inject } from '@angular/core/testing';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Asset, AssetType, ImgAsset, VideoAsset } from './../model/asset';\n\n@Component({\n  selector: 'app-preview',\n  templateUrl: './preview.component.html',\n  styleUrls: ['./preview.component.css']\n})\nexport class PreviewComponent implements OnInit {\n  assetType = AssetType;\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) { }\n\n  ngOnInit() {\n    const tag = document.createElement('script');\n    tag.src = 'https://www.youtube.com/iframe_api';\n    document.body.appendChild(tag);\n  }\n\n}\n","<div [ngSwitch]=\"data.type\">\n<div *ngSwitchCase=\"assetType.IMG\">\n    <img [src]=\"data.url\">\n</div>\n<div *ngSwitchCase=\"assetType.VIDEO\">\n    <youtube-player [videoId]=\"data.url\"></youtube-player>\n</div>\n</div>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, OnInit, EventEmitter, Input, Output } from '@angular/core';\nimport { AssetType } from '../model/asset';\n\n@Component({\n  selector: 'app-search-bar',\n  templateUrl: './search-bar.component.html',\n  styleUrls: ['./search-bar.component.css'],\n})\nexport class SearchBarComponent implements OnInit {\n  searchPlaceholder: string = '';\n  searchStr: string = '';\n  filterStr: string = <string>AssetType.ALL;\n\n  @Input() searchPlaceholderTxt;\n  @Input() filterOptions;\n  @Output()\n  searchCriteria = new EventEmitter<String>();\n  @Output() filterCriteria = new EventEmitter<String>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.searchPlaceholder = this.searchPlaceholderTxt;\n  }\n\n  checkPlaceHolder() {\n    if (this.searchPlaceholder) {\n      this.searchPlaceholder = null;\n      return;\n    } else {\n      this.searchPlaceholder = this.searchPlaceholderTxt;\n      return;\n    }\n  }\n\n  searchThis() {\n    this.searchCriteria.emit(this.searchStr);\n  }\n\n  applyFilter() {\n    this.filterCriteria.emit(this.filterStr);\n  }\n}\n","<mat-form-field id= \"searchField\" floatLabel=never appearance=\"legacy\">\n  <input matInput\n    type=\"text\"\n    autocomplete=\"off\"\n    [(ngModel)]=\"searchStr\"\n    (input)=\"searchThis()\"\n    (focus)=\"checkPlaceHolder()\"\n    (blur)=\"checkPlaceHolder()\">\n    <mat-placeholder class=\"placeholder\">{{searchPlaceholder}}</mat-placeholder>\n    <span matPrefix><i class=\"fas fa-search\"></i>&nbsp;</span>\n</mat-form-field>\n<mat-form-field id=\"filterBtn\">\n   <mat-select matNativeControl\n    [(ngModel)]=\"filterStr\"\n    (selectionChange)=\"applyFilter()\">\n    <mat-option *ngFor=\"let option of filterOptions\" [value]=\"option.value\">\n      {{option.label}}\n    </mat-option>\n  </mat-select>\n  <!-- <span matPrefix><i class=\"fas fa-filter\"></i>&nbsp;</span> -->\n</mat-form-field>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/operator/catch';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport {\n  Asset,\n  TextAsset,\n  AssetAdGroups,\n  AssetConnType,\n  AssetType,\n  MutateRecord,\n} from './../model/asset';\nimport { UpdateResponse, STATUS } from '../model/response';\nimport { Account, AccountAGs } from './../model/account';\nimport { AuthorizationService } from '../services/authorization.service'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AssetService {\n  private API_SERVER = location.origin;\n\n  /** Gets updated when the account changes */\n  private _activeAccountId$ = new BehaviorSubject<number>(null);\n  private _activeAccount$ = new BehaviorSubject<Account>(null);\n  private _accountAGs$ = new BehaviorSubject<AccountAGs>(null);\n  private _allAssets$ = new BehaviorSubject<Asset[]>(null);\n  private _assetsToAdGroups: Asset[] = [];\n\n  /** Gets updated when an asset is selected */\n  private _activeAsset$ = new BehaviorSubject<Asset>(null);\n  private _activeAssetAdGroups$ = new BehaviorSubject<AssetAdGroups>(null);\n\n  /** Gets updated when the update Asset is called */\n  private _updateFinished$ = new BehaviorSubject<UpdateResponse>(null);\n\n  allAssets$ = this._allAssets$.asObservable();\n  activeAccount$ = this._activeAccount$.asObservable();\n  activeAccountId$ = this._activeAccountId$.asObservable();\n  accountAGs$ = this._accountAGs$.asObservable();\n  activeAsset$ = this._activeAsset$.asObservable();\n  activeAssetAdGroups$ = this._activeAssetAdGroups$.asObservable();\n  updateFinished$ = this._updateFinished$.asObservable();\n\n  constructor(\n    private _http: HttpClient,\n    private _authService: AuthorizationService\n    ) {}\n\n  private getAllAssets(accountId: number) {\n    // Reset the asset observable till the http request is made\n    this._allAssets$.next(null);\n    // Call the API and update the asset observable\n    const endpoint = this.API_SERVER + '/accounts-assets/';\n    //let params = new HttpParams().set('cid', accountId?.toString());\n    let subscription = this._http\n      .get<Asset[]>(endpoint, { params: { cid: accountId?.toString() } })\n      .subscribe((assets) => {\n        this._allAssets$.next(assets);\n        subscription.unsubscribe();\n      });\n  }\n\n  private getAccountHierarchy(accountId: number) {\n    const endpoint = this.API_SERVER + '/structure/';\n    //let params = new HttpParams().set('cid', accountId?.toString());\n    let subscription = this._http\n      .get<Account>(endpoint, { params: { cid: accountId?.toString() } })\n      .subscribe((account) => {\n        this._activeAccount$.next(account);\n        subscription.unsubscribe();\n      });\n  }\n\n  private getAccountAdGroups(accountId: number) {\n    const endpoint = this.API_SERVER + '/account-ag-struct';\n    let subscription = this._http\n      .get<AccountAGs>(endpoint, { params: { cid: accountId?.toString() } })\n      .subscribe((accountAGs) => {\n        this._accountAGs$.next(accountAGs);\n        subscription.unsubscribe();\n      });\n  }\n\n  /** Loads all the asset to adgroups mapping */\n  private getAssetsToAdGroups() {\n    const endpoint = this.API_SERVER + '/assets-to-ag/';\n    let subscription = this._http.get<Asset[]>(endpoint).subscribe((assets) => {\n      this._assetsToAdGroups = assets;\n      subscription.unsubscribe();\n    });\n  }\n\n  getAccountIds(): Observable<Account[]> {\n    const endpoint = this.API_SERVER + '/accounts/';\n    return this._http.get<Account[]>(endpoint);\n  }\n\n  loadMccStruct(): Observable<any> {\n    const endpoint = this.API_SERVER + '/create-struct/';\n    return this._http.get(endpoint);\n  }\n\n  changeAsset(asset: Asset) {\n    this._activeAsset$.next(asset);\n    if (asset) {\n      this._activeAssetAdGroups$.next(this.getActiveAssetAdGroups(asset.id));\n    } else {\n      this._activeAssetAdGroups$.next(null);\n    }\n  }\n\n  unselectAsset() {\n    this.changeAsset(null);\n  }\n\n  changeAccount(accountId: number) {\n    this._activeAccountId$.next(accountId);\n    this.getAllAssets(accountId);\n    //this.getAccountHierarchy(accountId);\n    this.getAccountAdGroups(accountId);\n    this.getAssetsToAdGroups();\n    this.changeAsset(null);\n  }\n\n  getActiveAssetAdGroups(assetId: number) {\n    let assetAdGroups: AssetAdGroups = new Map();\n    this._assetsToAdGroups.filter(function (asset) {\n      if (asset.id == assetId) {\n        let AssetConnection = AssetConnType.ADGROUP;\n        if (asset.type == AssetType.TEXT) {\n          (asset as TextAsset).text_type.toLowerCase() ==\n          AssetConnType.HEADLINE.toLowerCase()\n            ? (AssetConnection = AssetConnType.HEADLINE)\n            : (AssetConnection = AssetConnType.DESC);\n        }\n        assetAdGroups.set(AssetConnection, asset.adgroups);\n      }\n    });\n    return assetAdGroups;\n  }\n\n  updateAsset(changedAsset: Asset, updateArray: MutateRecord[]) {\n    const endpoint = this.API_SERVER + '/mutate-ad/';\n    var refresh_token = this._authService.getRefreshToken()\n    var load = {'refresh_token':refresh_token, 'data':updateArray}\n    let subscription = this._http\n      .post(endpoint, load, { observe: 'response' })\n      .subscribe(\n        (response) => {\n          // update the asset to adgroup cache\n          let updatedAssets: Asset[] = [];\n          for (let update of <any[]>response.body) {\n            updatedAssets.push(update.asset);\n            if (update.index) {\n              // This is a non-text asset\n              this._assetsToAdGroups[update.index] = update.asset;\n            } else if (update.asset?.length) {\n              // Text asset, so index can be {found in the assets array (headlines and descriptions)\n              for (let txt_asset of update.asset) {\n                if (txt_asset.index) {\n                  this._assetsToAdGroups[txt_asset.index] = txt_asset.asset;\n                } else {\n                  this._assetsToAdGroups.push(txt_asset.asset);\n                }\n              }\n            } else {\n              this._assetsToAdGroups.push(update.asset);\n            }\n          }\n          // Update the new selection\n          this._activeAssetAdGroups$.next(\n            this.getActiveAssetAdGroups(changedAsset.id)\n          );\n          // Updated the caller that the API is done\n          let msg = '';\n          if (response.status === STATUS.PARTIAL_SUCCESS) {\n            let failures =\n              (<any[]>response.body)[0].failures ||\n              (<any>response.body).failures;\n            if (failures) {\n              for (let failure of failures) {\n                msg += `Update failed for the ad group \"${failure.adgroup.adgroup_name}\" of campaign \"${failure.adgroup.campaign_name}\":\n                    ${failure.error_message}<br/>`;\n              }\n            } else {\n              msg = 'Update failed for some ad groups.';\n            }\n          }\n          this._updateFinished$.next({\n            status_code: response.status,\n            msg: msg,\n            assets: updatedAssets,\n          });\n          subscription.unsubscribe();\n        },\n        (error) => {\n          // API call failed - Returned status 500\n          let errorMessage = '';\n          let failures = error.error[0]?.failures || error.error?.failures;\n          if (failures) {\n            for (let failure of failures) {\n              errorMessage += `Update failed for the ad group \"${failure.adgroup.adgroup_name}\" from campaign \"${failure.adgroup.campaign_name}\": \n              ${failure.error_message}<br/>`;\n            }\n          } else {\n            errorMessage = `Error Code: ${error.status}<br/>Message: ${error.message}`;\n          }\n\n          this._updateFinished$.next({\n            status_code: STATUS.FAIL,\n            msg: errorMessage,\n            assets: [],\n          });\n          subscription.unsubscribe();\n        }\n      );\n  }\n\n  addNewAsset(asset: Asset) {\n    // Update all assets with the newly uploaded asset\n    if (asset) {\n      console.log('Asset: ', asset);\n      let waitTime = 0;\n      if (asset.type == AssetType.IMG) {\n        waitTime = 12000;\n      }\n      this._assetsToAdGroups.push(asset);\n      // This is a workaround to overcome the server not detecting the image\n      // type and loading it - so we give it some time.\n      setTimeout(() => {\n        this._allAssets$.next(this._allAssets$.getValue().concat(asset));\n      }, waitTime);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { ConfigService } from './config.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthorizationService {\n\n  authInstance = null;\n  refreshToken = null;\n  loggedIn$: Observable<boolean>;\n  private loggedInSubject: BehaviorSubject<boolean>;\n\n  constructor(private _configService: ConfigService) {\n    this.retrieveStoredRefreshToken().then((token) => {\n      if (token) {\n        this.refreshToken = token;\n        this.loggedInSubject = new BehaviorSubject<boolean>(true);\n      } else {\n        this.loggedInSubject = new BehaviorSubject<boolean>(false);\n      }\n      this.loggedIn$ = this.loggedInSubject.asObservable();\n    });\n  }\n\n  async initGoogleAuth(): Promise<void> {\n    //  Create a new Promise where the resolve \n    // function is the callback passed to gapi.load\n    const pload = new Promise((resolve) => {\n      gapi.load('auth2', resolve);\n      console.log(\"GAPI LOADED\");\n    });\n\n    // When the first promise resolves, it means we have gapi\n    // loaded and that we can call gapi.init\n    return pload.then(async () => {\n      var config = this._configService.getConfigSettings();\n\n      await gapi.auth2\n        .init({\n          client_id: config.client_id,\n          scope: \"https://www.googleapis.com/auth/adwords\"\n        })\n        .then(auth => {\n          this.authInstance = auth;\n        });\n    });\n  }\n\n  async authenticate(force=false) {\n    var error = \"\";\n    var storedToken = await this.retrieveStoredRefreshToken();\n    if (!force && storedToken) {\n      this.refreshToken = storedToken;\n      this.loggedInSubject.next(true);\n    } else {\n      // Initialize gapi if not done yet\n      if (!this.authInstance) {\n        await this.initGoogleAuth();\n      }\n\n      // Get the refresh access token\n      var refreshAccessToken = await this.authInstance.grantOfflineAccess({\n        access_type: \"offline\",\n        prompt: \"consent\",\n        scope: \"https://www.googleapis.com/auth/adwords\"\n      })\n      .then((res) => {\n        var refreshAccessToken = res.code;\n        return refreshAccessToken;\n      })\n      .catch((err) => {\n        error = err[\"error\"];\n      });\n\n      // Quick exit\n      if (error) throw new Error(error);\n\n      await this._configService\n            .getConfigRefreshCode(refreshAccessToken)\n            .toPromise()\n            .then((response) => {\n              this.refreshToken = response.body;\n              this.loggedInSubject.next(true);\n              this.storeRefreshToken(this.refreshToken);\n            })\n            .catch((err) => {\n              error = err[\"error\"];\n            });\n    }\n\n    if (error) {\n      throw new Error(error);\n    }\n  }\n\n  private async storeRefreshToken(token: string) {\n    window.localStorage.setItem('refreshToken', token);\n  }\n\n  private async retrieveStoredRefreshToken() {\n    return window.localStorage.getItem('refreshToken');\n  }\n\n  private async removeStoredRefreshToken() {\n    window.localStorage.removeItem('refreshToken');\n  }\n\n  public getRefreshToken() {\n    if (!this.refreshToken) {\n      throw new Error(\"No refresh token found. Please login.\");\n    }\n    return this.refreshToken;\n  }\n\n  public async login() {\n    await this.authenticate();\n  }\n\n  public async logout() {\n    this.refreshToken = null;\n    this.loggedInSubject.next(false);\n    await this.removeStoredRefreshToken();\n  }\n\n  public loginOrOut() {\n    if (this.loggedInSubject.value) {\n      this.logout()\n    } else {\n      this.login();\n    }\n  }\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ConfigSettings, YouTubeSettings } from '../model/settings';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConfigService {\n  private API_SERVER = location.origin;\n\n  /** A cache of the configuration settings */\n  private _configSettings: ConfigSettings = null;\n  private _YtConfigSettings: YouTubeSettings = null;\n  private _configLoaded$ = new BehaviorSubject<boolean>(false);\n\n  /** Reflect the state of the config file */\n  configValid: boolean = false;\n  configLoaded$ = this._configLoaded$.asObservable();\n\n  constructor(private http: HttpClient) {}\n\n  loadConfigSettings() {\n    const endpoint = this.API_SERVER + '/config/';\n    let subscription = this.http\n      .get<ConfigSettings>(endpoint)\n      .subscribe((config) => {\n        this._configSettings = config;\n        this.configValid = config.config_valid;\n        this._configLoaded$.next(this.configValid);\n        subscription.unsubscribe();\n      });\n  }\n\n  getConfigSettings() {\n    return this._configSettings;\n  }\n\n  updateConfigCache(config: ConfigSettings) {\n    this._configSettings = config;\n  }\n\n  loadYtConfigSettings(){\n    const endpoint = this.API_SERVER + '/yt-config/'\n    let subscritpion = this.http\n    .get<YouTubeSettings>(endpoint)\n    .subscribe((config) => {\n      this._YtConfigSettings = config \n      subscritpion.unsubscribe();\n    });\n  }\n\n  getYtConfigSettings(){\n    return this._YtConfigSettings;\n  }\n\n  updateYtConfigSettings(config: YouTubeSettings){\n    this._YtConfigSettings = config;\n  }\n\n  setConfigCredentials(\n    mcc: number,\n    clientId: string,\n    clientSecret: string,\n    dev_token: string,\n    redirect_uri?: string,\n  ): Observable<any> {\n    const endpoint = this.API_SERVER + '/set-configs/';\n    let configObj: ConfigSettings = {\n      client_customer_id: mcc,\n      client_id: clientId,\n      client_secret: clientSecret,\n      developer_token: dev_token,\n      redirect_uri: redirect_uri,\n    };\n    return this.http.post(endpoint, configObj, { observe: 'response' });\n  }\n\n  getConfigRefreshCode(refreshCode: string): Observable<any> {\n    const endpoint = this.API_SERVER + '/get-refresh-token/';\n    return this.http.post(\n      endpoint,\n      { code: refreshCode },\n      { observe: 'response' }\n    )\n  }\n\n  setConfigRefreshCode(refreshCode: string): Observable<any> {\n    const endpoint = this.API_SERVER + '/set-refresh/';\n    return this.http.post(\n      endpoint,\n      { code: refreshCode },\n      { observe: 'response' }\n    );\n  }\n\n  setYouTubeConfig(conf: YouTubeSettings): Observable<any> {\n    const endpoint = this.API_SERVER + '/set-yt/';\n    return this.http.post(\n      endpoint,\n      { channel_id: conf.channel_id,\n        api_key: conf.api_key },\n      { observe: 'response' }\n    );\n  }\n\n  revertConfigSettings(config: ConfigSettings) {\n    if (config.config_valid) {\n      const endpoint = this.API_SERVER + '/set-configs/';\n      let subscription = this.http.post(endpoint, config).subscribe((_) => {\n        this.updateConfigCache(config);\n        subscription.unsubscribe();\n      });\n    }\n  }\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n@Injectable()\nexport class LoaderService {\n  isLoading = new Subject<boolean>();\n  show() {\n    this.isLoading.next(true);\n  }\n  hide() {\n    this.isLoading.next(false);\n  }\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReloadAppService {\n  constructor() {}\n  reloadMcc: Subject<boolean> = new Subject<boolean>();\n  reloadAccountIds: Subject<boolean> = new Subject<boolean>();\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { AssetType } from '../model/asset';\nimport { YouTubeVid } from '../model/yt-vid'\nimport { BehaviorSubject } from 'rxjs';\nimport { UploadResponse } from '../model/response';\nimport { AuthorizationService } from './authorization.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UploadAssetService {\n  private API_SERVER = location.origin;\n\n  private _YtVidList$ = new BehaviorSubject<YouTubeVid[]>(null);\n  ytVidList$ = this._YtVidList$.asObservable();  \n\n  constructor(\n    private http: HttpClient,\n    private _authorizationService: AuthorizationService\n  ) {}\n\n  /** Used for text assets only */\n  addTextAsset(\n    account: number,\n    text: string,\n    assetType: AssetType,\n    adGroups: number[]\n  ) {\n    const endpoint = this.API_SERVER + '/upload-asset/';\n\n    var refreshToken = this._authorizationService.getRefreshToken();\n    let textAsset = {\n      account: account,\n      refresh_token: refreshToken,\n      asset_type: assetType,\n      asset_name: '',\n      asset_text: text,\n      adgroups: adGroups,\n    };\n\n    return this.http.post(endpoint, textAsset, { observe: 'response' });\n  }\n\n  /** Used for all non-text assets */\n  uploadAsset(\n    account: number,\n    assetName: string,\n    assetType: AssetType,\n    adGroups: number[],\n    url?: string\n  ) {\n    let asset;\n    const endpoint = this.API_SERVER + '/upload-asset/';\n\n    var refreshToken = this._authorizationService.getRefreshToken();\n    if (assetType === AssetType.VIDEO) {\n      asset = {\n        account: account,\n        refresh_token: refreshToken,\n        asset_type: assetType,\n        asset_name: assetName,\n        url: url,\n        adgroups: adGroups,\n      };\n    } else {\n      asset = {\n        account: account,\n        refresh_token: refreshToken,\n        asset_type: assetType,\n        asset_name: assetName,\n        adgroups: adGroups,\n      };\n    }\n\n    return this.http.post(endpoint, asset, { observe: 'response' });\n  }\n\n  validateDimensions(\n    width: number,\n    height: number\n  ){\n    let image = {\n      width: width,\n      height: height\n    }\n    const endpoint = this.API_SERVER + '/validate-dimensions/'\n\n    return this.http.post(endpoint, image,{ observe: 'response'})\n  }\n\n\n  clearUploads() {\n    const endpoint = this.API_SERVER + '/clean-dir/';\n    let subscritpion = this.http.get(endpoint).subscribe((_) => {\n      subscritpion.unsubscribe();\n    });\n  }\n\n  loadYtChannelVideos(){\n    const endpoint = this.API_SERVER + '/get-yt-videos/';\n    let subscription = this.http.get<YouTubeVid[]>(endpoint)\n    .subscribe((vids) =>{\n      this._YtVidList$.next(vids);\n      subscription.unsubscribe();\n    })\n  }\n\n  bulkUploadToYt(uploadList){\n    const endpoint = this.API_SERVER + '/upload-asset-bulk/';\n    var refresh_token = this._authorizationService.getRefreshToken();\n    var payload = {'refresh_token': refresh_token, 'data': uploadList}\n    return this.http.post(endpoint, payload, {observe: 'response'})\n  }\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, Inject, OnInit, ViewChild} from '@angular/core';\nimport {\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n  MatDialog,\n} from '@angular/material/dialog';\nimport { ConfigSettings, YouTubeSettings } from '../model/settings';\nimport { AppSetupComponent } from '../app-setup/app-setup.component';\nimport { YtConifgComponent } from '../shared/config/yt-conifg/yt-conifg.component'\nimport { ConfigService } from '../services/config.service';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.css'],\n})\nexport class SettingsComponent {\n  editMode: boolean = false;\n  verificationText: string = '';\n  errorFound: boolean = false;\n\n  @ViewChild('ytFormGroup') ytCredentials: YtConifgComponent;\n\n  constructor(\n    private _setupDialog: MatDialog,\n    private _configService: ConfigService,\n    public dialogRef: MatDialogRef<SettingsComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n  ) {}\n  ngOnInit() {\n    this.dialogRef.updateSize('900px', '450px');\n  }\n  onEdit() {\n    this.dialogRef.close();\n    const configDialogRef = this._setupDialog.open(AppSetupComponent, {\n      data: <ConfigSettings>this.data.config,\n    });\n\n    let subscription = configDialogRef.backdropClick().subscribe((_) => {\n      // Revert back to old config\n      this._configService.revertConfigSettings(this.data);\n      subscription.unsubscribe();\n    });\n  }\n\n  onYtSubmit() {\n    let YtConf: YouTubeSettings = {\n      channel_id: this.ytCredentials.YTform.get('channel').value.trim(),\n      api_key: this.ytCredentials.YTform.get('key').value.trim()\n    } \n    return this._configService.setYouTubeConfig(YtConf).subscribe(\n      (response) => {\n          this._configService.updateYtConfigSettings(YtConf)\n          this.errorFound = false\n          this.verificationText = 'Credentials Updated'\n      },\n      (error) =>{\n        this.errorFound = true\n        this.verificationText = 'Invalid Credentials'\n      }\n    )\n  }\n}\n","<h1 mat-dialog-title>AssetMG Settings</h1>\n<mat-tab-group>\n<mat-tab label=\"General\">\n  <div mat-dialog-content>\n    <app-credentials class=\"settings-form\" #credentialsFormGroup\n      [data]=\"this.data.config\"\n      [editMode]=false>\n    </app-credentials>\n    <div mat-dialog-actions>\n      <button mat-stroked-button\n        color=\"primary\"\n        (click)=\"onEdit()\">Edit</button>\n      <button mat-stroked-button\n        color=\"primary\"\n        class=\"right-align\"\n        [mat-dialog-close]=\"true\"\n        cdkFocusInitial>Ok</button>\n    </div>\n  </div>\n</mat-tab>\n<mat-tab label=\"YouTube Config\">\n  <div mat-dialog-content>\n    <app-yt-config class=\"settings-form\" #ytFormGroup\n    [ytData]=\"this.data.yt\">\n    </app-yt-config>\n    <div>\n      <p [ngClass]=\"{'msg': true, 'color-red':this.errorFound}\">{{verificationText}}</p>\n    </div>\n    <div mat-dialog-actions>\n      <button mat-stroked-button\n        color=\"primary\"\n        (click)=\"onYtSubmit()\">Update</button>\n      <button mat-stroked-button\n        color=\"primary\"\n        class=\"right-align\"\n        [mat-dialog-close]=\"true\"\n        cdkFocusInitial>Ok</button>\n    </div>\n  </div>\n</mat-tab>\n</mat-tab-group>\n\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Pipe, PipeTransform } from '@angular/core';\n\nexport enum transformAction {\n  ADD_DASHES,\n  REMOVE_DASHES,\n}\n\n@Pipe({\n  name: 'cidPipe',\n})\nexport class ClientIDPipe implements PipeTransform {\n  transform(value: string, action: transformAction) {\n    let newStr = value;\n    if (action === transformAction.ADD_DASHES) {\n      if (!value.includes('-')) {\n        newStr =\n          value.slice(0, 3) +\n          '-' +\n          value.slice(3, 6) +\n          '-' +\n          value.slice(6, 10);\n      }\n    } else {\n      newStr = value.replace(/-/g, '');\n    }\n    return newStr;\n  }\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ConfigSettings } from 'src/app/model/settings';\nimport { ClientIDPipe, transformAction } from '../../client-id.pipe';\n\n@Component({\n  selector: 'app-credentials',\n  templateUrl: './credentials.component.html',\n  styleUrls: ['./../config.css'],\n})\nexport class CredentialsComponent implements OnInit {\n  form: FormGroup;\n  mcc_cid: string = '';\n  constructor(\n    private _formBuilder: FormBuilder,\n    private _cidPipe: ClientIDPipe\n  ) {}\n\n  @Input() data: ConfigSettings;\n  @Input() editMode: boolean = true;\n\n  ngOnInit(): void {\n    this.form = this._formBuilder.group({\n      mccCtrl: [\n        {\n          value: this.data.client_customer_id\n            ? this._cidPipe.transform(\n                this.data.client_customer_id.toString(),\n                transformAction.ADD_DASHES\n              )\n            : '',\n          disabled: !this.editMode,\n        },\n        [\n          Validators.required,\n          Validators.minLength(10),\n          Validators.maxLength(12),\n          Validators.pattern('[0-9]{3}-[0-9]{3}-[0-9]{4}|[0-9]{10}'),\n        ],\n      ],\n      clientIDCtrl: [\n        {\n          value: this.data.client_id ? this.data.client_id : '',\n          disabled: !this.editMode,\n        },\n        Validators.required,\n      ],\n      clientSecretCtrl: [\n        {\n          value: this.data.client_secret ? this.data.client_secret : '',\n          disabled: !this.editMode,\n        },\n        Validators.required,\n      ],\n      devTokenCtrl: [\n        {\n          value: this.data.developer_token ? this.data.developer_token : '',\n          disabled: !this.editMode,\n        },\n        Validators.required,\n      ],\n      refreshCodeCtrl: [\n        {\n          value: this.data.refresh_token ? this.data.refresh_token : '',\n          disabled: true,\n        },\n      ],\n    });\n  }\n  onBlur() {\n    // Update the cid to remove any spaces and have dashes if it doesn't\n    let mccCtrl = this.form.get('mccCtrl');\n    mccCtrl.setValue(mccCtrl.value.trim());\n    if (!mccCtrl.invalid) {\n      this.mcc_cid = this._cidPipe.transform(\n        mccCtrl.value,\n        transformAction.ADD_DASHES\n      );\n    }\n  }\n}\n","<form [formGroup]=\"form\">\n  <div class=\"settings-field\">\n    <mat-form-field>\n      <mat-label>MCC Customer ID</mat-label>\n      <input matInput\n            placeholder=\"XXX-XXX-XXXX\"\n            formControlName=\"mccCtrl\"\n            autocomplete=\"off\"\n            (blur)=\"onBlur()\"\n            required>\n    </mat-form-field>\n  </div>\n  <div class=\"settings-field long-field\">\n    <mat-form-field >\n      <mat-label>Client ID</mat-label>\n      <input matInput\n            formControlName=\"clientIDCtrl\"\n            autocomplete=\"off\"\n            required>\n    </mat-form-field>\n  </div>\n  <div class=\"settings-field long-field\">\n    <mat-form-field>\n      <mat-label>Client Secret</mat-label>\n      <input matInput\n            formControlName=\"clientSecretCtrl\"\n            autocomplete=\"off\"\n            required>\n    </mat-form-field>\n  </div>\n  <div class=\"settings-field long-field\">\n    <mat-form-field>\n      <mat-label>Dev Token</mat-label>\n      <input matInput\n            formControlName=\"devTokenCtrl\"\n            autocomplete=\"off\"\n            required>\n    </mat-form-field>\n  </div>\n  <div *ngIf=\"!this.editMode\" class=\"settings-field long-field\">\n    <mat-form-field>\n      <mat-label>Refresh Token</mat-label>\n      <input matInput\n            formControlName=\"refreshCodeCtrl\"\n            autocomplete=\"off\">\n    </mat-form-field>\n  </div>\n</form>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-refresh-code',\n  templateUrl: './refresh-code.component.html',\n  styleUrls: ['./../config.css'],\n})\nexport class RefreshCodeComponent implements OnInit {\n  form: FormGroup;\n  updateMessage: string = '';\n  isErrorMessage: boolean = false;\n  workInProgress: boolean = false;\n\n  @Input() openURL: string = '';\n\n  constructor(private _formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this._formBuilder.group({\n      refreshCodeCtrl: ['', Validators.required],\n    });\n  }\n  onGenerateToken() {\n    if (this.openURL.length) {\n      window.open(this.openURL, '_blank');\n    }\n  }\n}\n","<form [formGroup]=\"form\">\n  <app-progress-btn\n    btnLabel='Generate Code'\n    [btnUpdateMsg]=\"updateMessage\"\n    [isError]=\"isErrorMessage\"\n    [inProgress]=\"workInProgress\"\n    (btnClick)=\"onGenerateToken()\">\n  </app-progress-btn>\n  <div class=\"settings-field long-field\">\n    <mat-form-field>\n      <mat-label>Refresh Code</mat-label>\n      <input matInput formControlName=\"refreshCodeCtrl\"  autocomplete=\"off\"\n            required>\n    </mat-form-field>\n  </div>\n</form>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { YouTubeSettings } from 'src/app/model/settings';\n\n@Component({\n  selector: 'app-yt-config',\n  templateUrl: './yt-conifg.component.html',\n  styleUrls: ['./yt-conifg.component.css'],\n})\n\nexport class YtConifgComponent implements OnInit {\n  YTform: FormGroup;\n  showText: boolean = false;\n  api_url: string = 'https://developers.google.com/youtube/registering_an_application';\n  console_url: string = 'https://developers.google.com/youtube/v3/getting-started#before-you-start';\n  instructions: string = \"This is optional. \" +\n        \"If you want to use the bulk upload from a YouTube channel feature, \" +\n        `please generate an <a href=${this.api_url} target='_blank' rel='noopener noreferrer'>API Key</a> ` +\n        `(not Oauth2) and enable the YouTube Data API in the <a href=${this.console_url} target='_blank' rel='noopener noreferrer'>API console</a> `;\n\n  constructor(private fb: FormBuilder) { }\n \n  @Input() ytData: YouTubeSettings;\n\n  ngOnInit(): void {\n    let channel_id = this.ytData.channel_id ? this.ytData.channel_id : '';\n    let api_key = this.ytData.api_key ? this.ytData.api_key : '';\n    this.YTform = this.fb.group({\n      channel: [\n        channel_id,\n      [\n        Validators.required,\n        Validators.minLength(3)\n      ]],\n      key: [\n        api_key,\n      [\n        Validators.required\n      ]]\n\n    })\n  }\n\n  toggleText(){\n    this.showText = !this.showText\n  }\n}\n","<form [formGroup]=\"YTform\">\n  <div class=\"settings-field\">\n    <mat-form-field>\n      <mat-label>YouTube Channel Id</mat-label>\n      <input matInput\n            formControlName=\"channel\"\n            autocomplete=\"off\"\n            >\n    </mat-form-field>\n  </div>\n  <div class=\"settings-field long-field\">\n    <mat-form-field >\n      <mat-label>API Key</mat-label>\n      <input matInput\n            formControlName=\"key\"\n            autocomplete=\"off\"\n            >\n    </mat-form-field>\n  </div>\n  <button mat-stroked-button color=\"primary\" (click)=\"toggleText()\">What is this?</button>\n  <ng-container *ngIf=\"showText\">\n    <div>\n      <p innerHTML={{instructions}}>{{instructions}}</p>\n    </div>\n  </ng-container>\n</form>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { subscribeOn } from 'rxjs/operators';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Pipe({\n  name: 'styleErrorMsg',\n})\nexport class ErrorMsgPipe implements PipeTransform {\n  constructor(private sanitizer: DomSanitizer) {}\n  transform(value: any, ...args: unknown[]): unknown {\n    // Remove Error code if it exists\n    let newValue = value.replace('403 ', '');\n    // Add new lines to make it more readible\n    newValue = newValue.replaceAll('. ', '.\\n\\n');\n    // add an html tag to links\n    let urlStartIdx = newValue.indexOf('https://');\n    let urlEndIdx = newValue.indexOf(' ', urlStartIdx);\n\n    let startTag =\n      '<a href=\"' +\n      newValue.substring(urlStartIdx, urlEndIdx) +\n      '\"target=\"_blank\">';\n    let endTag = '</a>';\n\n    newValue =\n      newValue.substring(0, urlStartIdx) +\n      startTag +\n      newValue.substring(urlStartIdx, urlEndIdx) +\n      endTag +\n      newValue.substring(urlEndIdx);\n\n    return this.sanitizer.bypassSecurityTrustHtml(newValue);\n  }\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, OnInit, ChangeDetectorRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { LoaderService } from '../../services/loader.service';\n@Component({\n  selector: 'app-loader',\n  templateUrl: './loader.component.html',\n  styleUrls: ['./loader.component.css'],\n})\nexport class LoaderComponent implements OnInit {\n  isLoading: boolean;\n  constructor(\n    private loaderService: LoaderService,\n    private cdf: ChangeDetectorRef\n  ) {}\n  ngOnInit(): void {\n    this.loaderService.isLoading.subscribe((loading) => {\n      this.isLoading = loading;\n      this.cdf.detectChanges();\n    });\n  }\n}","<div class= \"progress-bar\">\n  <mat-progress-bar *ngIf=\"isLoading\"\n  mode=\"indeterminate\"\n  color=\"accent\">\n  </mat-progress-bar>\n</div>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\n// import {A11yModule} from '@angular/cdk/a11y';\n// import {ClipboardModule} from '@angular/cdk/clipboard';\n// import {DragDropModule} from '@angular/cdk/drag-drop';\n// import {PortalModule} from '@angular/cdk/portal';\n// import {ScrollingModule} from '@angular/cdk/scrolling';\n// import {CdkStepperModule} from '@angular/cdk/stepper';\n// import {CdkTableModule} from '@angular/cdk/table';\n// import {CdkTreeModule} from '@angular/cdk/tree';\n// import {MatAutocompleteModule} from '@angular/material/autocomplete';\n// import {MatBadgeModule} from '@angular/material/badge';\n// import {MatBottomSheetModule} from '@angular/material/bottom-sheet';\nimport { MatButtonModule } from '@angular/material/button';\n//import {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n// import {MatChipsModule} from '@angular/material/chips';\nimport { MatStepperModule } from '@angular/material/stepper';\n// import {MatDatepickerModule} from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatDividerModule } from '@angular/material/divider';\n// import {MatExpansionModule} from '@angular/material/expansion';\n// import { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list';\n// import {MatMenuModule} from '@angular/material/menu';\n// import {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\n// import {MatSliderModule} from '@angular/material/slider';\n// import {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\n// import {MatTooltipModule} from '@angular/material/tooltip';\nimport { MatTreeModule } from '@angular/material/tree';\n\n@NgModule({\n  exports: [\n    // A11yModule,\n    // ClipboardModule,\n    // CdkStepperModule,\n    // CdkTableModule,\n    // CdkTreeModule,\n    // DragDropModule,\n    // MatAutocompleteModule,\n    // MatBadgeModule,\n    // MatBottomSheetModule,\n    MatButtonModule,\n    //MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    // MatChipsModule,\n    MatStepperModule,\n    // MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    // MatExpansionModule,\n    // MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    // MatMenuModule,\n    // MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    // MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    // MatSliderModule,\n    // MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    // MatTooltipModule,\n    MatTreeModule,\n    // PortalModule,\n    // ScrollingModule,\n  ],\n})\nexport class MaterialModule {}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Component,\n  OnInit,\n  EventEmitter,\n  Output,\n  HostListener,\n  Input,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-progress-btn',\n  templateUrl: './progress-btn.component.html',\n  styleUrls: ['./progress-btn.component.css'],\n})\nexport class ProgressBtnComponent implements OnInit {\n  @Input() btnLabel: string;\n  @Input() inProgress: boolean;\n  @Input() disabled: boolean;\n  @Input() btnUpdateMsg: string;\n  @Input() isError: boolean = false;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Output() btnClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  @HostListener('click', ['$event'])\n  public onClick(event: MouseEvent) {\n    if (!this.disabled) {\n      this.btnClick.emit(event);\n    }\n  }\n\n  // ngOnChanges(changes: SimpleChanges) {\n  //   if (changes.active) {\n  //     this.options.active = changes.active.currentValue;\n  //   }\n  //   if (changes.disabled) {\n  //     this.options.disabled = changes.disabled.currentValue;\n  //   }\n  // }\n}\n","<div class=\"addedPadding\">\n  <button mat-stroked-button\n    [disabled] = \"disabled\"\n    color=\"primary\">\n    {{btnLabel}}\n    <mat-progress-bar *ngIf=\"inProgress\"\n      mode=\"indeterminate\"\n      color=\"accent\">\n    </mat-progress-bar>\n  </button>\n  <div *ngIf=\"btnUpdateMsg?.length\"\n    class=\"margin-bottom-thin button-update-msg\"\n    [ngClass]=\"{'warning-msg': isError}\">\n    <i class=\"fas fa-info-circle\"></i>&nbsp;\n    <span [innerHTML]=\"btnUpdateMsg\"></span>\n  </div>\n</div>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ProgressBtnComponent } from './progress-btn/progress-btn.component';\nimport { LoaderComponent } from './loader/loader.component';\nimport { CredentialsComponent } from './config/credentials/credentials.component';\nimport { RefreshCodeComponent } from './config/refresh-code/refresh-code.component';\nimport { YtConifgComponent } from './config/yt-conifg/yt-conifg.component';\nimport { ClientIDPipe } from './client-id.pipe';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { HttpErrorInterceptor } from '../interceptors/http-error.interceptor';\nimport { LoaderInterceptor } from '../interceptors/loader.interceptor';\nimport { MaterialModule } from './material.module';\nimport { LoaderService } from '../services/loader.service';\nimport { UploadComponent } from './upload/upload.component';\nimport { ErrorMsgPipe } from './error-msg.pipe';\n\n@NgModule({\n  declarations: [\n    ProgressBtnComponent,\n    LoaderComponent,\n    CredentialsComponent,\n    RefreshCodeComponent,\n    UploadComponent,\n    ClientIDPipe,\n    ErrorMsgPipe,\n    YtConifgComponent,\n  ],\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, MaterialModule],\n  exports: [\n    ProgressBtnComponent,\n    LoaderComponent,\n    CredentialsComponent,\n    RefreshCodeComponent,\n    MaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    UploadComponent,\n    ErrorMsgPipe,\n    YtConifgComponent,\n  ],\n  providers: [\n    LoaderService,\n    ClientIDPipe,\n    ErrorMsgPipe,\n    { provide: HTTP_INTERCEPTORS, useClass: LoaderInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: HttpErrorInterceptor, multi: true },\n  ],\n})\nexport class SharedModule {}","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Component,\n  OnInit,\n  Input,\n  ViewChild,\n  ElementRef,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { UploadAssetService } from '../../services/upload-asset.service';\nimport { ValidationResponse } from '../../model/response';\n\nexport enum FileType {\n  IMG = 'image/*',\n  VIDEO = 'video/*',\n  HTML = '.zip',\n}\n\n@Component({\n  selector: 'app-upload',\n  templateUrl: './upload.component.html',\n  styleUrls: ['./upload.component.css'],\n})\nexport class UploadComponent implements OnInit {\n  action: string = location.origin + '/upload-files/';\n  fileNames: string[] = [];\n  selectedFileName: string = '';\n  invalidDimensionsMsg: string = '';\n  isError: boolean = false;\n\n  @Input() acceptsType: FileType;\n  @ViewChild('form') form: ElementRef;\n  @Output() isValid = new EventEmitter<boolean>();\n\n  constructor(private _uploadService: UploadAssetService) {}\n  ngOnInit(): void {}\n\n  onChange(event) {\n    this.invalidDimensionsMsg = '';\n    this.isError = false;\n    this.fileNames = [];\n    for (let file of event.target.files) {\n      this.fileNames.push(file.name);\n    }\n    if (this.fileNames.length > 0) {\n      this.isValid.emit(true);\n    } else {\n      this.isValid.emit(false);\n    }\n\n    // Image size validation\n    if (this.acceptsType == FileType.IMG) {\n      var file = event.target.files[0];\n      var fileReader = new FileReader();\n      var img = new Image();\n      let self = this;\n\n      fileReader.onload = function (event) {\n        img.src = <string>fileReader.result;\n\n        img.onload = function () {\n          // Call the Validation API here -\n          let subscription = self._uploadService\n            .validateDimensions(img.width, img.height)\n            .subscribe((response) => {\n              console.log(img.height, img.width);\n              self.isValid.emit((response.body as ValidationResponse).valid);\n              if (!(response.body as ValidationResponse).valid) {\n                self.invalidDimensionsMsg = 'Invalid Image Dimensions';\n                self.isError = true;\n              }\n              subscription.unsubscribe();\n            });\n        };\n      };\n      fileReader.readAsDataURL(file);\n    }\n\n    if (this.fileNames.length) {\n      this.selectedFileName = this.fileNames[0];\n    } else {\n      this.selectedFileName = '';\n    }\n  }\n\n  uploadToServer() {\n    this.form.nativeElement.submit();\n  }\n}\n","<iframe id=\"hiddenFrame\" name=\"hiddenFrame\"></iframe>\n<form #form\n  ngNoForm\n  action={{action}}\n  method=\"POST\"\n  enctype=\"multipart/form-data\"\n  target=\"hiddenFrame\">\n  <input #fileInput\n    hidden\n    name=\"file\"\n    type=\"file\"\n    [accept]=\"acceptsType\"\n    (change)=\"onChange($event)\"/>\n  <button mat-stroked-button\n    color=\"primary\"\n    (click)=\"fileInput.click()\">\n    <mat-icon >file_upload</mat-icon>Upload\n  </button>\n  <input\n    id=\"selectedFile\"\n    matInput\n    type=\"text\"\n    placeholder=\"No file chosen\"\n    readonly=\"true\"\n    [value]=\"selectedFileName\">\n</form>\n<div *ngIf=\"invalidDimensionsMsg?.length\"\nclass=\"margin-bottom-thin button-update-msg\"\n[ngClass]=\"{'warning-msg': isError}\">\n  <i class=\"fas fa-info-circle\"></i>\n  {{this.invalidDimensionsMsg}}<span>&nbsp;</span>\n</div>","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, OnInit, Input } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { Account } from './../model/account';\nimport { AssetService } from './../services/asset.service';\nimport { AuthorizationService } from './../services/authorization.service';\n\nimport { Asset } from './../model/asset';\nimport { tap } from 'rxjs/operators';\nimport { MatDialog } from '@angular/material/dialog';\nimport { SettingsComponent } from '../settings/settings.component';\nimport { ConfigService } from '../services/config.service';\nimport { ReloadAppService } from '../services/reload-app.service';\n\n@Component({\n  selector: 'app-toolbar',\n  templateUrl: './toolbar.component.html',\n  styleUrls: ['./toolbar.component.css'],\n})\nexport class ToolbarComponent implements OnInit {\n  private _subscriptions: Subscription[] = [];\n  accounts$: Observable<Account[]>;\n  defaultAccount: number;\n  loggedIn: boolean=false;\n\n  @Input() loadAccounts: boolean = false;\n\n  constructor(\n    private _dataService: AssetService,\n    private _configService: ConfigService,\n    private _authorizationService: AuthorizationService,\n    private _reloadAppService: ReloadAppService,\n    private _settingsDialog: MatDialog\n  ) {\n    this._reloadAppService.reloadAccountIds.subscribe(() => {\n      this.loadAccountIds();\n    });\n  }\n\n  ngOnInit(): void {\n    this.loadAccountIds();\n\n    this._subscriptions.push(\n      this._authorizationService.loggedIn$.subscribe((loggedIn) => {\n        this.loggedIn = loggedIn;\n      })\n    );\n  }\n\n  loadAccountIds(): void {\n    this.accounts$ = this._dataService.getAccountIds().pipe(\n      tap((accounts) => {\n        if (accounts.length) {\n          this.defaultAccount = accounts[0].id;\n          this._dataService.changeAccount(accounts[0].id);\n        }\n      })\n    );\n  }\n\n  refreshCache() {\n    // Manually force a cache refresh based on user trigger\n    console.log(\"Refreshing cache manually.\");\n    this._reloadAppService.reloadMcc.next(true);\n  }\n\n  accountChanged(event) {\n    // Only get a notification for the selected account not the \"unselected\" account\n    if (event.isUserInput) {\n      this._dataService.changeAccount(event.source.value);\n    }\n  }\n\n  openSettings() {\n    let config = this._configService.getConfigSettings();\n    let ytConfig = this._configService.getYtConfigSettings();\n    this._settingsDialog.open(SettingsComponent, {\n      data: {\n        config:{\n        client_customer_id: config.client_customer_id,\n        client_id: config.client_id,\n        client_secret: config.client_secret,\n        developer_token: config.developer_token,\n        refresh_token: config.refresh_token,\n        config_valid: config.config_valid\n        },\n        yt:{\n        channel_id: ytConfig.channel_id,\n        api_key: ytConfig.api_key\n        }\n      }\n    });\n  }\n\n  feedbackClicked() {\n    let mailText = 'mailto:assetmg@google.com+?subject=AssetMG%Feedback';\n    window.location.href = mailText;\n  }\n}\n","<mat-toolbar class=\"toolbar_class\">\n    <mat-toolbar-row>\n    \t<div class=\"toolbar_logo\">\n    \t<img src=\"assets/gtech_logo.png\" style=\"width: 40px;\">\n    \t<span>AssetMG - Prototype</span>\n      </div>\n      <div *ngIf=\"this.loadAccounts\" class=\"toolbar_select\">\n        <mat-form-field class=\"account_select\">\n        <mat-label>Account</mat-label>\n        <mat-select [(value)]=\"defaultAccount\">\n          <mat-option *ngFor=\"let account of (accounts$ | async)\" [value]=\"account.id\"\n            (onSelectionChange)=\"accountChanged($event)\"> {{!!account.name ? account.name : account.id}}\n          </mat-option>\n        </mat-select>\n        </mat-form-field>\n    </div>\n    <div class=\"right-align\">\n      <app-login></app-login>\n      <ng-container *ngIf=\"this.loggedIn\">\n        <button mat-icon-button (click)=\"refreshCache()\">\n            <mat-icon>update</mat-icon>\n        </button>\n      </ng-container>\n      <button mat-icon-button (click)=\"openSettings()\">\n          <mat-icon>settings</mat-icon>\n      </button>\n      <button mat-icon-button (click)=\"feedbackClicked()\">\n          <mat-icon>feedback</mat-icon>\n      </button>\n    </div>\n    </mat-toolbar-row>\n  </mat-toolbar>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, OnInit, ViewChild, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {\n  FormGroup,\n  FormControl,\n  FormGroupDirective,\n  NgForm,\n} from '@angular/forms';\nimport { Account } from '../model/account';\nimport { MatStepper } from '@angular/material/stepper';\nimport { UploadTextComponent } from './upload-text/upload-text.component';\nimport { UploadImgComponent } from './upload-img/upload-img.component';\nimport { UploadVideoComponent } from './upload-video/upload-video.component';\nimport { UploadHtmlComponent } from './upload-html/upload-html.component';\nimport { STEPPER_GLOBAL_OPTIONS } from '@angular/cdk/stepper';\nimport { UploadAssetService } from '../services/upload-asset.service';\n \nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { AssetType } from '../model/asset';\nimport { STATUS, UploadResponse } from '../model/response';\nimport { AssetService } from '../services/asset.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AccountStructComponent } from '../account-struct/account-struct.component';\nimport { ConfigService } from '../services/config.service';\n \n/** Error when the parent is invalid */\nexport class ErrorMatcher implements ErrorStateMatcher {\n  isErrorState(\n    control: FormControl | null,\n    form: FormGroupDirective | NgForm | null\n  ): boolean {\n    return control.dirty && form.invalid;\n  }\n}\n \n@Component({\n  selector: 'app-upload-assets',\n  templateUrl: './upload-assets.component.html',\n  styleUrls: ['./upload-assets.component.css'],\n  providers: [\n    {\n      provide: STEPPER_GLOBAL_OPTIONS,\n      useValue: { displayDefaultIndicatorType: false },\n    },\n  ],\n})\nexport class UploadAssetsComponent implements OnInit {\n  typeFormGroup: FormGroup;\n  uploadFormGroup: FormGroup;\n  uploadAssetType: AssetType;\n  assetTypes = AssetType;\n  types: Map<AssetType, string>;\n  isBulkUpload: boolean;\n  // used to disable the 'upload' button when no files are selected\n  isBulkFilesSelected: boolean = false;\n\n  /** Dialog initialization values */\n  canAddAsset: boolean;\n  isTextAsset: boolean = true;\n  isChildFormValid: boolean = true;\n \n  /** Update button params */\n  uploadInProgress: boolean = false;\n  uploadMessage: string = '';\n  isErrorMessage: boolean = false;\n \n  @ViewChild('uploadText') uploadText: UploadTextComponent;\n  @ViewChild('uploadImg') uploadImg: UploadImgComponent;\n  @ViewChild('uploadVideo') uploadVideo: UploadVideoComponent;\n  @ViewChild('uploadHtml') uploadHtml: UploadHtmlComponent;\n  @ViewChild('accountAdGroups') adGroups: AccountStructComponent;\n \n  constructor(\n    private _uploadService: UploadAssetService,\n    private _configService: ConfigService,\n    private _uploadAssetService: UploadAssetService,\n    private _assetService: AssetService,\n    private _snackBar: MatSnackBar,\n    public uploadDialogRef: MatDialogRef<UploadAssetsComponent>,\n    @Inject(MAT_DIALOG_DATA) public account: Account\n  ) {}\n \n  ngOnInit(): void {\n    this.types = new Map();\n    this.types.set(this.assetTypes.TEXT_HEADLINE, 'Text - Headline');\n    this.types.set(this.assetTypes.TEXT_DESC, 'Text - Description');\n    this.types.set(this.assetTypes.IMG, 'Image');\n    this.types.set(this.assetTypes.VIDEO, 'YouTube Video');\n    this.types.set(this.assetTypes.HTML, 'HTML');\n \n    // First selected asset type is image when the dialog loads\n    this.canAddAsset = true;\n    this.uploadAssetType = this.assetTypes.IMG;\n \n    this.uploadDialogRef.updateSize('800px', '520px');\n \n    this.uploadDialogRef.beforeClosed().subscribe((result) => {\n      this._uploadService.clearUploads();\n    });\n \n    let yt_creds = this._configService.getYtConfigSettings();\n    if (yt_creds.api_key !== '') {\n      this._uploadAssetService.loadYtChannelVideos();\n    }\n  }\n \n  onClose() {\n    this.uploadDialogRef.close();\n  }\n \n  onAssetTypeChange(type) {\n    // Update whether an asset can be added without getting linked to an ad group\n    if (\n      type == this.assetTypes.TEXT_DESC ||\n      type == this.assetTypes.TEXT_HEADLINE\n    ) {\n      this.isTextAsset = true;\n      this.canAddAsset = false;\n    } else {\n      this.isTextAsset = false;\n      this.canAddAsset = true;\n    }\n  }\n\n  setIsBulkUpload(value: boolean){\n    this.isBulkUpload = value;\n  }\n\n  // used to disable/enable the 'upload' button\n  setIsBulkFilesSelected(value: boolean){\n    this.isBulkFilesSelected = value;\n  }\n\n  bulkUploadVideos(){\n    let subscription = this.uploadVideo.uploadBulkVids()\n    subscription.subscribe((response) =>{\n      if (response.status === STATUS.SUCCESS || response.status === STATUS.PARTIAL_SUCCESS){\n        for (let asset of <any[]>response.body){\n          this._assetService.addNewAsset(asset);\n        }\n        this.uploadDialogRef.close()\n      }\n    })\n  }\n \n  onNext(stepper: MatStepper) {\n    if (stepper.selectedIndex == 1) {\n      switch (this.uploadAssetType) {\n        case this.assetTypes.IMG:\n          this.uploadImg.uploadToServer();\n          break;\n        case this.assetTypes.VIDEO:\n          !this.uploadVideo.form.invalid;\n          break;\n        case this.assetTypes.HTML:\n          this.uploadHtml.uploadToServer();\n          break;\n        default:\n          !this.uploadText.form.invalid;\n      }\n      // Reset any errors before moving to the next step\n      this.isErrorMessage = false;\n      this.uploadMessage = '';\n    }\n    stepper.next();\n    this.isChildFormValid = this.isCurrentStepValid(stepper);\n  }\n  onBack(stepper: MatStepper) {\n    stepper.previous();\n    this.isChildFormValid = this.isCurrentStepValid(stepper);\n    this.isBulkUpload = false;\n  }\n \n  isCurrentStepValid(stepper: MatStepper): boolean {\n    if (stepper.selectedIndex == 0 || stepper.selectedIndex == 2) {\n      return true;\n    } else {\n      switch (this.uploadAssetType) {\n        case this.assetTypes.IMG:\n          return this.uploadImg.isValid;\n        case this.assetTypes.HTML:\n          return this.uploadHtml.isValid;\n        case this.assetTypes.VIDEO:\n          return !this.uploadVideo.form.invalid;\n        default:\n          return !this.uploadText.form.invalid;\n      }\n    }\n  }\n \n  updateStepValid(isValid: boolean) {\n    this.isChildFormValid = isValid;\n  }\n \n  updateCanAddAsset(canAdd: boolean) {\n    if (\n      this.uploadAssetType == this.assetTypes.TEXT_DESC ||\n      this.uploadAssetType == this.assetTypes.TEXT_HEADLINE\n    ) {\n      this.canAddAsset = canAdd;\n    }\n  }\n  onAddAsset() {\n    // Start the spinner\n    this.uploadInProgress = true;\n \n    let assetName = '';\n    let assetText = '';\n    let url = '';\n    let adGroups = this.adGroups.getSelectedAdGroupIDs();\n \n    switch (this.uploadAssetType) {\n      case this.assetTypes.IMG:\n        assetName = this.uploadImg.upload.fileNames[0];\n        break;\n      case this.assetTypes.HTML:\n        assetName = this.uploadHtml.upload.fileNames[0];\n        break;\n      case this.assetTypes.VIDEO:\n        assetName = this.uploadVideo.form.get('videoNameCtrl').value;\n        url = this.uploadVideo.form.get('videoUrlCtrl').value;\n        break;\n      case this.assetTypes.TEXT_DESC:\n      case this.assetTypes.TEXT_HEADLINE:\n        assetText = this.uploadText.form.get('textCtrl').value;\n        break;\n    }\n \n    if (\n      this.uploadAssetType == this.assetTypes.TEXT_DESC ||\n      this.uploadAssetType == this.assetTypes.TEXT_HEADLINE\n    ) {\n      let subscription = this._uploadService\n        .addTextAsset(\n          this.account.id,\n          assetText,\n          this.uploadAssetType,\n          adGroups\n        )\n        .subscribe(\n          (response) => {\n            this.processUploadResponse(response.status, response.body);\n            subscription.unsubscribe();\n          },\n          (error) => {\n            this.processUploadResponse(\n              STATUS.FAIL,\n              this.buildErrorResponse(error)\n            );\n          }\n        );\n    } else {\n      let subscription = this._uploadService\n        .uploadAsset(\n          this.account.id,\n          assetName,\n          this.uploadAssetType,\n          adGroups,\n          url\n        )\n        .subscribe(\n          (response) => {\n            this.processUploadResponse(\n              response.status,\n              <UploadResponse>response.body\n            );\n            subscription.unsubscribe();\n          },\n          (error) => {\n            this.processUploadResponse(\n              STATUS.FAIL,\n              this.buildErrorResponse(error)\n            );\n          }\n        );\n    }\n  }\n \n  processUploadResponse(status, response?: UploadResponse) {\n    // Stop the progress bar\n    this.uploadInProgress = false;\n    console.log(response);\n    if (status != STATUS.SUCCESS) {\n      this.isErrorMessage = true;\n      let msg = '';\n      if (status === STATUS.FAIL) {\n        msg = response.msg;\n      } else if (status === STATUS.PARTIAL_SUCCESS) {\n        let failures = (<any>response).unsuccessfull;\n        console.log(failures);\n        if (failures) {\n          for (let failure of failures) {\n            msg += `Update failed for the ad group \"${failure.adgroup.adgroup_name}\" from campaign \"${failure.adgroup.campaign_name}\":\n                ${failure.error_message}<br/>`;\n          }\n        } else {\n          msg = 'Update failed for some ad groups.';\n        }\n      }\n      this.uploadMessage = msg;\n    } else if (response?.asset) {\n      // Notify the asset service of newly added asset\n      if (response.asset) {\n        //console.log(response.asset)\n        this._assetService.addNewAsset(response.asset);\n        this._snackBar.open('Uploaded Successfully', '', {\n          duration: 2000,\n          horizontalPosition: 'center',\n          verticalPosition: 'bottom',\n        });\n      }\n      this.uploadDialogRef.close({ successful: status == STATUS.SUCCESS });\n    }\n  }\n \n  buildErrorResponse(error) {\n    let response = {};\n    if (error.error) {\n      let msg = '';\n      msg += `${error.error.msg}<br/>`;\n      let failures = error.error?.failures || error.error;\n      if (failures.length) {\n        for (let failure of failures) {\n          msg += `Update failed for the ad group \"${failure.adgroup.adgroup_name}\" from campaign \"${failure.adgroup.campaign_name}\":\n          ${failure.error_message}<br/>`;\n        }\n      } else {\n        msg = `${msg}`;\n      }\n      response['msg'] = msg;\n    } else {\n      response['msg'] = 'Upload Failed';\n    }\n    return response;\n  }\n}","\n<div class=\"fixActionRow\">\n  <h1 mat-dialog-title>Add Asset\n    <button mat-icon-button class=\"close-button\" (click)=\"onClose()\">\n      <mat-icon class=\"close-icon\">close</mat-icon>\n    </button>\n  </h1>\n  <div mat-dialog-content>\n    <mat-horizontal-stepper linear=\"false\" #stepper>\n      <mat-step [stepControl]=\"typeFormGroup\">\n          <ng-template matStepLabel>Type</ng-template>\n          <h3>Select Asset Type:</h3>\n          <mat-radio-group\n            class=\"type-radio-group\"\n            (change)=\"onAssetTypeChange($event.value)\"\n            [(ngModel)]=\"uploadAssetType\">\n            <mat-radio-button *ngFor=\"let type of types| keyvalue\"\n              class=\"type-radio-button\"\n              [value]=\"type.key\">\n              {{type.value}}\n            </mat-radio-button>\n          </mat-radio-group>\n      </mat-step>\n      <mat-step [stepControl]=\"uploadFormGroup\">\n          <ng-template matStepLabel>Asset</ng-template>\n          <h3>Add Asset</h3>\n          <div [ngSwitch]=\"uploadAssetType\">\n              <app-upload-img\n                #uploadImg\n                (isChildFormValid)=\"updateStepValid($event)\"\n                *ngSwitchCase=\"assetTypes.IMG\">\n              </app-upload-img>\n              <app-upload-video\n                #uploadVideo\n                (isChildFormValid)=\"updateStepValid($event)\"\n                (isBulkUpload)=\"setIsBulkUpload($event)\"\n                (isBulkVidFilesSelected)=\"setIsBulkFilesSelected($event)\"\n                *ngSwitchCase=\"assetTypes.VIDEO\">\n              </app-upload-video>\n              <app-upload-html\n                #uploadHtml\n                (isChildFormValid)=\"updateStepValid($event)\"\n                *ngSwitchCase=\"assetTypes.HTML\">\n              </app-upload-html>\n              <app-upload-text\n                #uploadText\n                (isChildFormValid)=\"updateStepValid($event)\"\n                [isHeadline]=\"uploadAssetType === this.assetTypes.TEXT_HEADLINE\"\n                *ngSwitchDefault>\n              </app-upload-text>\n          </div>\n      </mat-step>\n      <mat-step>\n        <ng-template matStepLabel>Add</ng-template>\n        <app-account-struct\n          #accountAdGroups\n          [account]=\"account\"\n          [uploadMode]=true\n          (selectionMade)=\"updateCanAddAsset($event)\">\n        </app-account-struct>\n\n      </mat-step>\n    </mat-horizontal-stepper>\n  </div>\n  <div class=\"spacer\"></div>\n  <div mat-dialog-actions >\n    <div>\n      <button mat-stroked-button\n        color=\"primary\"\n        *ngIf=\"stepper.selectedIndex !== 0\"\n        (click)=\"onBack(stepper)\">Back</button>\n    </div>\n      <button mat-stroked-button\n        color=\"primary\"\n        class=\"right-align\"\n        *ngIf=\"stepper.selectedIndex !== 2 && isBulkUpload != true\"\n        [disabled]=\"!isChildFormValid\"\n        (click)=\"onNext(stepper)\">Next</button>\n        <button mat-stroked-button\n        color=\"primary\"\n        class=\"right-align\"\n        *ngIf=\"isBulkUpload === true\"\n        [disabled]=\"!isBulkFilesSelected\"\n        (click)=\"bulkUploadVideos()\">Upload</button>\n      <app-progress-btn\n        btnLabel='Add Asset'\n        class=\"right-align\"\n        *ngIf=\"stepper.selectedIndex == 2\"\n        [disabled]=\"!canAddAsset\"\n        [btnUpdateMsg]=\"uploadMessage\"\n        [isError]=\"isErrorMessage\"\n        [inProgress]=\"uploadInProgress\"\n        (btnClick)=\"onAddAsset()\">\n      </app-progress-btn>\n  </div>\n</div>\n\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Component,\n  OnInit,\n  ViewChild,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport {\n  FileType,\n  UploadComponent,\n} from 'src/app/shared/upload/upload.component';\n\n@Component({\n  selector: 'app-upload-html',\n  templateUrl: './upload-html.component.html',\n  styleUrls: ['./upload-html.component.css'],\n})\nexport class UploadHtmlComponent implements OnInit {\n  isValid: boolean = false;\n  fileTypes: FileType = FileType.HTML;\n\n  @ViewChild('uploadHtml') upload: UploadComponent;\n  @Output() isChildFormValid: EventEmitter<boolean> = new EventEmitter<\n    boolean\n  >();\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  uploadToServer() {\n    this.upload.uploadToServer();\n  }\n\n  updateIsValid(validEvent) {\n    this.isValid = validEvent;\n    this.isChildFormValid.emit(validEvent);\n  }\n}\n","<app-upload #uploadHtml\n  [acceptsType]=\"fileTypes\"\n  (isValid)=updateIsValid($event)></app-upload>\n  <br>\n<a mat-stroked-button href=\"https://h5validator.appspot.com/adwords/asset\" target=\"_blank\">HTML5 Validator</a>\n\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Component,\n  OnInit,\n  Input,\n  ViewChild,\n  ElementRef,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport {\n  UploadComponent,\n  FileType,\n} from 'src/app/shared/upload/upload.component';\n\n@Component({\n  selector: 'app-upload-img',\n  templateUrl: './upload-img.component.html',\n  styleUrls: ['./upload-img.component.css'],\n})\nexport class UploadImgComponent implements OnInit {\n  isValid: boolean = false;\n  fileTypes: FileType = FileType.IMG;\n\n  @ViewChild('uploadImg') upload: UploadComponent;\n  @Output() isChildFormValid: EventEmitter<boolean> = new EventEmitter<\n    boolean\n  >();\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  uploadToServer() {\n    this.upload.uploadToServer();\n  }\n\n  updateIsValid(validEvent: boolean) {\n    this.isValid = validEvent;\n    this.isChildFormValid.emit(validEvent);\n  }\n}\n","<app-upload #uploadImg\n  [acceptsType]=\"fileTypes\"\n  (isValid)=updateIsValid($event)></app-upload>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Component,\n  OnInit,\n  Input,\n  SimpleChanges,\n  EventEmitter,\n  Output,\n  AfterViewInit,\n} from '@angular/core';\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators,\n  FormControl,\n  FormGroupDirective,\n  NgForm,\n} from '@angular/forms';\nimport { ErrorMatcher } from '../upload-assets.component';\n\n@Component({\n  selector: 'app-upload-text',\n  templateUrl: './upload-text.component.html',\n  styleUrls: ['./upload-text.component.css'],\n})\nexport class UploadTextComponent implements OnInit, AfterViewInit {\n  form: FormGroup;\n  maxLength: number;\n  textAssetType: string;\n  errorMatcher = new ErrorMatcher();\n  @Input() isHeadline: boolean;\n  @Output() isChildFormValid: EventEmitter<boolean> = new EventEmitter<\n    boolean\n  >();\n\n  constructor(private _formBuilder: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this._formBuilder.group({\n      textCtrl: [\n        '',\n        [Validators.required, Validators.maxLength(this.maxLength)],\n      ],\n    });\n\n    // Update parent form when the value changes to detect valid and invalid states\n    this.form.valueChanges.subscribe((value) => {\n      if (this.form.get('textCtrl').value.length) {\n        this.isChildFormValid.emit(!this.form.invalid);\n      }\n    });\n  }\n\n  ngAfterViewInit() {}\n\n  // Reflect valid/invalid state to parent - \"empty space\" is bypassed by the\n  // event emitter previous\n  onBackspace() {\n    // This gets triggered before the actual text os deleted\n    // so we want to emit it when there's one character in the textbox\n    if (this.form.get('textCtrl').value.length == 1) {\n      this.isChildFormValid.emit(false);\n    }\n  }\n\n  ngOnChanges(change: SimpleChanges) {\n    // Reset the input control if the text asset type changed\n    if (change.isHeadline.previousValue != change.isHeadline.currentValue) {\n      this.form?.get('textCtrl').setValue('');\n    }\n\n    // Reset the max allowed text size\n    if (this.isHeadline) {\n      this.maxLength = 30;\n      this.textAssetType = 'Headline';\n    } else {\n      this.maxLength = 90;\n      this.textAssetType = 'Description';\n    }\n\n    this.form\n      ?.get('textCtrl')\n      .setValidators([\n        Validators.required,\n        Validators.maxLength(this.maxLength),\n      ]);\n  }\n}\n","<form [formGroup]=\"form\">\n  <mat-form-field [ngClass]=\"{'short-input': this.isHeadline }\">\n    <mat-label>{{textAssetType}}</mat-label>\n    <input matInput #textAsset\n          [errorStateMatcher]=\"errorMatcher\"\n          formControlName=\"textCtrl\"\n          autocomplete=\"off\"\n          (keydown.backspace)=\"onBackspace()\"\n          required>\n    <mat-hint align=\"end\">{{textAsset.value.length}} /{{this.maxLength}} </mat-hint>\n  </mat-form-field>\n</form>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, OnInit, Output, EventEmitter,ViewChild, ChangeDetectorRef,} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { ConfigService } from '../../services/config.service';\nimport { YouTubeVid } from '../../model/yt-vid'\nimport { VideoSelectComponent } from '../video-select/video-select.component';\nimport { UploadAssetService } from '../../services/upload-asset.service'\nimport { AssetService } from '../../services/asset.service'\nimport { filter } from 'rxjs/operators';\nimport { calcPossibleSecurityContexts } from '@angular/compiler/src/template_parser/binding_parser'\n\n\n@Component({\n  selector: 'app-upload-video',\n  templateUrl: './upload-video.component.html',\n  styleUrls: ['./upload-video.component.css'],\n})\nexport class UploadVideoComponent implements OnInit {\n  selected: string;\n  options: any[] = [\n    {name:'single', display:'Single Video', disable:false},\n    {name:'channel', display:'Choose From Channel', disable:false},\n    // {name:'csv',display:'Upload CSV', disable:false}  \n  ];\n  option: string;\n  chosenVids: YouTubeVid[] = [];\n\n\n  form: FormGroup;\n  @Output() isChildFormValid: EventEmitter<boolean> = new EventEmitter<\n    boolean\n  >();\n  @Output() isBulkUpload: EventEmitter<boolean> = new EventEmitter<boolean>();\n  @Output() isBulkVidFilesSelected: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  // Used for upload csv option\n  // @ViewChild('fileInput')\n  // fileInput;\n\n  // file: File | null = null;\n\n  // onClickFileInputButton(): void {\n  //   this.fileInput.nativeElement.click();\n  // }\n  \n  // onChangeFileInput(): void {\n  //   const files: { [key: string]: File } = this.fileInput.nativeElement.files;\n  //   this.file = files[0];\n  // }\n  \n  constructor(\n    private _formBuilder: FormBuilder,\n    private _configService: ConfigService,\n    private _uploadAssetService: UploadAssetService,\n    private _assetService: AssetService,\n    private _vidSelect: MatDialogRef<VideoSelectComponent>,\n    private dialog: MatDialog,\n    ) {}\n\n  ngOnInit(): void {\n    this.form = this._formBuilder.group({\n      videoNameCtrl: ['', [Validators.required]],\n      videoUrlCtrl: ['', [Validators.required]],\n    });\n\n    // Update parent form when the value changes to detect valid and invalid states\n    this.form.valueChanges.subscribe((value) => {\n      if (this.form.get('videoUrlCtrl').value.length) {\n        this.isChildFormValid.emit(!this.form.invalid);\n      }\n    });\n    let yt_creds = this._configService.getYtConfigSettings();\n    if (yt_creds.api_key === ''){\n      this.options[1].disable = true;\n    }\n  }\n\n  openVidSelect(){\n    this._vidSelect = this.dialog.open(VideoSelectComponent, {data:this.chosenVids});\n    this._vidSelect.afterClosed().subscribe((vids)=>{\n      // TODO: concat, not append\n      if (vids != null){\n        this.chosenVids = vids;\n      }\n      if (this.chosenVids.length > 0){\n        this.isBulkVidFilesSelected.emit(true);\n      }\n      else{\n        this.isBulkVidFilesSelected.emit(false);\n      }\n      // fix for if user goes back and then returns\n      this.isBulkUpload.emit(true);\n    })\n  }\n\n  emitIsBulkUpload(){\n    if (this.selected === 'single' ){\n      this.isBulkUpload.emit(false);\n    }\n    else{\n      this.isBulkUpload.emit(true);\n    }\n  }\n\n  uploadBulkVids(){\n    var accountId;\n    this._assetService.activeAccountId$.subscribe((id) =>{\n      accountId = id;\n    })\n    var uploadList = []; \n    for (var item in this.chosenVids){\n      uploadList.push({\n        account:accountId,\n        name:this.chosenVids[item]['name'],\n        url:this.chosenVids[item]['url']\n      })\n    }\n    return this._uploadAssetService.bulkUploadToYt(uploadList)\n  }\n\n  // Reflect valid/invalid state to parent - \"empty space\" is bypassed by the\n  // event emitter previous\n  onBackspace(event) {\n    console.log(event);\n    // This gets triggered before the actual text os deleted\n    // so we want to emit it when there's one character in the textbox\n    if (this.form.get('videoUrlCtrl').value.length == 1) {\n      this.isChildFormValid.emit(false);\n    }\n  }\n}\n","<mat-form-field appearance=\"fill\">\n  <mat-label>Select an option</mat-label>\n  <mat-select [(ngModel)]=\"selected\" (ngModelChange)=\"emitIsBulkUpload()\">\n    <mat-option *ngFor=\"let option of options\" [value]=\"option.name\" [disabled]=\"option.disable\">\n      {{option.display}}\n    </mat-option>\n  </mat-select>\n</mat-form-field>\n<div class=\"single-div\" *ngIf=\"selected==='single'\">\n<form [formGroup]=\"form\">\n  <mat-form-field>\n  <mat-label>Asset Name</mat-label>\n  <input matInput #videoName\n          formControlName=\"videoNameCtrl\"\n          autocomplete=\"off\"\n          required>\n  </mat-form-field>\n  <mat-form-field>\n    <mat-label>YouTube Video Link</mat-label>\n    <input matInput #videoAsset\n\n          formControlName=\"videoUrlCtrl\"\n          autocomplete=\"off\"\n          (keydown.backspace)=\"onBackspace($event)\"\n          required>\n  </mat-form-field>\n</form>\n</div>\n<div class=\"channel-div\" *ngIf=\"selected==='channel'\">\n  <button mat-raised-button (click)=\"openVidSelect()\">Add</button>\n  <p class=\"item-counter\">Total selected videos: {{chosenVids.length}}</p>\n</div>\n\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport {\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n  MatDialog,\n} from '@angular/material/dialog';\nimport { YouTubeVid } from '../../model/yt-vid';\nimport { UploadAssetService } from '../../services/upload-asset.service';\n\n@Component({\n  selector: 'app-video-select',\n  templateUrl: './video-select.component.html',\n  styleUrls: ['./video-select.component.css']\n})\nexport class VideoSelectComponent implements OnInit {\n  videos: YouTubeVid[];\n  form: FormGroup;\n  mySelect: YouTubeVid[] = [];\n  searchText;\n\n  constructor(\n    public dialogRef: MatDialogRef<any>,\n    private _uploadAssetService: UploadAssetService,\n    private formBuilder: FormBuilder,\n    @Inject(MAT_DIALOG_DATA) public data: YouTubeVid[],\n    ) { }\n\n  ngOnInit(): void {\n    this.mySelect = this.data;\n    this.form = this.formBuilder.group({myOtherControl: new FormControl(this.mySelect)})\n    this.dialogRef.updateSize('900px', '450px');\n    this._uploadAssetService.ytVidList$.subscribe((vids)=>{\n      this.videos=vids;\n    })\n    \n  }\n \n  submit(form){\n    this.dialogRef.close(form.value.myOtherControl);\n  }\n}\n","<div class=\"vidSearchField\">\n<mat-form-field floatLabel=never appearance=\"legacy\">\n  <input matInput class=\"form-control\" type=\"text\" name=\"search\" [(ngModel)]=\"searchText\" autocomplete=\"off\" placeholder=\"Search video by name\">\n  <span matPrefix><i class=\"fas fa-search\"></i>&nbsp;</span>\n</mat-form-field>\n</div>\n  <form [formGroup]=\"form\" (ngSubmit)=\"submit(form)\">\n<mat-selection-list class=\"video-list\" #vids formControlName=\"myOtherControl\">\n  <mat-list-option *ngFor=\"let vid of videos | filter:searchText\" [selected]=\"this.mySelect.indexOf(vid) > -1\" [value]=\"vid\">\n    <img matListAvatar src=\"{{vid.thumbnail}}\" alt=\"{{vid.url}}\"/>\n    {{vid.name}}\n    <a href=\"{{vid.url}}\" target=\"_blank\">Link</a>\n  </mat-list-option>\n</mat-selection-list>\n<div class=\"actions\">\n  <button mat-raised-button class=\"add-btn\" type=\"submit\">Add</button>\n  <button mat-raised-button class=\"cancel-btn\" type=\"button\" (click)=\"dialogRef.close()\">Cancel</button>\n</div>\n</form>\n\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}