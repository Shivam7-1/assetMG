{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/account-struct/account-struct.component.ts","webpack:///src/app/account-struct/account-struct.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app-setup/app-setup.component.ts","webpack:///src/app/app-setup/app-setup.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/asset-details/asset-details.component.ts","webpack:///src/app/asset-details/asset-details.component.html","webpack:///src/app/asset-gallery/asset-gallery.component.ts","webpack:///src/app/asset-gallery/asset-gallery.component.html","webpack:///src/app/asset-grid/asset-grid.component.ts","webpack:///src/app/asset-grid/asset-grid.component.html","webpack:///src/app/asset/asset.component.ts","webpack:///src/app/asset/asset.component.html","webpack:///src/app/error-dialog/error-dialog.component.ts","webpack:///src/app/error-dialog/error-dialog.component.html","webpack:///src/app/interceptors/http-error.interceptor.ts","webpack:///src/app/interceptors/loader.interceptor.ts","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/model/asset.ts","webpack:///src/app/model/response.ts","webpack:///src/app/preview/preview.component.ts","webpack:///src/app/preview/preview.component.html","webpack:///src/app/search-bar/search-bar.component.ts","webpack:///src/app/search-bar/search-bar.component.html","webpack:///src/app/services/asset.service.ts","webpack:///src/app/services/authorization.service.ts","webpack:///src/app/services/config.service.ts","webpack:///src/app/services/loader.service.ts","webpack:///src/app/services/reload-app.service.ts","webpack:///src/app/services/upload-asset.service.ts","webpack:///src/app/settings/settings.component.ts","webpack:///src/app/settings/settings.component.html","webpack:///src/app/shared/client-id.pipe.ts","webpack:///src/app/shared/config/credentials/credentials.component.ts","webpack:///src/app/shared/config/credentials/credentials.component.html","webpack:///src/app/shared/config/refresh-code/refresh-code.component.ts","webpack:///src/app/shared/config/refresh-code/refresh-code.component.html","webpack:///src/app/shared/config/yt-conifg/yt-conifg.component.ts","webpack:///src/app/shared/config/yt-conifg/yt-conifg.component.html","webpack:///src/app/shared/error-msg.pipe.ts","webpack:///src/app/shared/loader/loader.component.ts","webpack:///src/app/shared/loader/loader.component.html","webpack:///src/app/shared/material.module.ts","webpack:///src/app/shared/progress-btn/progress-btn.component.ts","webpack:///src/app/shared/progress-btn/progress-btn.component.html","webpack:///src/app/shared/shared.module.ts","webpack:///src/app/shared/upload/upload.component.ts","webpack:///src/app/shared/upload/upload.component.html","webpack:///src/app/toolbar/toolbar.component.ts","webpack:///src/app/toolbar/toolbar.component.html","webpack:///src/app/upload-assets/upload-assets.component.ts","webpack:///src/app/upload-assets/upload-assets.component.html","webpack:///src/app/upload-assets/upload-html/upload-html.component.ts","webpack:///src/app/upload-assets/upload-html/upload-html.component.html","webpack:///src/app/upload-assets/upload-img/upload-img.component.ts","webpack:///src/app/upload-assets/upload-img/upload-img.component.html","webpack:///src/app/upload-assets/upload-text/upload-text.component.ts","webpack:///src/app/upload-assets/upload-text/upload-text.component.html","webpack:///src/app/upload-assets/upload-video/upload-video.component.ts","webpack:///src/app/upload-assets/upload-video/upload-video.component.html","webpack:///src/app/upload-assets/video-select/video-select.component.ts","webpack:///src/app/upload-assets/video-select/video-select.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","$event","stopPropagation","AssetConn","AccountStructComponent","dataService","_changeDetectorRef","_subscriptions","assetConn","displayedColumns$","nonTextAssetCols","textAssetCols","adgroup_sel","headline_sel","description_sel","pageSizeOptions","uploadMode","selectionMade","changes","account","currentValue","previousValue","addAdGroupsToTable","next","getDisplayedColumns","detectChanges","push","activeAssetAdGroups$","subscribe","adGroups","_assetToAdgroups","dataSource","paginator","firstPage","updateRowSelections","activeAsset$","asset","_activeAsset","isTextAsset","activeAsset","type","TEXT","applyFilterPredicate","filter","sub","unsubscribe","_adGroupRows","createAdGroupRows","sort","sortingDataAccessor","item","property","selected","includes","filterPredicate","data","filterKeywords","split","searchFilter","i","length","keyword","String","name","toLowerCase","campaign_name","headlinePerformance","descriptionPerformance","status","campaign_status","performance","cols","showAdGroupColOnly","adgroups","forEach","ag","isEdited","disabled","clear","selectAdGroup","ADGROUP","HEADLINE","DESC","connType","selectAdGroups","get","selectedRows","agRow","some","adGroup","map","performance_type","selArray","getSelectionArray","select","row","start","direction","sortChange","emit","event","filterValue","target","value","trim","clearSelection","toggle","markForCheck","isEmpty","selArr","numSelected","numRows","filteredData","isAllSelected","selectAll","unselectRow","selectRow","isSelected","toggleSelection","updatedRows","rows","getUpdatedRows","agIds","_account","applyFilter","selector","templateUrl","styleUrls","routes","path","component","redirectTo","AppRoutingModule","forRoot","imports","AppSetupComponent","_configService","_authorizationService","_cidPipe","setupDialogRef","generateTokenURL","verificationTitle","verificationText","setupInProgress","isLoggedIn","errorFound","updateSize","loggedIn$","loggedIn","resetState","config","client_customer_id","Number","transform","credentials","form","REMOVE_DASHES","client_id","client_secret","developer_token","selectedIndex","updateConfigCache","setConfigCredentials","subscription","setConfigRefreshCode","getRefreshToken","response","refresh_token","body","config_valid","logout","error","authenticate","JSON","stringify","details","provide","useValue","displayDefaultIndicatorType","selectionChange","forceLogin","providers","AppComponent","title","isLoaded","AppModule","declarations","bootstrap","AssetDetailsComponent","_snackBar","assetType","updateInProgress","updateMessage","isErrorMessage","_","updateFinished$","msg","status_code","SUCCESS","accountAdGroups","resetEditedRows","open","duration","horizontalPosition","verticalPosition","closeAssetDetails","mutateRecords","createMutateRecord","console","log","updateAsset","sortBySelection","mutateObjs","connection","createMutateObj","action","ADD","REMOVE","assetObj","createAssetObj","mutateObj","adgroup","asset_text","text_type_to_assign","VIDEO","video_id","onClose","AssetGalleryComponent","_dataService","_reloadAppService","_setupDialog","openSideNav","showAssetGrid","loadConfigSettings","loadYtConfigSettings","configLoaded$","loaded","getConfigSettings","configDialogRef","disableClose","afterClosed","success","accountAGs$","sideNav","close","opened","assetDetails","loadAdGroups","unselectAsset","undefined","dismiss","openAssetDetails","bind","ASSET_TYPES","label","ALL","IMG","HTML","AssetGridComponent","_uploadDialog","filterOptions","filterStr","filterType","filteredAssets","assetsPerPage$","connect","allAssets$","assets","disconnect","uploadDialogRef","successful","lastPage","activeAssetId","searchStr","filterAssetType","toLocaleLowerCase","indexOf","AssetComponent","router","_previewDialog","_cd","changeAsset","url","_asset","image_url","full_url","link","ErrorDialogComponent","dialogRef","reloadApp","HttpErrorInterceptor","dialog","reloadAppService","request","handle","pipe","ErrorEvent","errorMessage","message","openErrorDialog","width","autoFocus","result","reloadMcc","LoaderInterceptor","loaderService","totalRequests","show","hide","LoginComponent","_authService","btnLabel","btnClick","setLabel","loginOrOut","AssetType","AssetConnType","MutateAction","STATUS","PreviewComponent","tag","document","createElement","src","appendChild","SearchBarComponent","searchPlaceholder","searchCriteria","filterCriteria","searchPlaceholderTxt","searchThis","checkPlaceHolder","AssetService","_http","API_SERVER","location","origin","_activeAccountId$","_activeAccount$","_accountAGs$","_allAssets$","_assetsToAdGroups","_activeAsset$","_activeAssetAdGroups$","_updateFinished$","asObservable","activeAccount$","activeAccountId$","accountId","endpoint","params","cid","toString","accountAGs","asset_id","asset_type","customer_id","getActiveAssetAdGroups","getAssetsToAdGroups","getAllAssets","getAccountAdGroups","assetId","assetAdGroups","Map","AssetConnection","text_type","set","changedAsset","updateArray","load","post","observe","updatedAssets","update","index","txt_asset","PARTIAL_SUCCESS","failures","failure","adgroup_name","error_message","FAIL","waitTime","setTimeout","getValue","concat","providedIn","AuthorizationService","authInstance","refreshToken","retrieveStoredRefreshToken","token","loggedInSubject","pload","gapi","auth2","init","scope","auth","force","storedToken","initGoogleAuth","grantOfflineAccess","access_type","prompt","res","refreshAccessToken","err","getConfigRefreshCode","toPromise","storeRefreshToken","window","localStorage","setItem","getItem","removeItem","removeStoredRefreshToken","login","ConfigService","http","_configSettings","_YtConfigSettings","_configLoaded$","configValid","subscritpion","mcc","clientId","clientSecret","dev_token","redirect_uri","configObj","refreshCode","conf","channel_id","LoaderService","isLoading","ReloadAppService","reloadAccountIds","UploadAssetService","_YtVidList$","ytVidList$","text","textAsset","asset_name","assetName","height","image","vids","uploadList","payload","SettingsComponent","editMode","backdropClick","revertConfigSettings","YtConf","ytCredentials","YTform","setYouTubeConfig","updateYtConfigSettings","onEdit","onYtSubmit","transformAction","ClientIDPipe","newStr","ADD_DASHES","slice","replace","CredentialsComponent","_formBuilder","mcc_cid","group","mccCtrl","required","minLength","maxLength","pattern","clientIDCtrl","clientSecretCtrl","devTokenCtrl","refreshCodeCtrl","setValue","invalid","onBlur","RefreshCodeComponent","workInProgress","openURL","onGenerateToken","YtConifgComponent","fb","api_url","console_url","instructions","ytData","channel","ErrorMsgPipe","sanitizer","newValue","replaceAll","urlStartIdx","urlEndIdx","startTag","substring","endTag","bypassSecurityTrustHtml","LoaderComponent","cdf","loading","MaterialModule","ProgressBtnComponent","isError","SharedModule","useClass","multi","FileType","UploadComponent","_uploadService","fileNames","selectedFileName","invalidDimensionsMsg","isValid","files","file","acceptsType","fileReader","FileReader","img","Image","self","onload","validateDimensions","valid","readAsDataURL","nativeElement","submit","onChange","ToolbarComponent","_settingsDialog","loadAccounts","loadAccountIds","accounts$","getAccountIds","accounts","defaultAccount","changeAccount","isUserInput","source","ytConfig","getYtConfigSettings","yt","mailText","href","feedbackClicked","ErrorMatcher","control","dirty","UploadAssetsComponent","_uploadAssetService","_assetService","assetTypes","isBulkFilesSelected","isChildFormValid","uploadInProgress","uploadMessage","types","TEXT_HEADLINE","TEXT_DESC","canAddAsset","uploadAssetType","beforeClosed","clearUploads","yt_creds","loadYtChannelVideos","isBulkUpload","uploadVideo","uploadBulkVids","addNewAsset","stepper","uploadImg","uploadToServer","uploadHtml","uploadText","isCurrentStepValid","previous","canAdd","assetText","getSelectedAdGroupIDs","upload","addTextAsset","processUploadResponse","buildErrorResponse","uploadAsset","unsuccessfull","onAssetTypeChange","updateCanAddAsset","UploadHtmlComponent","fileTypes","validEvent","updateIsValid","UploadImgComponent","UploadTextComponent","errorMatcher","textCtrl","valueChanges","change","isHeadline","textAssetType","setValidators","onBackspace","UploadVideoComponent","_vidSelect","options","display","disable","chosenVids","isBulkVidFilesSelected","videoNameCtrl","videoUrlCtrl","bulkUploadToYt","emitIsBulkUpload","VideoSelectComponent","formBuilder","mySelect","myOtherControl","videos","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Component,\n  ViewChild,\n  OnChanges,\n  SimpleChanges,\n  Input,\n  ChangeDetectorRef,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort, MatSortable } from '@angular/material/sort';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { AssetAdGroups, Asset, AssetConnType, AssetType } from '../model/asset';\nimport { AssetService } from '../services/asset.service';\nimport { AccountAGs, AdGroup } from '../model/account';\nimport { BehaviorSubject, Subscription } from 'rxjs';\n\n/** checkmark options allows the storing of states for all three checkboxes at the same time\n * adGroup, headlines and description - to be accessed by AssetConn\n */\nexport enum AssetConn {\n  ADGROUP = 0,\n  HEADLINE = 1,\n  DESC = 2,\n}\nexport type checkBoxOptions = Array<boolean>;\n\n/** Each row in the ad groups table is represented by one of these objects */\nexport interface AdGroupRow extends AdGroup {\n  name: string;\n  id: number;\n  status: string;\n  campaign: string;\n  campaign_id: number;\n  campaign_status: string;\n  performance: string;\n  headlinePerformance: string;\n  descriptionPerformance: string;\n\n  /** Every adgroups has to store the edited/disabled state of all three checkmarks  */\n  disabled: checkBoxOptions;\n  isEdited: checkBoxOptions;\n}\n/**\n * This component works in two modes: Update and Upload\n * . Update mode has 3 selection columns (1 for non-text assets and 2 for text assets)\n *   Depending on the selected asset type, the selection columns are visible\n * . Upload mode only makes use of the adgroup selection column\n */\n@Component({\n  selector: 'app-account-struct',\n  templateUrl: './account-struct.component.html',\n  styleUrls: ['./account-struct.component.css'],\n})\nexport class AccountStructComponent implements OnChanges {\n  private _subscriptions: Subscription[] = [];\n\n  /** Memebers that represent the data that will be displayed */\n  private _account: AccountAGs;\n  private _activeAsset: Asset;\n  private _adGroupRows: AdGroupRow[];\n  private _assetToAdgroups: AssetAdGroups;\n  assetConn = AssetConn; /** connection types to be used in the html file */\n  isTextAsset: boolean; /** When this is set, Headline and Description columns appear and main selection column disappears */\n  filter: string;\n\n  displayedColumns$ = new BehaviorSubject<string[]>(null);\n  /** Members that represent the table UI\n   * There are three selectable columns; one for non-text assets\n   * 2 for text assets (Headlines and Descriptions)\n   * the visibility of the columns depends on the asset type\n   */\n  nonTextAssetCols: string[] = ['adgroup-sel', 'adgroup', 'adgroup-enabled', 'performance', 'campaign', 'campaign-enabled'];\n  textAssetCols: string[] = ['headline-sel', 'headline-performance', 'desc-sel', 'desc-performance', 'adgroup', 'adgroup-enabled', 'campaign', 'campaign-enabled'];\n\n  dataSource: MatTableDataSource<AdGroupRow>;\n  adgroup_sel = new SelectionModel<AdGroupRow>(true, []);\n  headline_sel = new SelectionModel<AdGroupRow>(true, []);\n  description_sel = new SelectionModel<AdGroupRow>(true, []);\n  pageSizeOptions = [10, 25, 50];\n\n  @Input()\n  set account(account: AccountAGs) {\n    this._account = account;\n  }\n  get account(): AccountAGs {\n    return this._account;\n  }\n\n  @Input()\n  set activeAsset(asset: Asset) {\n    this._activeAsset = asset;\n  }\n  get activeAsset(): Asset {\n    return this._activeAsset;\n  }\n\n  @Input() uploadMode: boolean = false;\n  @Output() selectionMade: EventEmitter<boolean> = new EventEmitter<boolean>();\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n\n  constructor(\n    private dataService: AssetService,\n    private _changeDetectorRef: ChangeDetectorRef\n  ) {}\n  ngOnChanges(changes: SimpleChanges): void {\n    // Get new adgroups if active account has changed\n    if (\n      changes.account?.currentValue?.id != changes.account?.previousValue?.id\n    ) {\n      this.addAdGroupsToTable();\n    }\n    if (changes.uploadMode) {\n      this.displayedColumns$.next(this.getDisplayedColumns());\n      this.pageSizeOptions = [5, 25, 50];\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  ngOnInit(): void {\n    // Refresh asset to ad group\n    this._subscriptions.push(\n      this.dataService.activeAssetAdGroups$.subscribe((adGroups) => {\n        this._assetToAdgroups = adGroups;\n        if (this.dataSource?.paginator) {\n          this.dataSource.paginator.firstPage();\n        }\n        this.updateRowSelections();\n      })\n    );\n\n    // Refresh the asset details in the table if asset changes\n    this._subscriptions.push(\n      this.dataService.activeAsset$.subscribe((asset) => {\n        if (asset) {\n          this._activeAsset = asset;\n          // Update table according to asset type\n          this.isTextAsset = this.activeAsset.type == AssetType.TEXT;\n          this.displayedColumns$.next(this.getDisplayedColumns());\n          this._changeDetectorRef.detectChanges();\n          this.applyFilterPredicate();\n\n          // Reset the filter if any\n          this.filter = '';\n          this.dataSource.filter = '';\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    for (let sub of this._subscriptions) {\n      sub.unsubscribe();\n    }\n  }\n\n  addAdGroupsToTable() {\n    this._adGroupRows = this.createAdGroupRows();\n    // Assign the data to the data source for the table to render\n    this.dataSource = new MatTableDataSource(this._adGroupRows);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n\n    this.applyFilterPredicate();\n\n    // Adjust sorting criteria\n    this.dataSource.sortingDataAccessor = (item, property) => {\n      switch (property) {\n        case 'adgroup-sel':\n          return this.adgroup_sel.selected.includes(item);\n        case 'headline-sel':\n        case 'desc-sel':\n          return (\n            this.headline_sel.selected.includes(item) ||\n            this.description_sel.selected.includes(item)\n          );\n        default:\n          return item[property];\n      }\n    };\n  }\n\n  applyFilterPredicate(): void {\n    /** Creates the Filter Predicate for searching within the adgroup table.\n     * \n     * A different predicate is made depending on whether the asset is a text asset\n     * or not. This is due to text assets displaying a different set of columns.\n     */\n\n    if (this.isTextAsset) {\n      this.dataSource.filterPredicate = function(data, filter: string): boolean {\n        var filterKeywords = filter.split(' ');\n        var searchFilter = true;\n  \n        for (var i=0; i < filterKeywords.length; i++) {\n          var keyword = filterKeywords[i];\n          searchFilter = searchFilter &&\n            (\n              String(data.name).toLowerCase().includes(keyword) ||\n              String(data.campaign_name).toLowerCase().includes(keyword) ||\n              String(data.headlinePerformance).toLowerCase().includes(keyword) ||\n              String(data.descriptionPerformance).toLowerCase().includes(keyword) ||\n              String(data.status).toLowerCase().includes(keyword) ||\n              String(data.campaign_status).toLowerCase().includes(keyword)\n            );\n        }\n        return searchFilter;\n      };\n    } else {\n      this.dataSource.filterPredicate = function(data, filter: string): boolean {\n        var filterKeywords = filter.split(' ');\n        var searchFilter = true;\n  \n        for (var i=0; i < filterKeywords.length; i++) {\n          var keyword = filterKeywords[i];\n          searchFilter = searchFilter &&\n            (\n              String(data.name).toLowerCase().includes(keyword) ||\n              String(data.campaign_name).toLowerCase().includes(keyword) ||\n              String(data.performance).toLowerCase().includes(keyword) ||\n              String(data.status).toLowerCase().includes(keyword) ||\n              String(data.campaign_status).toLowerCase().includes(keyword)\n            );\n        }\n        return searchFilter;\n      };\n    }\n  }\n\n  getDisplayedColumns(): string[] {\n    let cols = [];\n    this.showAdGroupColOnly()\n      ? (cols = this.nonTextAssetCols)\n      : (cols = this.textAssetCols);\n    return cols;\n  }\n\n  /** Creates adGroup rows for all account adgroups */\n  private createAdGroupRows(): AdGroupRow[] {\n    let adgroups = this.account.adgroups;\n    // Add any additional fields here\n    adgroups.forEach(ag => {\n      (ag as AdGroupRow).isEdited = [false, false, false];\n      (ag as AdGroupRow).disabled = [false, false, false];\n    });\n    return adgroups as AdGroupRow[];\n  }\n\n  updateRowSelections() {\n    // Clear previous selections\n    this.adgroup_sel.clear();\n    this.headline_sel.clear();\n    this.description_sel.clear();\n\n    // Filter the rows that need to be selected\n    if (this._assetToAdgroups) {\n      if (this.showAdGroupColOnly()) {\n        this.selectAdGroup(AssetConn.ADGROUP);\n      } else {\n        this.selectAdGroup(AssetConn.HEADLINE);\n        this.selectAdGroup(AssetConn.DESC);\n      }\n    }\n    this._changeDetectorRef.detectChanges();\n  }\n\n  selectAdGroup(assetConn: AssetConn) {\n    let connType: AssetConnType = AssetConnType.ADGROUP;\n    switch (assetConn) {\n      case AssetConn.HEADLINE:\n        connType = AssetConnType.HEADLINE;\n        break;\n      case AssetConn.DESC:\n        connType = AssetConnType.DESC;\n        break;\n    }\n    let selectAdGroups = this._assetToAdgroups?.get(connType);\n    if (selectAdGroups) {\n      let selectedRows = this._adGroupRows.filter((agRow) =>\n        selectAdGroups.some((adGroup) => agRow.id == adGroup.id)\n      );\n\n      this._adGroupRows.map(agRow => {\n        selectAdGroups.filter(ag => ag.id == agRow.id).forEach(adGroup => {\n          switch (adGroup.performance_type) {\n            case 'adgroup': {\n              agRow.performance = adGroup.performance;\n              break;\n            }\n            case 'headlines': {\n              agRow.headlinePerformance = adGroup.performance;\n              break;\n            }\n            case 'descriptions': {\n              agRow.descriptionPerformance = adGroup.performance;\n              break;\n            }\n            default: {\n              agRow.performance = adGroup.performance;\n              break;\n            }\n          }\n        })\n      });\n\n      let selArray = this.getSelectionArray(assetConn);\n      selArray.select(...selectedRows);\n    }\n  }\n\n  resetEditedRows() {\n    this.dataSource?.data?.forEach((row) => {\n      row.isEdited = [false, false, false];\n    });\n  }\n\n  sortBySelection() {\n    if (this.showAdGroupColOnly()) {\n      this.sort.sort(<MatSortable>{ id: 'adgroup-sel', start: 'desc' });\n    } else {\n      this.sort.sort(<MatSortable>{ id: 'desc-sel', start: 'desc' });\n      this.sort.sort(<MatSortable>{ id: 'headline-sel', start: 'desc' });\n    }\n    this.sort.direction = 'desc';\n    this.dataSource.sort = this.sort;\n    this.dataSource.sort.sortChange.emit();\n  }\n\n  applyFilter(event: Event) {\n    const filterValue = (event.target as HTMLInputElement).value;\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n\n    if (this.dataSource.paginator) {\n      this.dataSource.paginator.firstPage();\n    }\n    \n    this.clearSelection(AssetConn.HEADLINE);\n    this.clearSelection(AssetConn.DESC);\n    this.clearSelection(AssetConn.ADGROUP);\n  }\n\n  toggleSelection(agRow: AdGroupRow, assetConn: AssetConn) {\n    if (agRow) {\n      // Toggle the edited property then update the selection array\n      switch (assetConn) {\n        case AssetConn.HEADLINE:\n          agRow.isEdited[AssetConn.HEADLINE] = !agRow.isEdited[\n            AssetConn.HEADLINE\n          ];\n          break;\n        case AssetConn.DESC:\n          agRow.isEdited[AssetConn.DESC] = !agRow.isEdited[AssetConn.DESC];\n          break;\n        default:\n          agRow.isEdited[AssetConn.ADGROUP] = !agRow.isEdited[\n            AssetConn.ADGROUP\n          ];\n          break;\n      }\n\n      this.getSelectionArray(assetConn).toggle(agRow);\n      this._changeDetectorRef.markForCheck();\n\n      // Now that there is a selection change check if at least one row is selected\n      // This is needed to enable the \"Add Asset\" button in the upload dialog\n      // Note: the check is only made on the adgroup selection array because\n      // the upload button opnly supports one selection column (adgroup_sel)\n      this.selectionMade.emit(!this.adgroup_sel.isEmpty());\n    }\n  }\n\n  /** Whether the number of selected elements matches the total number of rows. */\n  isAllSelected(assetConn: AssetConn) {\n    let selArr = this.getSelectionArray(assetConn);\n    const numSelected = selArr.selected.length;\n    const numRows = this.dataSource.filteredData.length;\n    return numSelected === numRows;\n  }\n\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\n  masterToggle(assetConn: AssetConn) {\n    this.isAllSelected(assetConn)\n      ? this.clearSelection(assetConn)\n      : this.selectAll(assetConn);\n  }\n\n  clearSelection(assetConn: AssetConn) {\n    this.dataSource.data.forEach((row) => this.unselectRow(row, assetConn));\n    this.adgroup_sel.clear();\n    this.headline_sel.clear();\n    this.description_sel.clear();\n  }\n\n  selectAll(assetConn: AssetConn) {\n    this.dataSource.filteredData.forEach((row) => this.selectRow(row, assetConn));\n  }\n\n  getSelectionArray(assetConn: AssetConn) {\n    let selArr;\n    switch (assetConn) {\n      case AssetConn.HEADLINE:\n        selArr = this.headline_sel;\n        break;\n      case AssetConn.DESC:\n        selArr = this.description_sel;\n        break;\n      default:\n        selArr = this.adgroup_sel;\n        break;\n    }\n    return selArr;\n  }\n\n  private selectRow(row: AdGroupRow, assetConn: AssetConn) {\n    let selArr = this.getSelectionArray(assetConn);\n    if (!selArr.isSelected(row)) {\n      this.toggleSelection(row, assetConn);\n    }\n  }\n\n  private unselectRow(row: AdGroupRow, assetConn: AssetConn) {\n    let selArr = this.getSelectionArray(assetConn);\n    if (selArr.isSelected(row)) {\n      this.toggleSelection(row, assetConn);\n    }\n  }\n\n  private showAdGroupColOnly(): boolean {\n    return !this.isTextAsset || this.uploadMode;\n  }\n\n  getUpdatedRows(): AdGroupRow[] {\n    let updatedRows = this._adGroupRows.filter(\n      (agRow) =>\n        (this.showAdGroupColOnly() &&\n          agRow.isEdited[AssetConn.ADGROUP] == true) ||\n        (this.isTextAsset &&\n          (agRow.isEdited[AssetConn.HEADLINE] == true ||\n            agRow.isEdited[AssetConn.DESC] == true))\n    );\n    return updatedRows;\n  }\n\n  getSelectedAdGroupIDs(): number[] {\n    let rows = this.getUpdatedRows();\n    let agIds = [];\n    rows.forEach((row) => agIds.push(row.id));\n\n    return agIds;\n  }\n}\n","<mat-form-field id=\"accountFilter\">\n    <mat-label>Filter</mat-label>\n    <input matInput\n      [(ngModel)]=\"filter\"\n      (keyup)=\"applyFilter($event)\"\n      placeholder=\"Use spaces to separate search terms\"\n      #tableFilterInput>\n</mat-form-field>\n\n<div>\n  <table mat-table [dataSource]=\"dataSource\" matSort>\n\n    <!-- Selection column for non-text assets -->\n    <ng-container\n      *ngIf=\"!isTextAsset\"\n      matColumnDef=\"adgroup-sel\">\n      <th mat-header-cell *matHeaderCellDef>\n        <mat-checkbox class=\"header-checkmark\"\n          (change)=\"$event ? masterToggle(assetConn.ADGROUP) : null\"\n          [checked]=\"adgroup_sel.hasValue() && isAllSelected(assetConn.ADGROUP)\"\n          [indeterminate]=\"adgroup_sel.hasValue() && !isAllSelected(assetConn.ADGROUP)\">\n        </mat-checkbox>\n      </th>\n      <td mat-cell *matCellDef=\"let row\">\n        <i *ngIf=\"row.isEdited[assetConn.ADGROUP]\" class=\"fas fa-pen\"></i>\n        <mat-checkbox\n          [disabled] = \"row.disabled[assetConn.ADGROUP]\"\n          (click)=\"$event.stopPropagation()\"\n          (change)=\"toggleSelection(row, assetConn.ADGROUP)\"\n          [checked]=\"adgroup_sel.isSelected(row)\">\n        </mat-checkbox>\n      </td>\n    </ng-container>\n\n    <!-- Selection column for text assets -->\n    <ng-container\n      matColumnDef=\"headline-sel\">\n      <th mat-header-cell *matHeaderCellDef>\n        <mat-checkbox class=\"header-checkmark\"\n          (change)=\"$event ? masterToggle(assetConn.HEADLINE) : null\"\n          [checked]=\"headline_sel.hasValue() && isAllSelected(assetConn.HEADLINE)\"\n          [indeterminate]=\"headline_sel.hasValue() && !isAllSelected(assetConn.HEADLINE)\">\n        </mat-checkbox>Headline\n      </th>\n      <td mat-cell *matCellDef=\"let row\">\n        <i *ngIf=\"row.isEdited[assetConn.HEADLINE]\" class=\"fas fa-pen\"></i>\n        <mat-checkbox\n          [disabled] = \"row.disabled[assetConn.HEADLINE]\"\n          (click)=\"$event.stopPropagation()\"\n          (change)=\"toggleSelection(row, assetConn.HEADLINE)\"\n          [checked]=\"headline_sel.isSelected(row)\">\n        </mat-checkbox>\n      </td>\n    </ng-container>\n    <!-- Headline Performance Column -->\n    <ng-container *ngIf=\"isTextAsset\" matColumnDef=\"headline-performance\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Headline Performance </th>\n      <td mat-cell *matCellDef=\"let row\"> {{row.headlinePerformance}} </td>\n    </ng-container>\n    <ng-container\n      matColumnDef=\"desc-sel\">\n      <th mat-header-cell *matHeaderCellDef>\n        <mat-checkbox class=\"header-checkmark\"\n          (change)=\"$event ? masterToggle(assetConn.DESC) : null\"\n          [checked]=\"description_sel.hasValue() && isAllSelected(assetConn.DESC)\"\n          [indeterminate]=\"description_sel.hasValue() && !isAllSelected(assetConn.DESC)\">\n        </mat-checkbox>Desc.\n      </th>\n      <td mat-cell *matCellDef=\"let row\">\n        <i *ngIf=\"row.isEdited[assetConn.DESC]\" class=\"fas fa-pen\"></i>\n        <mat-checkbox\n          [disabled] = \"row.disabled[assetConn.DESC]\"\n          (click)=\"$event.stopPropagation()\"\n          (change)=\"toggleSelection(row, assetConn.DESC)\"\n          [checked]=\"description_sel.isSelected(row)\">\n        </mat-checkbox>\n      </td>\n    </ng-container>\n    <!-- Description Performance Column -->\n    <ng-container *ngIf=\"isTextAsset\" matColumnDef=\"desc-performance\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Description Performance </th>\n      <td mat-cell *matCellDef=\"let row\"> {{row.descriptionPerformance}} </td>\n    </ng-container>\n      <!-- Type Column -->\n      <!-- <ng-container matColumnDef=\"type\">\n        <th mat-header-cell *matHeaderCellDef> Type </th>\n        <td mat-cell *matCellDef=\"let row\"> {{row.type}}% </td>\n      </ng-container> -->\n\n      <!-- AdGroup Column -->\n      <ng-container matColumnDef=\"adgroup\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Ad group </th>\n        <td mat-cell *matCellDef=\"let row\"> {{row.name}} </td>\n      </ng-container>\n      <!-- AdGroup Enabled Column -->\n      <ng-container matColumnDef=\"adgroup-enabled\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Active </th>\n        <td mat-cell *matCellDef=\"let row\"> {{row.status}} </td>\n      </ng-container>\n\n      <!-- Performance Column -->\n      <ng-container *ngIf=\"!isTextAsset\" matColumnDef=\"performance\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Performance </th>\n        <td mat-cell *matCellDef=\"let row\"> {{row.performance}} </td>\n      </ng-container>\n\n      <!-- Campaign Column -->\n      <ng-container matColumnDef=\"campaign\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Campaign </th>\n        <td mat-cell *matCellDef=\"let row\"> {{row.campaign_name}} </td>\n      </ng-container>\n      <!-- Campaign Enabled Column -->\n      <ng-container matColumnDef=\"campaign-enabled\">\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Active </th>\n        <td mat-cell *matCellDef=\"let row\"> {{row.campaign_status}} </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns$ | async\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns$ | async\"></tr>\n\n      <!-- Row shown when there is no matching data. -->\n      <tr class=\"mat-row\" *matNoDataRow>\n        <td class=\"mat-cell\" colspan=\"3\">No data matching the filter \"{{tableFilterInput.value}}\"</td>\n      </tr>\n    </table>\n  <mat-paginator\n    [pageSizeOptions]=\"pageSizeOptions\"\n    [showFirstLastButtons]=true>\n  </mat-paginator>\n</div>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AssetGalleryComponent } from './asset-gallery/asset-gallery.component';\n\nconst routes: Routes = [\n  { path: '', component: AssetGalleryComponent},\n  { path: '**', redirectTo: ''}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, OnInit, Inject, ViewChild } from '@angular/core';\nimport { Subscription, from } from 'rxjs';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n} from '@angular/material/dialog';\nimport { ConfigSettings } from '../model/settings';\nimport {\n  StepperSelectionEvent,\n  STEPPER_GLOBAL_OPTIONS,\n} from '@angular/cdk/stepper';\nimport { ConfigService } from '../services/config.service';\nimport { CredentialsComponent } from '../shared/config/credentials/credentials.component';\nimport { ClientIDPipe, transformAction } from '../shared/client-id.pipe';\nimport { AuthorizationService } from '../services/authorization.service';\n\n@Component({\n  selector: 'app-app-setup',\n  templateUrl: './app-setup.component.html',\n  styleUrls: ['./app-setup.component.css'],\n  providers: [\n    {\n      provide: STEPPER_GLOBAL_OPTIONS,\n      useValue: { displayDefaultIndicatorType: false },\n    },\n  ],\n})\nexport class AppSetupComponent implements OnInit {\n  private _subscriptions: Subscription[] = [];\n\n  generateTokenURL: string = '';\n  verificationTitle: string = 'Setup verification';\n  verificationText: string = '';\n  setupInProgress: boolean = true;\n  isLoggedIn: boolean = false;\n  errorFound: boolean = false;\n\n  @ViewChild('credentialsFormGroup') credentials: CredentialsComponent;\n  @ViewChild('refreshCodeFormGroup') refreshCode: CredentialsComponent;\n\n  constructor(\n    private _configService: ConfigService,\n    private _authorizationService: AuthorizationService,\n    private _cidPipe: ClientIDPipe,\n    public setupDialogRef: MatDialogRef<AppSetupComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: ConfigSettings\n  ) {}\n\n  ngOnInit(): void {\n    this.setupDialogRef.updateSize('800px', '520px');\n\n    this._subscriptions.push(\n      this._authorizationService.loggedIn$.subscribe((loggedIn) => {\n        this.isLoggedIn = loggedIn;\n      })\n    )\n  }\n\n  revertChanges() {}\n\n  selectionChange(event: StepperSelectionEvent) {\n    this.resetState();\n    let config: ConfigSettings = {\n      client_customer_id: Number(\n        this._cidPipe.transform(\n          this.credentials.form.get('mccCtrl').value,\n          transformAction.REMOVE_DASHES\n        )\n      ),\n      client_id: this.credentials.form.get('clientIDCtrl').value.trim(),\n      client_secret: this.credentials.form.get('clientSecretCtrl').value.trim(),\n      developer_token: this.credentials.form.get('devTokenCtrl').value.trim(),\n    };\n    if (event.selectedIndex === 1) {\n      // This is the login-to-server section.\n      // Updates the config settings in the Auth service and on the\n      // server-side to ensure correct gapi behaviour.\n      this._configService.updateConfigCache(config);\n      this._configService.setConfigCredentials(\n          config.client_customer_id,\n          config.client_id,\n          config.client_secret,\n          config.developer_token\n        ).subscribe();\n    } else if (event.selectedIndex === 2) {\n      // Update the refresh token - this will trigger a verification of\n      // the credentials in the backend\n      let subscription = this._configService\n        .setConfigRefreshCode(\n          this._authorizationService.getRefreshToken()\n        )\n        .subscribe(\n          (response) => {\n            config.refresh_token = response.body;\n            config.config_valid = true;\n            this._configService.updateConfigCache(config);\n            this.setupInProgress = false;\n            this.verificationText = 'Setup complete!';\n            this._authorizationService.logout();\n            subscription.unsubscribe();\n          },\n          (error) => {\n            this.setupInProgress = false;\n            this.errorFound = true;\n            this.verificationText = 'Setup failed. Invalid credentials.';\n            subscription.unsubscribe();\n          }\n        );\n    }\n  }\n\n  forceLogin() {\n    this.resetState();\n    let subscription = from(this._authorizationService.authenticate(true))\n      .subscribe(\n        (response) => {\n          subscription.unsubscribe();\n        },\n        (error) => {\n          this.errorFound = true;\n          this.verificationText = JSON.stringify(error.details);\n          subscription.unsubscribe();\n        });\n  }\n\n  private resetState() {\n    this.errorFound = false;\n    this.verificationText = '';\n    this.setupInProgress = true;\n  }\n}\n","<h1 mat-dialog-title>Setup AssetMG</h1>\n<div mat-dialog-content>\n  <mat-vertical-stepper linear=true (selectionChange)=\"selectionChange($event)\" #stepper>\n    <mat-step [stepControl]=\"credentialsFormGroup\">\n        <ng-template matStepLabel>Enter your account credentials</ng-template>\n        <app-credentials #credentialsFormGroup\n          [data]=\"this.data\"\n          editMode=\"true\"></app-credentials>\n        <div>\n          <button\n            mat-stroked-button\n            matStepperNext\n            [disabled]=\"!credentialsFormGroup.form.valid\"\n            color=\"primary\"\n            class=\"right-align\">Next</button>\n        </div>\n    </mat-step>\n    <mat-step>\n      <ng-template matStepLabel>Generate a refresh token</ng-template>\n      <p>Click below to login with your service account. Once you've done so, click next.</p>\n      <app-progress-btn\n        btnLabel='Server Login'\n        (btnClick)=\"forceLogin()\">\n      </app-progress-btn>\n      <div class=\"vertical-padding setup-result\">\n        <p [ngClass]=\"{'error-msg': this.errorFound }\">{{verificationText}}</p>\n      </div>\n      <div>\n        <button mat-stroked-button matStepperPrevious color=\"primary\">Back</button>\n        <button mat-stroked-button\n          matStepperNext\n          [disabled]=\"!isLoggedIn\"\n          color=\"primary\"\n          class=\"right-align\">Next</button>\n      </div>\n    </mat-step>\n    <mat-step>\n      <ng-template matStepLabel>{{verificationTitle}}</ng-template>\n      <div class=\"vertical-padding setup-result\">\n        <p [ngClass]=\"{'error-msg': this.errorFound }\">{{verificationText}}</p>\n      </div>\n      <div><app-loader></app-loader></div>\n      <div *ngIf=\"!this.setupInProgress\" mat-dialog-actions>\n        <button mat-stroked-button\n          matStepperPrevious\n          color=\"primary\">Back</button>\n        <button *ngIf=\"!this.errorFound\"\n          mat-stroked-button\n          [mat-dialog-close]=\"true\"\n          color=\"primary\"\n          class=\"right-align\">Done</button>\n      </div>\n    </mat-step>\n  </mat-vertical-stepper>\n</div>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  title = 'Asset Manager';\n  isLoaded = true;\n}\n","<!--The content below is only a placeholder and can be replaced.-->\n<div class = \"asset-mg-window\">\n<router-outlet></router-outlet>\n<div id=\"main-loader\" *ngIf=\"!isLoaded\">\n  <div class=\"wrap\">\n    <div class=\"loading\">\n        <img src=\"assets/gtech_logo.png\">\n        <div class=\"text\">LOADING</div>\n    </div>\n  </div>\n</div>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { AssetGalleryComponent } from './asset-gallery/asset-gallery.component';\nimport { AssetDetailsComponent } from './asset-details/asset-details.component';\nimport { AssetComponent } from './asset/asset.component';\nimport { ToolbarComponent } from './toolbar/toolbar.component';\nimport { SearchBarComponent } from './search-bar/search-bar.component';\nimport { SettingsComponent } from './settings/settings.component';\nimport { AppSetupComponent } from './app-setup/app-setup.component';\nimport { UploadAssetsComponent } from './upload-assets/upload-assets.component';\nimport { UploadTextComponent } from './upload-assets/upload-text/upload-text.component';\nimport { UploadImgComponent } from './upload-assets/upload-img/upload-img.component';\nimport { UploadVideoComponent } from './upload-assets/upload-video/upload-video.component';\nimport { UploadHtmlComponent } from './upload-assets/upload-html/upload-html.component';\nimport { SharedModule } from './shared/shared.module';\nimport { PreviewComponent } from './preview/preview.component';\nimport { YouTubePlayerModule } from '@angular/youtube-player';\nimport { AccountStructComponent } from './account-struct//account-struct.component';\nimport { AssetGridComponent } from './asset-grid/asset-grid.component';\nimport { ErrorDialogComponent } from './error-dialog/error-dialog.component';\nimport { VideoSelectComponent } from './upload-assets/video-select/video-select.component';\nimport { Ng2SearchPipeModule } from 'ng2-search-filter';\nimport { LoginComponent } from './login/login.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    AssetGalleryComponent,\n    AssetDetailsComponent,\n    AssetComponent,\n    ToolbarComponent,\n    SearchBarComponent,\n    SettingsComponent,\n    AppSetupComponent,\n    UploadAssetsComponent,\n    UploadTextComponent,\n    UploadImgComponent,\n    UploadVideoComponent,\n    UploadHtmlComponent,\n    PreviewComponent,\n    AccountStructComponent,\n    AssetGridComponent,\n    ErrorDialogComponent,\n    VideoSelectComponent,\n    LoginComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    SharedModule,\n    YouTubePlayerModule,\n    Ng2SearchPipeModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, Input, OnInit, ViewChild } from '@angular/core';\n\nimport {\n  Asset,\n  MutateRecord,\n  MutateAction,\n  AssetConnType,\n  MutateAsset,\n  AssetType,\n  TextAsset,\n  VideoAsset,\n} from './../model/asset';\nimport { Account } from '../model/account';\nimport { AssetService } from './../services/asset.service';\nimport { STATUS } from '../model/response';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport {\n  AccountStructComponent,\n  AdGroupRow,\n  AssetConn,\n} from '../account-struct/account-struct.component';\nimport { Subscription } from 'rxjs';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { setClassMetadata } from '@angular/core/src/r3_symbols';\n\n@Component({\n  selector: 'app-asset-details',\n  templateUrl: './asset-details.component.html',\n  styleUrls: ['./asset-details.component.css'],\n})\nexport class AssetDetailsComponent implements OnInit {\n  private _subscriptions: Subscription[] = [];\n\n  private _account: Account;\n  private _activeAsset: Asset;\n  assetType = AssetType;\n\n  /** Update button params */\n  updateInProgress: boolean = false;\n  updateMessage: string = '';\n  isErrorMessage: boolean = false;\n\n  get asset(): any {\n    return this._activeAsset;\n  }\n\n  @Input()\n  set account(account: Account) {\n    this._account = account;\n  }\n\n  get account(): Account {\n    return this._account;\n  }\n\n  @Input() closeAssetDetails: Function;\n  @ViewChild('accountAdGroups') accountAdGroups: AccountStructComponent;\n\n  constructor(\n    private dataService: AssetService,\n    private _snackBar: MatSnackBar\n  ) {}\n\n  ngOnInit(): void {\n    this._subscriptions.push(\n      this.dataService.activeAsset$.subscribe((asset) => {\n        this._activeAsset = asset;\n      })\n    );\n\n    this._subscriptions.push(\n      this.dataService.activeAssetAdGroups$.subscribe((_) => {\n        this.updateMessage = '';\n        this.isErrorMessage = false;\n      })\n    );\n\n    this._subscriptions.push(\n      this.dataService.updateFinished$.subscribe((response) => {\n        this.updateInProgress = false;\n        if (response) {\n          this.updateMessage = response.msg;\n          this.isErrorMessage = response.status_code !== STATUS.SUCCESS;\n          if (!this.isErrorMessage) {\n            // Update succeeded - reset the checkboxes edit state\n            this.accountAdGroups.resetEditedRows();\n            this._snackBar.open('Updated Successfully', '', {\n              duration: 2000,\n              horizontalPosition: 'center',\n              verticalPosition: 'bottom',\n            });\n          }\n        }\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    for (let sub of this._subscriptions) {\n      sub.unsubscribe();\n    }\n  }\n\n  onClose() {\n    this.closeAssetDetails();\n  }\n\n  updateAsset() {\n    let mutateRecords: MutateRecord[] = [];\n    this.accountAdGroups.getUpdatedRows().forEach((row) => {\n      mutateRecords.push(...this.createMutateRecord(row));\n    });\n\n    console.log('Mutate: ', mutateRecords);\n\n    if (mutateRecords.length) {\n      this.updateInProgress = true;\n      this.dataService.updateAsset(this.asset, mutateRecords);\n    }\n  }\n\n  loadAdGroups() {\n    this.accountAdGroups.sortBySelection();\n    this.accountAdGroups.resetEditedRows();\n  }\n\n  private createMutateRecord(row: AdGroupRow): MutateRecord[] {\n    // Assume it's a non-text asset unless it is text\n    let selArray: any;\n    let mutateObjs = [];\n    let connection = AssetConnType.ADGROUP;\n\n    if (this.asset.type != this.assetType.TEXT) {\n      selArray = this.accountAdGroups.adgroup_sel;\n      mutateObjs.push(this.createMutateObj(connection, row, selArray));\n    } else {\n      if (row.isEdited[AssetConn.HEADLINE]) {\n        connection = AssetConnType.HEADLINE;\n        selArray = this.accountAdGroups.headline_sel;\n        mutateObjs.push(this.createMutateObj(connection, row, selArray));\n      }\n      if (row.isEdited[AssetConn.DESC]) {\n        connection = AssetConnType.DESC;\n        selArray = this.accountAdGroups.description_sel;\n        mutateObjs.push(this.createMutateObj(connection, row, selArray));\n      }\n    }\n    return mutateObjs;\n  }\n\n  /** Helper function to create the mutate Object */\n  private createMutateObj(\n    connection: AssetConnType,\n    row: AdGroupRow,\n    selArray: SelectionModel<AdGroupRow>\n  ) {\n    // Check if its added or removed\n    let action = selArray.isSelected(row)\n      ? MutateAction.ADD\n      : MutateAction.REMOVE;\n\n    let assetObj = this.createAssetObj(connection);\n    let mutateObj: MutateRecord = {\n      account: this._account.id,\n      adgroup: row.id,\n      action: action,\n      asset: assetObj,\n    };\n\n    return mutateObj;\n  }\n\n  /** Helper function that creates the appropriate asset object */\n  private createAssetObj(connection: AssetConnType) {\n    let assetObj: MutateAsset = {\n      id: this._activeAsset.id,\n      type: <AssetType>this._activeAsset.type,\n    };\n    switch (this._activeAsset.type) {\n      case AssetType.TEXT:\n        assetObj.asset_text = (this._activeAsset as TextAsset).asset_text;\n        assetObj.text_type_to_assign = connection.toLowerCase();\n        break;\n      case AssetType.VIDEO:\n        assetObj.video_id = (this._activeAsset as VideoAsset).video_id;\n        break;\n    }\n    return assetObj;\n  }\n}\n","\n<h1 class=\"primary-color\">Asset Details\n  <button mat-icon-button class=\"close-button\" (click)=\"onClose()\">\n    <mat-icon class=\"close-icon\">close</mat-icon>\n  </button>\n</h1>\n<mat-divider></mat-divider>\n<div class=\"asset-details\">\n  <div class=\"asset-info\">\n    <app-asset [asset]=\"asset\"> </app-asset>\n    <p>\n      <span class=\"primary-color info-header\">{{ asset?.name }}</span>\n      <span [ngSwitch]=\"asset?.type\">\n        <span class=\"img-details\" *ngSwitchCase=\"assetType.IMG\">\n          <span>\n            Dimensions: {{ asset?.image_width }} x {{ asset?.image_height }}\n          </span>\n          <span>Size: {{ asset?.file_size }}</span>\n        </span>\n        <span class=\"video-details\" *ngSwitchCase=\"assetType.VIDEO\">\n          <span>\n            <a href=\"{{ asset?.link }}\" target=\"_blank\">URL</a>\n          </span>\n        </span>\n      </span>\n      <span class=\"primary-color info-header\">Stats</span>\n      <span class=\"asset-stats\">\n        <span>Clicks: {{ asset?.stats?.clicks }}</span>\n        <span>Impressions: {{ asset?.stats?.impressions }}</span>\n        <span>Cost: {{ asset?.stats?.cost }}</span>\n        <span>All conversions: {{ asset?.stats?.all_conversions }}</span>\n      </span>\n    </p>\n  </div>\n  <app-account-struct\n    #accountAdGroups\n    [account]=\"account\"\n    [activeAsset]=\"asset\">\n  </app-account-struct>\n</div>\n<app-progress-btn\n  btnLabel='Update'\n  [btnUpdateMsg]=\"updateMessage\"\n  [isError]=\"isErrorMessage\"\n  [inProgress]=\"updateInProgress\"\n  (btnClick)=\"updateAsset()\">\n</app-progress-btn>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { AssetService } from './../services/asset.service';\nimport { AccountAGs } from './../model/account';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { MatSidenav } from '@angular/material/sidenav';\nimport { ConfigService } from '../services/config.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { AppSetupComponent } from '../app-setup/app-setup.component';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { AssetDetailsComponent } from '../asset-details/asset-details.component';\nimport { ReloadAppService } from '../services/reload-app.service';\nimport { AuthorizationService } from '../services/authorization.service';\n\n@Component({\n  selector: 'app-asset-gallery',\n  templateUrl: './asset-gallery.component.html',\n  styleUrls: ['./asset-gallery.component.css'],\n})\nexport class AssetGalleryComponent implements OnInit {\n  private _subscriptions: Subscription[] = [];\n\n  account: AccountAGs;\n  openSideNav: boolean = false;\n  showAssetGrid: boolean = false;\n\n  @ViewChild('sideNav') sideNav: MatSidenav;\n  @ViewChild('assetDetails') assetDetails: AssetDetailsComponent;\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n  constructor(\n    private _dataService: AssetService,\n    private _configService: ConfigService,\n    private _authorizationService: AuthorizationService,\n    private _reloadAppService: ReloadAppService,\n    private _setupDialog: MatDialog,\n    private _snackBar: MatSnackBar\n  ) {}\n\n  getConfigService(): ConfigService {\n    return this._configService;\n  }\n\n  ngOnInit(): void {\n    this._configService.loadConfigSettings();\n    this._configService.loadYtConfigSettings();\n    this._configService.configLoaded$.subscribe((loaded) => {\n      let config = this._configService.getConfigSettings();\n      if (!loaded && config) {\n        const configDialogRef = this._setupDialog.open(AppSetupComponent, {\n          disableClose: true,\n          data: config,\n        });\n\n        configDialogRef.afterClosed().subscribe((success) => {\n          if (success) {\n            console.log('Credentials Valid')\n          }\n        });\n      }\n    });\n\n    this._subscriptions.push(\n      this._authorizationService.loggedIn$.subscribe((loggedIn) => {\n        if (loggedIn) {\n          this.showAssetGrid = true;\n        } else {\n          this.showAssetGrid = false;\n        }\n      })\n    )\n\n    this._subscriptions.push(\n      this._dataService.accountAGs$.subscribe((account) => {\n        this.account = account;\n        this.sideNav?.close();\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    for (let sub of this._subscriptions) {\n      sub.unsubscribe();\n    }\n  }\n\n  /** Binder functions to enable calling from child */\n  get openAssetDetailsFunc() {\n    return this.openAssetDetails.bind(this);\n  }\n\n  get closeAssetDetailsFunc() {\n    return this.closeAssetDetails.bind(this);\n  }\n\n\n  /** Functions that may need to be called from a child component */\n  openAssetDetails() {\n    this.openSideNav = true;\n    if (!this.sideNav.opened) {\n      this.assetDetails.loadAdGroups();\n      this.sideNav.open();\n    }\n  }\n\n  closeAssetDetails() {\n    this.sideNav.close();\n    this._dataService.unselectAsset();\n  }\n\n  private openSnackBar() {\n    this._snackBar.open(\n      'Loading AssetMG. This may take a few mintues... ',\n      '',\n      {\n        duration: undefined,\n        horizontalPosition: 'center',\n        verticalPosition: 'bottom',\n      }\n    );\n  }\n\n  private openSnackBarStructFail() {\n    this._snackBar.open('Failed Loading AssetMG', '', {\n      duration: undefined,\n      horizontalPosition: 'center',\n      verticalPosition: 'bottom',\n    });\n  }\n\n  private dismissSnackBar() {\n    this._snackBar.dismiss();\n  }\n}\n","  <app-toolbar class=\"toolbar\" [loadAccounts]=\"this.getConfigService().configValid\"></app-toolbar>\n  <app-loader></app-loader>\n  <mat-sidenav-container *ngIf=\"this.getConfigService().configValid\">\n    <mat-sidenav #sideNav\n      class=\"asset-details-container mat-elevation-z8\"\n      position=\"end\"\n      mode=\"over\"\n      closed>\n      <app-asset-details #assetDetails\n        [account]=\"account\"\n        [closeAssetDetails]=\"closeAssetDetailsFunc\">\n      </app-asset-details>\n    </mat-sidenav>\n    <mat-sidenav-content>\n      <ng-template [ngIf]=\"showAssetGrid\">\n        <app-asset-grid \n          [account]=\"account\"\n          [openAssetDetails]=\"openAssetDetailsFunc\"\n          [closeAssetDetails]=\"closeAssetDetailsFunc\"\n          [hidden]>\n        </app-asset-grid>\n      </ng-template>\n\n      <ng-template [ngIf]=\"!showAssetGrid\">\n        <div class=\"pad-div\">\n          <mat-card>Please login to view assets.</mat-card>\n        </div>\n      </ng-template>\n    </mat-sidenav-content>\n  </mat-sidenav-container>\n","import {\n  Component,\n  OnInit,\n  ViewChild,\n  EventEmitter,\n  Output,\n  Input,\n  HostListener,\n} from '@angular/core';\nimport { AssetType, Asset, TextAsset } from '../model/asset';\nimport { Subscription, Observable } from 'rxjs';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { AssetService } from '../services/asset.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { UploadAssetsComponent } from '../upload-assets/upload-assets.component';\n\nconst ASSET_TYPES = [\n  {\n    label: 'All Assets',\n    value: AssetType.ALL,\n  },\n  {\n    label: 'Image',\n    value: AssetType.IMG,\n  },\n  {\n    label: 'Text',\n    value: AssetType.TEXT,\n  },\n  {\n    label: 'Video',\n    value: AssetType.VIDEO,\n  },\n  {\n    label: 'HTML',\n    value: AssetType.HTML,\n  },\n];\n\n@Component({\n  selector: 'app-asset-grid',\n  templateUrl: './asset-grid.component.html',\n  styleUrls: ['./asset-grid.component.css'],\n})\nexport class AssetGridComponent implements OnInit {\n  private _subscriptions: Subscription[] = [];\n\n  activeAssetId: number;\n  assets: Asset[];\n  filteredAssets: Asset[];\n\n  filterOptions = ASSET_TYPES;\n  filterStr: string = '';\n  filterType: AssetType = AssetType.ALL;\n\n  @Input() account: Account;\n  @Input() openAssetDetails: Function;\n  @Input() closeAssetDetails: Function;\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n  assetsPerPage$: Observable<any>;\n  dataSource: MatTableDataSource<Asset> = new MatTableDataSource<Asset>(\n    this.filteredAssets\n  );\n\n  constructor(\n    private _dataService: AssetService,\n    private _uploadDialog: MatDialog\n  ) {}\n\n  ngOnInit(): void {\n    this.assetsPerPage$ = this.dataSource.connect();\n\n    this._subscriptions.push(\n      this._dataService.allAssets$.subscribe((assets) => {\n        this.assets = assets;\n        this.filteredAssets = assets;\n        if (this.filteredAssets && this.assets) {\n          this.dataSource.data = this.filteredAssets;\n          this.dataSource.paginator = this.paginator;\n        }\n      })\n    );\n  }\n  ngOnDestroy() {\n    for (let sub of this._subscriptions) {\n      sub.unsubscribe();\n    }\n    if (this.dataSource) {\n      this.dataSource.disconnect();\n    }\n  }\n\n  uploadAsset() {\n    // Make sure to unselect any assets to avoid loading the campaign selection\n    // of any previously selected assets\n    this.unselectAsset();\n\n    const uploadDialogRef = this._uploadDialog.open(UploadAssetsComponent, {\n      disableClose: true,\n      data: this.account,\n    });\n\n    uploadDialogRef.afterClosed().subscribe((response) => {\n      if (response?.successful) {\n        this.paginator.lastPage();\n      }\n    });\n  }\n\n  selectAsset(id) {\n    this.activeAssetId = id;\n    this.openAssetDetails(id);\n  }\n\n  unselectAsset() {\n    this.activeAssetId = null;\n    this.closeAssetDetails();\n  }\n\n  /** Close side nav when escape is pressed */\n  @HostListener('document:keydown.escape', ['$event']) onKeydownHandler(\n    event: KeyboardEvent\n  ) {\n    this.unselectAsset();\n  }\n\n  filterByStr(searchStr) {\n    this.filterStr = searchStr;\n    this.filteredAssets = this.applyFilter();\n    this.dataSource.data = this.filteredAssets;\n  }\n\n  filterByType(filterAssetType) {\n    this.filterType = <AssetType>filterAssetType;\n    this.filteredAssets = this.applyFilter();\n    this.dataSource.data = this.filteredAssets;\n  }\n\n  /** Resturns assets with the search string their name or\n   * in their text (for text assets) */\n  private applyFilter(): Asset[] {\n    // Nothing to filter - return full set of assets\n    if (!this.filterStr.length && this.filterType == AssetType.ALL) {\n      return this.assets;\n    }\n\n    // Filter by name and/or type\n    let searchStr = this.filterStr.toLocaleLowerCase();\n    return this.assets.filter(\n      (asset: Asset) =>\n        // Filter assets by string\n        (!searchStr.length ||\n          asset.name.toLocaleLowerCase().indexOf(searchStr) != -1 ||\n          (asset.type === AssetType.TEXT &&\n            (asset as TextAsset).asset_text\n              .toLocaleLowerCase()\n              .indexOf(searchStr) != -1)) &&\n        // filter assets by type\n        (this.filterType === AssetType.ALL || asset.type === this.filterType)\n    );\n  }\n}\n","<app-search-bar *ngIf=\"filteredAssets\"\n  searchPlaceholderTxt=\"Search your assets\"\n  [filterOptions]=\"filterOptions\"\n  (searchCriteria)=\"filterByStr($event)\"\n  (filterCriteria)=\"filterByType($event)\">\n</app-search-bar>\n<div class = \"grid-layout\">\n  <div *ngIf=\"filteredAssets\" class=\"placeholder-card\">\n    <button mat-mini-fab color=\"accent\"\n      aria-label=\"Add Asset\"\n      (click)=\"uploadAsset()\">\n      <mat-icon>add</mat-icon>\n    </button>\n    <p>Add Assets</p>\n  </div>\n  <app-asset\n    *ngFor=\"let asset of assetsPerPage$ | async\"\n    [asset] = \"asset\"\n    [selectedAssetId] = \"activeAssetId\"\n    (click)=\"selectAsset(asset.id)\"\n    >\n  </app-asset>\n</div>\n<mat-paginator\n  [pageSizeOptions]=\"[25, 50, 100]\"\n  [showFirstLastButtons]=true></mat-paginator>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Component,\n  Input,\n  OnInit,\n  ChangeDetectorRef,\n} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { MatDialog } from '@angular/material/dialog';\n\nimport { Asset, AssetType, ImgAsset, VideoAsset } from './../model/asset';\nimport { AssetService } from './../services/asset.service';\nimport { PreviewComponent } from '../preview/preview.component';\n\n@Component({\n  selector: 'app-asset',\n  templateUrl: './asset.component.html',\n  styleUrls: ['./asset.component.css'],\n})\nexport class AssetComponent implements OnInit {\n  assetType = AssetType;\n  private _asset: Asset;\n  @Input()\n  set asset(asset: any) {\n    this._asset = asset;\n  }\n  get asset(): any {\n    return this._asset;\n  }\n\n  @Input()\n  selectedAssetId: number;\n\n  constructor(\n    private router: Router,\n    private dataService: AssetService,\n    private _previewDialog: MatDialog,\n    private _cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {}\n\n  openDetails() {\n    this.dataService.changeAsset(this.asset);\n  }\n\n  openPreview() {\n    let url = '';\n    if (this._asset.type === AssetType.IMG) {\n      url = (this._asset as ImgAsset).image_url;\n    } else if (this._asset.type === AssetType.VIDEO) {\n      let full_url = (this._asset as VideoAsset).link.split('=');\n      url = full_url[full_url.length - 1];\n    }\n    this._previewDialog.open(PreviewComponent, {\n      data: {\n        type: this.asset.type,\n        url: url,\n      },\n    });\n  }\n}\n","<div class=\"asset-card\" [ngSwitch]=\"asset?.type\">\n  <mat-card *ngSwitchCase=\"assetType.IMG\"\n            [ngClass]=\"{'accent-border': selectedAssetId === asset.id }\"\n            (click)=\"openDetails()\">\n    <mat-card-subtitle><i class=\"far fa-image\"></i> {{asset.name}} </mat-card-subtitle>\n    <mat-card-content>\n      <img mat-card-image [src]= 'asset.image_url' alt=\"\">\n      <button mat-icon-button (click)=\"openPreview()\">\n        <mat-icon>pageview</mat-icon>\n    </button>\n    </mat-card-content>\n  </mat-card>\n  <mat-card *ngSwitchCase=\"assetType.VIDEO\"\n            [ngClass]=\"{'accent-border': selectedAssetId === asset.id }\"\n            (click)=\"openDetails()\">\n    <mat-card-subtitle><i class=\"fab fa-youtube\"></i> {{asset.name}} </mat-card-subtitle>\n    <mat-card-content>\n      <img mat-card-image [src]= 'asset.image_url' alt=\"\">\n      <button mat-icon-button (click)=\"openPreview()\">\n        <mat-icon>pageview</mat-icon>\n      </button>\n    </mat-card-content>\n  </mat-card>\n  <mat-card *ngSwitchCase=\"assetType.TEXT\"\n            [ngClass]=\"{'accent-border': selectedAssetId === asset.id }\"\n            (click)=\"openDetails()\">\n    <mat-card-subtitle><i class=\"fas fa-font\"></i> Text </mat-card-subtitle>\n    <mat-card-content>\n        <p [ngClass]=\"{'fit-more-text': asset.asset_text.length >= 60 }\">\n          {{asset.asset_text}}\n        </p>\n    </mat-card-content>\n  </mat-card>\n  <mat-card *ngSwitchCase=\"assetType.HTML\"\n            [ngClass]=\"{'accent-border': selectedAssetId === asset.id }\"\n            (click)=\"openDetails()\">\n    <mat-card-subtitle><i class=\"fab fa-html5\"></i> {{asset.name}} </mat-card-subtitle>\n    <mat-card-content>\n      <img mat-card-image src= \"./../../assets/html5_logo.png\" alt=\"\">\n    </mat-card-content>\n  </mat-card>\n</div>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\nexport interface DialogData {\n  errorMessage: string;\n}\n\n@Component({\n  selector: 'error-dialog',\n  templateUrl: 'error-dialog.component.html',\n  styleUrls: ['./error-dialog.component.css'],\n})\nexport class ErrorDialogComponent {\n  updateMessage: string;\n  isErrorMessage: boolean;\n  updateInProgress: boolean;\n\n  constructor(\n    public dialogRef: MatDialogRef<ErrorDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData\n  ) {}\n\n  reloadApp() {\n    this.updateInProgress = true;\n    this.dialogRef.close({ success: true });\n  }\n}\n","<h2 mat-dialog-title>Error</h2>\n<p class=\"error-message\"[innerHtml] = \"data.errorMessage | styleErrorMsg\"></p>\n<app-progress-btn\n  btnLabel='Retry'\n  [btnUpdateMsg]=\"updateMessage\"\n  [isError]=\"isErrorMessage\"\n  [inProgress]=\"updateInProgress\"\n  (btnClick)=\"reloadApp()\">\n</app-progress-btn>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  HttpEvent,\n  HttpInterceptor,\n  HttpHandler,\n  HttpRequest,\n  HttpErrorResponse,\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport { ErrorDialogComponent } from '../error-dialog/error-dialog.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ReloadAppService } from '../services/reload-app.service';\n\n@Injectable()\nexport class HttpErrorInterceptor implements HttpInterceptor {\n  constructor(\n    public dialog: MatDialog,\n    private reloadAppService: ReloadAppService\n  ) {}\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error.error instanceof ErrorEvent) {\n          // client-side error\n          let errorMessage = `Client Side Error: ${error.error.message}`;\n          return throwError(errorMessage);\n        }\n        if (error.status === 403) {\n          this.openErrorDialog(error.error);\n        }\n        // server-side error\n        return throwError(error);\n      })\n    );\n  }\n\n  openErrorDialog(errorMessage) {\n    const dialogRef = this.dialog.open(ErrorDialogComponent, {\n      width: '700px',\n      disableClose: true,\n      autoFocus: false,\n      data: { errorMessage: errorMessage },\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      if (result.success) {\n        this.reloadAppService.reloadMcc.next(true);\n      }\n    });\n  }\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Injectable } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport { LoaderService } from '../services/loader.service';\n@Injectable()\nexport class LoaderInterceptor implements HttpInterceptor {\n  private totalRequests = 0;\n\n  constructor(public loaderService: LoaderService) {}\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    this.totalRequests++;\n    this.loaderService.show();\n    \n    return next.handle(req).pipe(\n      finalize(() => {\n        this.totalRequests--;\n        if (this.totalRequests === 0) {\n          this.loaderService.hide();\n        }\n      })\n    );\n  }\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Component,\n  OnInit,\n  EventEmitter,\n  Output,\n  HostListener,\n  Input,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { AuthorizationService } from '../services/authorization.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  @Input() btnLabel = \"\";\n  private _subscriptions: Subscription[] = [];\n\n  constructor(private _authService: AuthorizationService) {}\n  \n  ngOnInit(): void {\n    this._subscriptions.push(\n      this._authService.loggedIn$.subscribe((loggedIn) => {\n        this.setLabel(loggedIn);\n      })\n    );\n  }\n\n  ngOnDestroy() {\n    for (let sub of this._subscriptions) {\n      sub.unsubscribe();\n    }\n  }\n\n  @Output() btnClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  @HostListener('click', ['$event'])\n  public onClick(event: MouseEvent) {\n    this.btnClick.emit(event);\n  }\n\n  public setLabel(loggedIn) {\n    if (loggedIn) {\n      this.btnLabel = \"Logout\";\n    } else {\n      this.btnLabel = \"Login\";\n    }\n  }\n\n  public loginOrOut() {\n    this._authService.loginOrOut();\n  }\n}\n","<button\nmat-flat-button\ncolor=\"primary\"\n(click)=\"loginOrOut()\"\n>\n{{btnLabel}}\n</button>","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Different kinds of assets as returned from API */\nexport enum AssetType {\n  TEXT = 'TEXT',\n  TEXT_HEADLINE = 'headlines',\n  TEXT_DESC = 'descriptions',\n  IMG = 'IMAGE',\n  VIDEO = 'YOUTUBE_VIDEO',\n  HTML = 'MEDIA_BUNDLE',\n  ALL = 'ALL', // Mainly used for filtering\n}\n\n/** Different kind of adgroups connections to assets */\nexport enum AssetConnType {\n  ADGROUP = 'AdGroup',\n  HEADLINE = 'Headlines',\n  DESC = 'Descriptions',\n}\n\nexport enum MutateAction {\n  ADD = 'ADD',\n  REMOVE = 'REMOVE',\n}\n\nexport type AssetAdGroups = Map<AssetConnType, AssetAdGroup[]>;\n\ninterface AssetAdGroup {\n  id: number;\n  performance: string;\n  performance_type: string;\n}\n\ninterface AssetStats {\n  clicks: number;\n  all_conversions: number;\n  impressions: number;\n  cost: number;\n}\n\ninterface AssetBase {\n  id: number;\n  type: string;\n  name?: string;\n  adgroups?: AssetAdGroup[];\n  stats?: AssetStats;\n  performance?: string;\n}\n\nexport interface ImgAsset extends AssetBase {\n  image_url: string;\n  file_size?: number;\n  image_height?: number;\n  image_width?: number;\n}\n\nexport interface TextAsset extends AssetBase {\n  asset_text: string;\n  text_type?: string;\n}\n\nexport interface VideoAsset extends AssetBase {\n  image_url: string;\n  video_id: string;\n  link: string;\n}\n\nexport interface HtmlAsset extends AssetBase {}\nexport type Asset = ImgAsset | TextAsset | VideoAsset | HtmlAsset;\nexport interface MutateAsset {\n  id: number;\n  type: AssetType;\n  asset_text?: string; // for TEXT\n  text_type_to_assign?: string; // for TEXT - headlines or description\n  video_id?: string; // for VIDEO\n}\n\nexport interface MutateRecord {\n  account: number;\n  adgroup: number;\n  action: MutateAction;\n  asset: MutateAsset;\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Asset } from './asset';\n\nexport enum STATUS {\n  SUCCESS = 200,\n  PARTIAL_SUCCESS = 206,\n  FAIL = 500,\n}\n\n/** Interface for the API response */\nexport interface UpdateResponse {\n  status_code: STATUS;\n  msg: string;\n  assets: Asset[];\n}\n\nexport interface UploadResponse {\n  //  status_code: STATUS;\n  asset?: Asset;\n  successfull?: number[];\n  unsuccessfull?: number[];\n  msg?: string;\n}\n\nexport interface ValidationResponse{\n  valid: boolean\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { inject } from '@angular/core/testing';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Asset, AssetType, ImgAsset, VideoAsset } from './../model/asset';\n\n@Component({\n  selector: 'app-preview',\n  templateUrl: './preview.component.html',\n  styleUrls: ['./preview.component.css']\n})\nexport class PreviewComponent implements OnInit {\n  assetType = AssetType;\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) { }\n\n  ngOnInit() {\n    const tag = document.createElement('script');\n    tag.src = 'https://www.youtube.com/iframe_api';\n    document.body.appendChild(tag);\n  }\n\n}\n","<div [ngSwitch]=\"data.type\">\n<div *ngSwitchCase=\"assetType.IMG\">\n    <img [src]=\"data.url\">\n</div>\n<div *ngSwitchCase=\"assetType.VIDEO\">\n    <youtube-player [videoId]=\"data.url\"></youtube-player>\n</div>\n</div>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, OnInit, EventEmitter, Input, Output } from '@angular/core';\nimport { AssetType } from '../model/asset';\n\n@Component({\n  selector: 'app-search-bar',\n  templateUrl: './search-bar.component.html',\n  styleUrls: ['./search-bar.component.css'],\n})\nexport class SearchBarComponent implements OnInit {\n  searchPlaceholder: string = '';\n  searchStr: string = '';\n  filterStr: string = <string>AssetType.ALL;\n\n  @Input() searchPlaceholderTxt;\n  @Input() filterOptions;\n  @Output()\n  searchCriteria = new EventEmitter<String>();\n  @Output() filterCriteria = new EventEmitter<String>();\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.searchPlaceholder = this.searchPlaceholderTxt;\n  }\n\n  checkPlaceHolder() {\n    if (this.searchPlaceholder) {\n      this.searchPlaceholder = null;\n      return;\n    } else {\n      this.searchPlaceholder = this.searchPlaceholderTxt;\n      return;\n    }\n  }\n\n  searchThis() {\n    this.searchCriteria.emit(this.searchStr);\n  }\n\n  applyFilter() {\n    this.filterCriteria.emit(this.filterStr);\n  }\n}\n","<mat-form-field id= \"searchField\" floatLabel=never appearance=\"legacy\">\n  <input matInput\n    type=\"text\"\n    autocomplete=\"off\"\n    [(ngModel)]=\"searchStr\"\n    (input)=\"searchThis()\"\n    (focus)=\"checkPlaceHolder()\"\n    (blur)=\"checkPlaceHolder()\">\n    <mat-placeholder class=\"placeholder\">{{searchPlaceholder}}</mat-placeholder>\n    <span matPrefix><i class=\"fas fa-search\"></i>&nbsp;</span>\n</mat-form-field>\n<mat-form-field id=\"filterBtn\">\n   <mat-select matNativeControl\n    [(ngModel)]=\"filterStr\"\n    (selectionChange)=\"applyFilter()\">\n    <mat-option *ngFor=\"let option of filterOptions\" [value]=\"option.value\">\n      {{option.label}}\n    </mat-option>\n  </mat-select>\n</mat-form-field>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/operator/catch';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport {\n  Asset,\n  TextAsset,\n  AssetAdGroups,\n  AssetConnType,\n  AssetType,\n  MutateRecord,\n} from './../model/asset';\nimport { UpdateResponse, STATUS } from '../model/response';\nimport { Account, AccountAGs } from './../model/account';\nimport { AuthorizationService } from '../services/authorization.service'\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AssetService {\n  private API_SERVER = location.origin;\n\n  /** Gets updated when the account changes */\n  private _activeAccountId$ = new BehaviorSubject<number>(null);\n  private _activeAccount$ = new BehaviorSubject<Account>(null);\n  private _accountAGs$ = new BehaviorSubject<AccountAGs>(null);\n  private _allAssets$ = new BehaviorSubject<Asset[]>(null);\n  private _assetsToAdGroups: Asset[] = [];\n\n  /** Gets updated when an asset is selected */\n  private _activeAsset$ = new BehaviorSubject<Asset>(null);\n  private _activeAssetAdGroups$ = new BehaviorSubject<AssetAdGroups>(null);\n\n  /** Gets updated when the update Asset is called */\n  private _updateFinished$ = new BehaviorSubject<UpdateResponse>(null);\n\n  allAssets$ = this._allAssets$.asObservable();\n  activeAccount$ = this._activeAccount$.asObservable();\n  activeAccountId$ = this._activeAccountId$.asObservable();\n  accountAGs$ = this._accountAGs$.asObservable();\n  activeAsset$ = this._activeAsset$.asObservable();\n  activeAssetAdGroups$ = this._activeAssetAdGroups$.asObservable();\n  updateFinished$ = this._updateFinished$.asObservable();\n\n  constructor(\n    private _http: HttpClient,\n    private _authService: AuthorizationService\n    ) {}\n\n  private getAllAssets(accountId: number) {\n    // Reset the asset observable till the http request is made\n    this._allAssets$.next(null);\n    // Call the API and update the asset observable\n    const endpoint = this.API_SERVER + '/accounts-assets/';\n    let subscription = this._http\n      .get<Asset[]>(endpoint, { params: { cid: accountId?.toString() } })\n      .subscribe((assets) => {\n        this._allAssets$.next(assets);\n        subscription.unsubscribe();\n      });\n  }\n\n\n  private getAccountAdGroups(accountId: number) {\n    const endpoint = this.API_SERVER + '/account-ag-struct';\n    let subscription = this._http\n      .get<AccountAGs>(endpoint, { params: { cid: accountId?.toString() } })\n      .subscribe((accountAGs) => {\n        this._accountAGs$.next(accountAGs);\n        subscription.unsubscribe();\n      });\n  }\n\n  /** Loads a specific asset to adgroups mapping */\n  private getAssetsToAdGroups(asset_id, asset_type) {\n    let accountId\n    this.activeAccountId$.subscribe((id) =>{\n      accountId = id;\n    })\n    const endpoint = this.API_SERVER + '/assets-to-ag/';\n    let subscription = this._http.get<Asset[]>(endpoint,\n       { params: { \n         asset_id: asset_id,\n         asset_type: asset_type,\n         customer_id: JSON.stringify(accountId)\n         } \n       })\n    .subscribe((assets) => {\n      this._assetsToAdGroups = assets;\n      this._activeAssetAdGroups$.next(this.getActiveAssetAdGroups(asset_id));\n      subscription.unsubscribe();\n    });\n  }\n\n  getAccountIds(): Observable<Account[]> {\n    const endpoint = this.API_SERVER + '/accounts/';\n    return this._http.get<Account[]>(endpoint);\n  }\n\n  changeAsset(asset: Asset) {\n    this._activeAsset$.next(asset);\n    if (asset) {\n      this.getAssetsToAdGroups(asset.id, asset.type)\n      this._activeAssetAdGroups$.next(this.getActiveAssetAdGroups(asset.id));\n    } else {\n      this._activeAssetAdGroups$.next(null);\n    }\n  }\n\n  unselectAsset() {\n    this.changeAsset(null);\n  }\n\n  changeAccount(accountId: number) {\n    this._activeAccountId$.next(accountId);\n    this.getAllAssets(accountId);\n    this.getAccountAdGroups(accountId);\n    this.changeAsset(null);\n  }\n\n  getActiveAssetAdGroups(assetId: number) {\n    let assetAdGroups: AssetAdGroups = new Map();\n    this._assetsToAdGroups.filter(function (asset) {\n      if (asset.id == assetId) {\n        let AssetConnection = AssetConnType.ADGROUP;\n        if (asset.type == AssetType.TEXT) {\n          (asset as TextAsset).text_type.toLowerCase() ==\n          AssetConnType.HEADLINE.toLowerCase()\n            ? (AssetConnection = AssetConnType.HEADLINE)\n            : (AssetConnection = AssetConnType.DESC);\n        }\n        assetAdGroups.set(AssetConnection, asset.adgroups);\n      }\n    });\n    return assetAdGroups;\n  }\n\n  updateAsset(changedAsset: Asset, updateArray: MutateRecord[]) {\n    const endpoint = this.API_SERVER + '/mutate-ad/';\n    var refresh_token = this._authService.getRefreshToken()\n    var load = {'refresh_token':refresh_token, 'data':updateArray}\n    let subscription = this._http\n      .post(endpoint, load, { observe: 'response' })\n      .subscribe(\n        (response) => {\n          // update the asset to adgroup cache\n          let updatedAssets: Asset[] = [];\n          for (let update of <any[]>response.body) {\n            updatedAssets.push(update.asset);\n            if (update.index) {\n              // This is a non-text asset\n              this._assetsToAdGroups[update.index] = update.asset;\n            } else if (update.asset?.length) {\n              // Text asset, so index can be {found in the assets array (headlines and descriptions)\n              for (let txt_asset of update.asset) {\n                if (txt_asset.index) {\n                  this._assetsToAdGroups[txt_asset.index] = txt_asset.asset;\n                } else {\n                  this._assetsToAdGroups.push(txt_asset.asset);\n                }\n              }\n            } else {\n              this._assetsToAdGroups.push(update.asset);\n            }\n          }\n          // Update the new selection\n          this._activeAssetAdGroups$.next(\n            this.getActiveAssetAdGroups(changedAsset.id)\n          );\n          // Updated the caller that the API is done\n          let msg = '';\n          if (response.status === STATUS.PARTIAL_SUCCESS) {\n            let failures =\n              (<any[]>response.body)[0].failures ||\n              (<any>response.body).failures;\n            if (failures) {\n              for (let failure of failures) {\n                msg += `Update failed for the ad group \"${failure.adgroup.adgroup_name}\" of campaign \"${failure.adgroup.campaign_name}\":\n                    ${failure.error_message}<br/>`;\n              }\n            } else {\n              msg = 'Update failed for some ad groups.';\n            }\n          }\n          this._updateFinished$.next({\n            status_code: response.status,\n            msg: msg,\n            assets: updatedAssets,\n          });\n          subscription.unsubscribe();\n        },\n        (error) => {\n          // API call failed - Returned status 500\n          let errorMessage = '';\n          let failures = error.error[0]?.failures || error.error?.failures;\n          if (failures) {\n            for (let failure of failures) {\n              errorMessage += `Update failed for the ad group \"${failure.adgroup.adgroup_name}\" from campaign \"${failure.adgroup.campaign_name}\": \n              ${failure.error_message}<br/>`;\n            }\n          } else {\n            errorMessage = `Error Code: ${error.status}<br/>Message: ${error.message}`;\n          }\n\n          this._updateFinished$.next({\n            status_code: STATUS.FAIL,\n            msg: errorMessage,\n            assets: [],\n          });\n          subscription.unsubscribe();\n        }\n      );\n  }\n\n  addNewAsset(asset: Asset) {\n    // Update all assets with the newly uploaded asset\n    if (asset) {\n      console.log('Asset: ', asset);\n      let waitTime = 0;\n      if (asset.type == AssetType.IMG) {\n        waitTime = 12000;\n      }\n      this._assetsToAdGroups.push(asset);\n      // This is a workaround to overcome the server not detecting the image\n      // type and loading it - so we give it some time.\n      setTimeout(() => {\n        this._allAssets$.next(this._allAssets$.getValue().concat(asset));\n      }, waitTime);\n    }\n  }\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Injectable } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { ConfigService } from './config.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthorizationService {\n\n  authInstance = null;\n  refreshToken = null;\n  loggedIn$: Observable<boolean>;\n  private loggedInSubject: BehaviorSubject<boolean>;\n\n  constructor(private _configService: ConfigService) {\n    this.retrieveStoredRefreshToken().then((token) => {\n      if (token) {\n        this.refreshToken = token;\n        this.loggedInSubject = new BehaviorSubject<boolean>(true);\n      } else {\n        this.loggedInSubject = new BehaviorSubject<boolean>(false);\n      }\n      this.loggedIn$ = this.loggedInSubject.asObservable();\n    });\n  }\n\n  async initGoogleAuth(): Promise<void> {\n    //  Create a new Promise where the resolve \n    // function is the callback passed to gapi.load\n    const pload = new Promise((resolve) => {\n      gapi.load('auth2', resolve);\n    });\n\n    // When the first promise resolves, it means we have gapi\n    // loaded and that we can call gapi.init\n    return pload.then(async () => {\n      var config = this._configService.getConfigSettings();\n\n      await gapi.auth2\n        .init({\n          client_id: config.client_id,\n          scope: \"https://www.googleapis.com/auth/adwords https://www.googleapis.com/auth/youtube.readonly\"\n        })\n        .then(auth => {\n          this.authInstance = auth;\n        });\n    });\n  }\n\n  async authenticate(force=false) {\n    var error = \"\";\n    var storedToken = await this.retrieveStoredRefreshToken();\n    if (!force && storedToken) {\n      this.refreshToken = storedToken;\n      this.loggedInSubject.next(true);\n    } else {\n      // Initialize gapi if not done yet\n      if (!this.authInstance) {\n        await this.initGoogleAuth();\n      }\n      // Get the refresh access token\n      var refreshAccessToken = await this.authInstance.grantOfflineAccess({\n        access_type: \"offline\",\n        prompt: \"consent\",\n        scope: \"https://www.googleapis.com/auth/adwords https://www.googleapis.com/auth/youtube.readonly\"\n      })\n      .then((res) => {\n        var refreshAccessToken = res.code;\n        return refreshAccessToken;\n      })\n      .catch((err) => {\n        error = err[\"error\"];\n      });\n\n      // Quick exit\n      if (error) throw new Error(error);\n\n      await this._configService\n            .getConfigRefreshCode(refreshAccessToken)\n            .toPromise()\n            .then((response) => {\n              this.refreshToken = response.body;\n              this.loggedInSubject.next(true);\n              this.storeRefreshToken(this.refreshToken);\n            })\n            .catch((err) => {\n              error = err[\"error\"];\n            });\n    }\n\n    if (error) {\n      throw new Error(error);\n    }\n  }\n\n  private async storeRefreshToken(token: string) {\n    window.localStorage.setItem('refreshToken', token);\n  }\n\n  private async retrieveStoredRefreshToken() {\n    return window.localStorage.getItem('refreshToken');\n  }\n\n  private async removeStoredRefreshToken() {\n    window.localStorage.removeItem('refreshToken');\n  }\n\n  public getRefreshToken() {\n    if (!this.refreshToken) {\n      throw new Error(\"No refresh token found. Please login.\");\n    }\n    return this.refreshToken;\n  }\n\n  public async login() {\n    await this.authenticate();\n  }\n\n  public async logout() {\n    this.refreshToken = null;\n    this.loggedInSubject.next(false);\n    await this.removeStoredRefreshToken();\n  }\n\n  public loginOrOut() {\n    if (this.loggedInSubject.value) {\n      this.logout()\n    } else {\n      this.login();\n    }\n  }\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ConfigSettings, YouTubeSettings } from '../model/settings';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ConfigService {\n  private API_SERVER = location.origin;\n\n  /** A cache of the configuration settings */\n  private _configSettings: ConfigSettings = null;\n  private _YtConfigSettings: YouTubeSettings = null;\n  private _configLoaded$ = new BehaviorSubject<boolean>(false);\n\n  /** Reflect the state of the config file */\n  configValid: boolean = false;\n  configLoaded$ = this._configLoaded$.asObservable();\n\n  constructor(private http: HttpClient) {}\n\n  loadConfigSettings() {\n    const endpoint = this.API_SERVER + '/config/';\n    let subscription = this.http\n      .get<ConfigSettings>(endpoint)\n      .subscribe((config) => {\n        this._configSettings = config;\n        this.configValid = config.config_valid;\n        this._configLoaded$.next(this.configValid);\n        subscription.unsubscribe();\n      });\n  }\n\n  getConfigSettings() {\n    return this._configSettings;\n  }\n\n  updateConfigCache(config: ConfigSettings) {\n    this._configSettings = config;\n  }\n\n  loadYtConfigSettings(){\n    const endpoint = this.API_SERVER + '/yt-config/'\n    let subscritpion = this.http\n    .get<YouTubeSettings>(endpoint)\n    .subscribe((config) => {\n      this._YtConfigSettings = config \n      subscritpion.unsubscribe();\n    });\n  }\n\n  getYtConfigSettings(){\n    return this._YtConfigSettings;\n  }\n\n  updateYtConfigSettings(config: YouTubeSettings){\n    this._YtConfigSettings = config;\n  }\n\n  setConfigCredentials(\n    mcc: number,\n    clientId: string,\n    clientSecret: string,\n    dev_token: string,\n    redirect_uri?: string,\n  ): Observable<any> {\n    const endpoint = this.API_SERVER + '/set-configs/';\n    let configObj: ConfigSettings = {\n      client_customer_id: mcc,\n      client_id: clientId,\n      client_secret: clientSecret,\n      developer_token: dev_token,\n      redirect_uri: redirect_uri,\n    };\n    return this.http.post(endpoint, configObj, { observe: 'response' });\n  }\n\n  getConfigRefreshCode(refreshCode: string): Observable<any> {\n    const endpoint = this.API_SERVER + '/get-refresh-token/';\n    return this.http.post(\n      endpoint,\n      { code: refreshCode },\n      { observe: 'response' }\n    )\n  }\n\n  setConfigRefreshCode(refreshCode: string): Observable<any> {\n    const endpoint = this.API_SERVER + '/set-refresh/';\n    return this.http.post(\n      endpoint,\n      { code: refreshCode },\n      { observe: 'response' }\n    );\n  }\n\n  setYouTubeConfig(conf: YouTubeSettings): Observable<any> {\n    const endpoint = this.API_SERVER + '/set-yt/';\n    return this.http.post(\n      endpoint,\n      { channel_id: conf.channel_id},\n      { observe: 'response' }\n    );\n  }\n\n  revertConfigSettings(config: ConfigSettings) {\n    if (config.config_valid) {\n      const endpoint = this.API_SERVER + '/set-configs/';\n      let subscription = this.http.post(endpoint, config).subscribe((_) => {\n        this.updateConfigCache(config);\n        subscription.unsubscribe();\n      });\n    }\n  }\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n@Injectable()\nexport class LoaderService {\n  isLoading = new Subject<boolean>();\n  show() {\n    this.isLoading.next(true);\n  }\n  hide() {\n    this.isLoading.next(false);\n  }\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReloadAppService {\n  constructor() {}\n  reloadMcc: Subject<boolean> = new Subject<boolean>();\n  reloadAccountIds: Subject<boolean> = new Subject<boolean>();\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { AssetType } from '../model/asset';\nimport { YouTubeVid } from '../model/yt-vid'\nimport { BehaviorSubject } from 'rxjs';\nimport { AuthorizationService } from './authorization.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UploadAssetService {\n  private API_SERVER = location.origin;\n\n  private _YtVidList$ = new BehaviorSubject<YouTubeVid[]>(null);\n  ytVidList$ = this._YtVidList$.asObservable();  \n\n  constructor(\n    private http: HttpClient,\n    private _authorizationService: AuthorizationService\n  ) {}\n\n  /** Used for text assets only */\n  addTextAsset(\n    account: number,\n    text: string,\n    assetType: AssetType,\n    adGroups: number[]\n  ) {\n    const endpoint = this.API_SERVER + '/upload-asset/';\n\n    var refreshToken = this._authorizationService.getRefreshToken();\n    let textAsset = {\n      account: account,\n      refresh_token: refreshToken,\n      asset_type: assetType,\n      asset_name: '',\n      asset_text: text,\n      adgroups: adGroups,\n    };\n\n    return this.http.post(endpoint, textAsset, { observe: 'response' });\n  }\n\n  /** Used for all non-text assets */\n  uploadAsset(\n    account: number,\n    assetName: string,\n    assetType: AssetType,\n    adGroups: number[],\n    url?: string\n  ) {\n    let asset;\n    const endpoint = this.API_SERVER + '/upload-asset/';\n\n    var refreshToken = this._authorizationService.getRefreshToken();\n    if (assetType === AssetType.VIDEO) {\n      asset = {\n        account: account,\n        refresh_token: refreshToken,\n        asset_type: assetType,\n        asset_name: assetName,\n        url: url,\n        adgroups: adGroups,\n      };\n    } else {\n      asset = {\n        account: account,\n        refresh_token: refreshToken,\n        asset_type: assetType,\n        asset_name: assetName,\n        adgroups: adGroups,\n      };\n    }\n\n    return this.http.post(endpoint, asset, { observe: 'response' });\n  }\n\n  validateDimensions(\n    width: number,\n    height: number\n  ){\n    let image = {\n      width: width,\n      height: height\n    }\n    const endpoint = this.API_SERVER + '/validate-dimensions/'\n\n    return this.http.post(endpoint, image,{ observe: 'response'})\n  }\n\n\n  clearUploads() {\n    const endpoint = this.API_SERVER + '/clean-dir/';\n    let subscritpion = this.http.get(endpoint).subscribe((_) => {\n      subscritpion.unsubscribe();\n    });\n  }\n\n  loadYtChannelVideos(){\n    var endpoint = this.API_SERVER + '/get-yt-videos/';\n    let subscription = this.http.get<YouTubeVid[]>(endpoint)\n    .subscribe((vids) =>{\n      this._YtVidList$.next(vids);\n      subscription.unsubscribe();\n    })\n  }\n\n  bulkUploadToYt(uploadList){\n    const endpoint = this.API_SERVER + '/upload-asset-bulk/';\n    var refresh_token = this._authorizationService.getRefreshToken();\n    var payload = {'refresh_token': refresh_token, 'data': uploadList}\n    return this.http.post(endpoint, payload, {observe: 'response'})\n  }\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, Inject, OnInit, ViewChild} from '@angular/core';\nimport {\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n  MatDialog,\n} from '@angular/material/dialog';\nimport { ConfigSettings, YouTubeSettings } from '../model/settings';\nimport { AppSetupComponent } from '../app-setup/app-setup.component';\nimport { YtConifgComponent } from '../shared/config/yt-conifg/yt-conifg.component'\nimport { ConfigService } from '../services/config.service';\n\n@Component({\n  selector: 'app-settings',\n  templateUrl: './settings.component.html',\n  styleUrls: ['./settings.component.css'],\n})\nexport class SettingsComponent {\n  editMode: boolean = false;\n  verificationText: string = '';\n  errorFound: boolean = false;\n\n  @ViewChild('ytFormGroup') ytCredentials: YtConifgComponent;\n\n  constructor(\n    private _setupDialog: MatDialog,\n    private _configService: ConfigService,\n    public dialogRef: MatDialogRef<SettingsComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n  ) {}\n  ngOnInit() {\n    this.dialogRef.updateSize('900px', '450px');\n  }\n  onEdit() {\n    this.dialogRef.close();\n    const configDialogRef = this._setupDialog.open(AppSetupComponent, {\n      data: <ConfigSettings>this.data.config,\n    });\n\n    let subscription = configDialogRef.backdropClick().subscribe((_) => {\n      // Revert back to old config\n      this._configService.revertConfigSettings(this.data);\n      subscription.unsubscribe();\n    });\n  }\n\n  onYtSubmit() {\n    let YtConf: YouTubeSettings = {\n      channel_id: this.ytCredentials.YTform.get('channel').value.trim()\n    } \n    return this._configService.setYouTubeConfig(YtConf).subscribe(\n      (response) => {\n          this._configService.updateYtConfigSettings(YtConf)\n          this.errorFound = false\n          this.verificationText = 'Channel Updated'\n      },\n      (error) =>{\n        this.errorFound = true\n        this.verificationText = 'Invalid Credentials'\n      }\n    )\n  }\n}\n","<h1 mat-dialog-title>AssetMG Settings</h1>\n<mat-tab-group>\n<mat-tab label=\"General\">\n  <div mat-dialog-content>\n    <app-credentials class=\"settings-form\" #credentialsFormGroup\n      [data]=\"this.data.config\"\n      [editMode]=false>\n    </app-credentials>\n    <div mat-dialog-actions>\n      <button mat-stroked-button\n        color=\"primary\"\n        (click)=\"onEdit()\">Edit</button>\n      <button mat-stroked-button\n        color=\"primary\"\n        class=\"right-align\"\n        [mat-dialog-close]=\"true\"\n        cdkFocusInitial>Ok</button>\n    </div>\n  </div>\n</mat-tab>\n<mat-tab label=\"YouTube Config\">\n  <div mat-dialog-content>\n    <app-yt-config class=\"settings-form\" #ytFormGroup\n    [ytData]=\"this.data.yt\">\n    </app-yt-config>\n    <div>\n      <p [ngClass]=\"{'msg': true, 'color-red':this.errorFound}\">{{verificationText}}</p>\n    </div>\n    <div mat-dialog-actions>\n      <button mat-stroked-button\n        color=\"primary\"\n        (click)=\"onYtSubmit()\">Update</button>\n      <button mat-stroked-button\n        color=\"primary\"\n        class=\"right-align\"\n        [mat-dialog-close]=\"true\"\n        cdkFocusInitial>Ok</button>\n    </div>\n  </div>\n</mat-tab>\n</mat-tab-group>\n\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Pipe, PipeTransform } from '@angular/core';\n\nexport enum transformAction {\n  ADD_DASHES,\n  REMOVE_DASHES,\n}\n\n@Pipe({\n  name: 'cidPipe',\n})\nexport class ClientIDPipe implements PipeTransform {\n  transform(value: string, action: transformAction) {\n    let newStr = value;\n    if (action === transformAction.ADD_DASHES) {\n      if (!value.includes('-')) {\n        newStr =\n          value.slice(0, 3) +\n          '-' +\n          value.slice(3, 6) +\n          '-' +\n          value.slice(6, 10);\n      }\n    } else {\n      newStr = value.replace(/-/g, '');\n    }\n    return newStr;\n  }\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ConfigSettings } from 'src/app/model/settings';\nimport { ClientIDPipe, transformAction } from '../../client-id.pipe';\n\n@Component({\n  selector: 'app-credentials',\n  templateUrl: './credentials.component.html',\n  styleUrls: ['./../config.css'],\n})\nexport class CredentialsComponent implements OnInit {\n  form: FormGroup;\n  mcc_cid: string = '';\n  constructor(\n    private _formBuilder: FormBuilder,\n    private _cidPipe: ClientIDPipe\n  ) {}\n\n  @Input() data: ConfigSettings;\n  @Input() editMode: boolean = true;\n\n  ngOnInit(): void {\n    this.form = this._formBuilder.group({\n      mccCtrl: [\n        {\n          value: this.data.client_customer_id\n            ? this._cidPipe.transform(\n                this.data.client_customer_id.toString(),\n                transformAction.ADD_DASHES\n              )\n            : '',\n          disabled: !this.editMode,\n        },\n        [\n          Validators.required,\n          Validators.minLength(10),\n          Validators.maxLength(12),\n          Validators.pattern('[0-9]{3}-[0-9]{3}-[0-9]{4}|[0-9]{10}'),\n        ],\n      ],\n      clientIDCtrl: [\n        {\n          value: this.data.client_id ? this.data.client_id : '',\n          disabled: !this.editMode,\n        },\n        Validators.required,\n      ],\n      clientSecretCtrl: [\n        {\n          value: this.data.client_secret ? this.data.client_secret : '',\n          disabled: !this.editMode,\n        },\n        Validators.required,\n      ],\n      devTokenCtrl: [\n        {\n          value: this.data.developer_token ? this.data.developer_token : '',\n          disabled: !this.editMode,\n        },\n        Validators.required,\n      ],\n      refreshCodeCtrl: [\n        {\n          value: this.data.refresh_token ? this.data.refresh_token : '',\n          disabled: true,\n        },\n      ],\n    });\n  }\n  onBlur() {\n    // Update the cid to remove any spaces and have dashes if it doesn't\n    let mccCtrl = this.form.get('mccCtrl');\n    mccCtrl.setValue(mccCtrl.value.trim());\n    if (!mccCtrl.invalid) {\n      this.mcc_cid = this._cidPipe.transform(\n        mccCtrl.value,\n        transformAction.ADD_DASHES\n      );\n    }\n  }\n}\n","<form [formGroup]=\"form\">\n  <div class=\"settings-field\">\n    <mat-form-field>\n      <mat-label>MCC Customer ID</mat-label>\n      <input matInput\n            placeholder=\"XXX-XXX-XXXX\"\n            formControlName=\"mccCtrl\"\n            autocomplete=\"off\"\n            (blur)=\"onBlur()\"\n            required>\n    </mat-form-field>\n  </div>\n  <div class=\"settings-field long-field\">\n    <mat-form-field >\n      <mat-label>Client ID</mat-label>\n      <input matInput\n            formControlName=\"clientIDCtrl\"\n            autocomplete=\"off\"\n            required>\n    </mat-form-field>\n  </div>\n  <div class=\"settings-field long-field\">\n    <mat-form-field>\n      <mat-label>Client Secret</mat-label>\n      <input matInput\n            formControlName=\"clientSecretCtrl\"\n            autocomplete=\"off\"\n            required>\n    </mat-form-field>\n  </div>\n  <div class=\"settings-field long-field\">\n    <mat-form-field>\n      <mat-label>Dev Token</mat-label>\n      <input matInput\n            formControlName=\"devTokenCtrl\"\n            autocomplete=\"off\"\n            required>\n    </mat-form-field>\n  </div>\n  <div *ngIf=\"!this.editMode\" class=\"settings-field long-field\">\n    <mat-form-field>\n      <mat-label>Refresh Token</mat-label>\n      <input matInput\n            formControlName=\"refreshCodeCtrl\"\n            autocomplete=\"off\">\n    </mat-form-field>\n  </div>\n</form>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-refresh-code',\n  templateUrl: './refresh-code.component.html',\n  styleUrls: ['./../config.css'],\n})\nexport class RefreshCodeComponent implements OnInit {\n  form: FormGroup;\n  updateMessage: string = '';\n  isErrorMessage: boolean = false;\n  workInProgress: boolean = false;\n\n  @Input() openURL: string = '';\n\n  constructor(private _formBuilder: FormBuilder) {}\n\n  ngOnInit(): void {\n    this.form = this._formBuilder.group({\n      refreshCodeCtrl: ['', Validators.required],\n    });\n  }\n  onGenerateToken() {\n    if (this.openURL.length) {\n      window.open(this.openURL, '_blank');\n    }\n  }\n}\n","<form [formGroup]=\"form\">\n  <app-progress-btn\n    btnLabel='Generate Code'\n    [btnUpdateMsg]=\"updateMessage\"\n    [isError]=\"isErrorMessage\"\n    [inProgress]=\"workInProgress\"\n    (btnClick)=\"onGenerateToken()\">\n  </app-progress-btn>\n  <div class=\"settings-field long-field\">\n    <mat-form-field>\n      <mat-label>Refresh Code</mat-label>\n      <input matInput formControlName=\"refreshCodeCtrl\"  autocomplete=\"off\"\n            required>\n    </mat-form-field>\n  </div>\n</form>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { YouTubeSettings } from 'src/app/model/settings';\n\n@Component({\n  selector: 'app-yt-config',\n  templateUrl: './yt-conifg.component.html',\n  styleUrls: ['./yt-conifg.component.css'],\n})\n\nexport class YtConifgComponent implements OnInit {\n  YTform: FormGroup;\n  api_url: string = 'https://developers.google.com/youtube/registering_an_application';\n  console_url: string = 'https://developers.google.com/youtube/v3/getting-started#before-you-start';\n  instructions: string = \"To bulk upload videos from YouTube, please enable the YouTube Data API in the <a href=${this.console_url} target='_blank' rel='noopener noreferrer'>API console</a>. \" + \n  \"After API enabled, paste a YouTube channel ID in the field above and click the update button bellow. If you are an owner in this channel you will see both unlisted and public videos, else you will only see public videos.\"\n  \n  // \"This is optional. \" +\n  //       \"If you want to use the bulk upload from a YouTube channel feature, \" +\n  //       `please generate an <a href=${this.api_url} target='_blank' rel='noopener noreferrer'>API Key</a> ` +\n  //       `(not Oauth2) and enable the YouTube Data API in the <a href=${this.console_url} target='_blank' rel='noopener noreferrer'>API console</a> `;\n\n  constructor(private fb: FormBuilder) { }\n \n  @Input() ytData: YouTubeSettings;\n\n  ngOnInit(): void {\n    let channel_id = this.ytData.channel_id ? this.ytData.channel_id : '';\n    this.YTform = this.fb.group({\n      channel: [\n        channel_id,\n      [\n        Validators.required,\n        Validators.minLength(3)\n      ]],\n    })\n  }\n\n}\n","<form [formGroup]=\"YTform\">\n  <div class=\"settings-field\">\n    <mat-form-field>\n      <mat-label>YouTube Channel Id</mat-label>\n      <input matInput\n            formControlName=\"channel\"\n            autocomplete=\"off\"\n            >\n    </mat-form-field>\n  </div>\n  <div class=\"settings-field long-field\">\n  </div>\n    <div>\n      <p innerHTML={{instructions}}>{{instructions}}</p>\n    </div>\n</form>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Pipe({\n  name: 'styleErrorMsg',\n})\nexport class ErrorMsgPipe implements PipeTransform {\n  constructor(private sanitizer: DomSanitizer) {}\n  transform(value: any, ...args: unknown[]): unknown {\n    // Remove Error code if it exists\n    let newValue = value.replace('403 ', '');\n    // Add new lines to make it more readible\n    newValue = newValue.replaceAll('. ', '.\\n\\n');\n    // add an html tag to links\n    let urlStartIdx = newValue.indexOf('https://');\n    let urlEndIdx = newValue.indexOf(' ', urlStartIdx);\n\n    let startTag =\n      '<a href=\"' +\n      newValue.substring(urlStartIdx, urlEndIdx) +\n      '\"target=\"_blank\">';\n    let endTag = '</a>';\n\n    newValue =\n      newValue.substring(0, urlStartIdx) +\n      startTag +\n      newValue.substring(urlStartIdx, urlEndIdx) +\n      endTag +\n      newValue.substring(urlEndIdx);\n\n    return this.sanitizer.bypassSecurityTrustHtml(newValue);\n  }\n}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, OnInit, ChangeDetectorRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { LoaderService } from '../../services/loader.service';\n@Component({\n  selector: 'app-loader',\n  templateUrl: './loader.component.html',\n  styleUrls: ['./loader.component.css'],\n})\nexport class LoaderComponent implements OnInit {\n  isLoading: boolean;\n  constructor(\n    private loaderService: LoaderService,\n    private cdf: ChangeDetectorRef\n  ) {}\n  ngOnInit(): void {\n    this.loaderService.isLoading.subscribe((loading) => {\n      this.isLoading = loading;\n      this.cdf.detectChanges();\n    });\n  }\n}","<div class= \"progress-bar\">\n  <mat-progress-bar *ngIf=\"isLoading\"\n  mode=\"indeterminate\"\n  color=\"accent\">\n  </mat-progress-bar>\n</div>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NgModule } from '@angular/core';\n// import {A11yModule} from '@angular/cdk/a11y';\n// import {ClipboardModule} from '@angular/cdk/clipboard';\n// import {DragDropModule} from '@angular/cdk/drag-drop';\n// import {PortalModule} from '@angular/cdk/portal';\n// import {ScrollingModule} from '@angular/cdk/scrolling';\n// import {CdkStepperModule} from '@angular/cdk/stepper';\n// import {CdkTableModule} from '@angular/cdk/table';\n// import {CdkTreeModule} from '@angular/cdk/tree';\n// import {MatAutocompleteModule} from '@angular/material/autocomplete';\n// import {MatBadgeModule} from '@angular/material/badge';\n// import {MatBottomSheetModule} from '@angular/material/bottom-sheet';\nimport { MatButtonModule } from '@angular/material/button';\n//import {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\n// import {MatChipsModule} from '@angular/material/chips';\nimport { MatStepperModule } from '@angular/material/stepper';\n// import {MatDatepickerModule} from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatDividerModule } from '@angular/material/divider';\n// import {MatExpansionModule} from '@angular/material/expansion';\n// import { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list';\n// import {MatMenuModule} from '@angular/material/menu';\n// import {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\n// import {MatSliderModule} from '@angular/material/slider';\n// import {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\n// import {MatTooltipModule} from '@angular/material/tooltip';\nimport { MatTreeModule } from '@angular/material/tree';\n\n@NgModule({\n  exports: [\n    // A11yModule,\n    // ClipboardModule,\n    // CdkStepperModule,\n    // CdkTableModule,\n    // CdkTreeModule,\n    // DragDropModule,\n    // MatAutocompleteModule,\n    // MatBadgeModule,\n    // MatBottomSheetModule,\n    MatButtonModule,\n    //MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    // MatChipsModule,\n    MatStepperModule,\n    // MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    // MatExpansionModule,\n    // MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    // MatMenuModule,\n    // MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    // MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    // MatSliderModule,\n    // MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    // MatTooltipModule,\n    MatTreeModule,\n    // PortalModule,\n    // ScrollingModule,\n  ],\n})\nexport class MaterialModule {}\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Component,\n  OnInit,\n  EventEmitter,\n  Output,\n  HostListener,\n  Input,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-progress-btn',\n  templateUrl: './progress-btn.component.html',\n  styleUrls: ['./progress-btn.component.css'],\n})\nexport class ProgressBtnComponent implements OnInit {\n  @Input() btnLabel: string;\n  @Input() inProgress: boolean;\n  @Input() disabled: boolean;\n  @Input() btnUpdateMsg: string;\n  @Input() isError: boolean = false;\n\n  constructor() {}\n\n  ngOnInit(): void {}\n  @Output() btnClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  @HostListener('click', ['$event'])\n  public onClick(event: MouseEvent) {\n    if (!this.disabled) {\n      this.btnClick.emit(event);\n    }\n  }\n}\n","<div class=\"addedPadding\">\n  <button mat-stroked-button\n    [disabled] = \"disabled\"\n    color=\"primary\">\n    {{btnLabel}}\n    <mat-progress-bar *ngIf=\"inProgress\"\n      mode=\"indeterminate\"\n      color=\"accent\">\n    </mat-progress-bar>\n  </button>\n  <div *ngIf=\"btnUpdateMsg?.length\"\n    class=\"margin-bottom-thin button-update-msg\"\n    [ngClass]=\"{'warning-msg': isError}\">\n    <i class=\"fas fa-info-circle\"></i>&nbsp;\n    <span [innerHTML]=\"btnUpdateMsg\"></span>\n  </div>\n</div>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { ProgressBtnComponent } from './progress-btn/progress-btn.component';\nimport { LoaderComponent } from './loader/loader.component';\nimport { CredentialsComponent } from './config/credentials/credentials.component';\nimport { RefreshCodeComponent } from './config/refresh-code/refresh-code.component';\nimport { YtConifgComponent } from './config/yt-conifg/yt-conifg.component';\nimport { ClientIDPipe } from './client-id.pipe';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { HttpErrorInterceptor } from '../interceptors/http-error.interceptor';\nimport { LoaderInterceptor } from '../interceptors/loader.interceptor';\nimport { MaterialModule } from './material.module';\nimport { LoaderService } from '../services/loader.service';\nimport { UploadComponent } from './upload/upload.component';\nimport { ErrorMsgPipe } from './error-msg.pipe';\n\n@NgModule({\n  declarations: [\n    ProgressBtnComponent,\n    LoaderComponent,\n    CredentialsComponent,\n    RefreshCodeComponent,\n    UploadComponent,\n    ClientIDPipe,\n    ErrorMsgPipe,\n    YtConifgComponent,\n  ],\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, MaterialModule],\n  exports: [\n    ProgressBtnComponent,\n    LoaderComponent,\n    CredentialsComponent,\n    RefreshCodeComponent,\n    MaterialModule,\n    FormsModule,\n    ReactiveFormsModule,\n    UploadComponent,\n    ErrorMsgPipe,\n    YtConifgComponent,\n  ],\n  providers: [\n    LoaderService,\n    ClientIDPipe,\n    ErrorMsgPipe,\n    { provide: HTTP_INTERCEPTORS, useClass: LoaderInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: HttpErrorInterceptor, multi: true },\n  ],\n})\nexport class SharedModule {}","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Component,\n  OnInit,\n  Input,\n  ViewChild,\n  ElementRef,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport { UploadAssetService } from '../../services/upload-asset.service';\nimport { ValidationResponse } from '../../model/response';\n\nexport enum FileType {\n  IMG = 'image/*',\n  VIDEO = 'video/*',\n  HTML = '.zip',\n}\n\n@Component({\n  selector: 'app-upload',\n  templateUrl: './upload.component.html',\n  styleUrls: ['./upload.component.css'],\n})\nexport class UploadComponent implements OnInit {\n  action: string = location.origin + '/upload-files/';\n  fileNames: string[] = [];\n  selectedFileName: string = '';\n  invalidDimensionsMsg: string = '';\n  isError: boolean = false;\n\n  @Input() acceptsType: FileType;\n  @ViewChild('form') form: ElementRef;\n  @Output() isValid = new EventEmitter<boolean>();\n\n  constructor(private _uploadService: UploadAssetService) {}\n  ngOnInit(): void {}\n\n  onChange(event) {\n    this.invalidDimensionsMsg = '';\n    this.isError = false;\n    this.fileNames = [];\n    for (let file of event.target.files) {\n      this.fileNames.push(file.name);\n    }\n    if (this.fileNames.length > 0) {\n      this.isValid.emit(true);\n    } else {\n      this.isValid.emit(false);\n    }\n\n    // Image size validation\n    if (this.acceptsType == FileType.IMG) {\n      var file = event.target.files[0];\n      var fileReader = new FileReader();\n      var img = new Image();\n      let self = this;\n\n      fileReader.onload = function (event) {\n        img.src = <string>fileReader.result;\n\n        img.onload = function () {\n          // Call the Validation API here -\n          let subscription = self._uploadService\n            .validateDimensions(img.width, img.height)\n            .subscribe((response) => {\n              self.isValid.emit((response.body as ValidationResponse).valid);\n              if (!(response.body as ValidationResponse).valid) {\n                self.invalidDimensionsMsg = 'Invalid Image Dimensions';\n                self.isError = true;\n              }\n              subscription.unsubscribe();\n            });\n        };\n      };\n      fileReader.readAsDataURL(file);\n    }\n\n    if (this.fileNames.length) {\n      this.selectedFileName = this.fileNames[0];\n    } else {\n      this.selectedFileName = '';\n    }\n  }\n\n  uploadToServer() {\n    this.form.nativeElement.submit();\n  }\n}\n","<iframe id=\"hiddenFrame\" name=\"hiddenFrame\"></iframe>\n<form #form\n  ngNoForm\n  action={{action}}\n  method=\"POST\"\n  enctype=\"multipart/form-data\"\n  target=\"hiddenFrame\">\n  <input #fileInput\n    hidden\n    name=\"file\"\n    type=\"file\"\n    [accept]=\"acceptsType\"\n    (change)=\"onChange($event)\"/>\n  <button mat-stroked-button\n    color=\"primary\"\n    (click)=\"fileInput.click()\">\n    <mat-icon >file_upload</mat-icon>Upload\n  </button>\n  <input\n    id=\"selectedFile\"\n    matInput\n    type=\"text\"\n    placeholder=\"No file chosen\"\n    readonly=\"true\"\n    [value]=\"selectedFileName\">\n</form>\n<div *ngIf=\"invalidDimensionsMsg?.length\"\nclass=\"margin-bottom-thin button-update-msg\"\n[ngClass]=\"{'warning-msg': isError}\">\n  <i class=\"fas fa-info-circle\"></i>\n  {{this.invalidDimensionsMsg}}<span>&nbsp;</span>\n</div>","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, OnInit, Input } from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { Account } from './../model/account';\nimport { AssetService } from './../services/asset.service';\nimport { AuthorizationService } from './../services/authorization.service';\n\nimport { Asset } from './../model/asset';\nimport { tap } from 'rxjs/operators';\nimport { MatDialog } from '@angular/material/dialog';\nimport { SettingsComponent } from '../settings/settings.component';\nimport { ConfigService } from '../services/config.service';\nimport { ReloadAppService } from '../services/reload-app.service';\n\n@Component({\n  selector: 'app-toolbar',\n  templateUrl: './toolbar.component.html',\n  styleUrls: ['./toolbar.component.css'],\n})\nexport class ToolbarComponent implements OnInit {\n  private _subscriptions: Subscription[] = [];\n  accounts$: Observable<Account[]>;\n  defaultAccount: number;\n  loggedIn: boolean=false;\n\n  @Input() loadAccounts: boolean = false;\n\n  constructor(\n    private _dataService: AssetService,\n    private _configService: ConfigService,\n    private _authorizationService: AuthorizationService,\n    private _reloadAppService: ReloadAppService,\n    private _settingsDialog: MatDialog\n  ) {\n    this._reloadAppService.reloadAccountIds.subscribe(() => {\n      this.loadAccountIds();\n    });\n  }\n\n  ngOnInit(): void {\n    this.loadAccountIds();\n\n    this._subscriptions.push(\n      this._authorizationService.loggedIn$.subscribe((loggedIn) => {\n        this.loggedIn = loggedIn;\n      })\n    );\n  }\n\n  loadAccountIds(): void {\n    this.accounts$ = this._dataService.getAccountIds().pipe(\n      tap((accounts) => {\n        if (accounts.length) {\n          this.defaultAccount = accounts[0].id;\n          this._dataService.changeAccount(accounts[0].id);\n        }\n      })\n    );\n  }\n\n  refreshCache() {\n    // Manually force a cache refresh based on user trigger\n    console.log(\"Refreshing cache manually.\");\n    this._reloadAppService.reloadMcc.next(true);\n  }\n\n  accountChanged(event) {\n    // Only get a notification for the selected account not the \"unselected\" account\n    if (event.isUserInput) {\n      this._dataService.changeAccount(event.source.value);\n    }\n  }\n\n  openSettings() {\n    let config = this._configService.getConfigSettings();\n    let ytConfig = this._configService.getYtConfigSettings();\n    this._settingsDialog.open(SettingsComponent, {\n      data: {\n        config:{\n        client_customer_id: config.client_customer_id,\n        client_id: config.client_id,\n        client_secret: config.client_secret,\n        developer_token: config.developer_token,\n        refresh_token: config.refresh_token,\n        config_valid: config.config_valid\n        },\n        yt:{\n        channel_id: ytConfig.channel_id\n        }\n      }\n    });\n  }\n\n  feedbackClicked() {\n    let mailText = 'mailto:assetmg@google.com+?subject=AssetMG%Feedback';\n    window.location.href = mailText;\n  }\n}\n","<mat-toolbar class=\"toolbar_class\">\n    <mat-toolbar-row>\n    \t<div class=\"toolbar_logo\">\n    \t<img src=\"assets/gtech_logo.png\" style=\"width: 40px;\">\n    \t<span>AssetMG - Prototype</span>\n      </div>\n      <div *ngIf=\"this.loadAccounts\" class=\"toolbar_select\">\n        <mat-form-field class=\"account_select\">\n        <mat-label>Account</mat-label>\n        <mat-select [(value)]=\"defaultAccount\" *ngIf=\"this.loggedIn\">\n          <mat-option *ngFor=\"let account of (accounts$ | async)\" [value]=\"account.id\"\n            (onSelectionChange)=\"accountChanged($event)\"> {{!!account.name ? account.name : account.id}}\n          </mat-option>\n        </mat-select>\n        </mat-form-field>\n    </div>\n    <div class=\"right-align\">\n      <app-login></app-login>\n      <ng-container *ngIf=\"this.loggedIn\">\n        <button mat-icon-button (click)=\"refreshCache()\">\n            <mat-icon>update</mat-icon>\n        </button>\n      </ng-container>\n      <button mat-icon-button (click)=\"openSettings()\" *ngIf=\"this.loggedIn\">\n          <mat-icon>settings</mat-icon>\n      </button>\n      <button mat-icon-button (click)=\"feedbackClicked()\">\n          <mat-icon>feedback</mat-icon>\n      </button>\n    </div>\n    </mat-toolbar-row>\n  </mat-toolbar>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, OnInit, ViewChild, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport {\n  FormGroup,\n  FormControl,\n  FormGroupDirective,\n  NgForm,\n} from '@angular/forms';\nimport { Account } from '../model/account';\nimport { MatStepper } from '@angular/material/stepper';\nimport { UploadTextComponent } from './upload-text/upload-text.component';\nimport { UploadImgComponent } from './upload-img/upload-img.component';\nimport { UploadVideoComponent } from './upload-video/upload-video.component';\nimport { UploadHtmlComponent } from './upload-html/upload-html.component';\nimport { STEPPER_GLOBAL_OPTIONS } from '@angular/cdk/stepper';\nimport { UploadAssetService } from '../services/upload-asset.service';\n\nimport { ErrorStateMatcher } from '@angular/material/core';\nimport { AssetType } from '../model/asset';\nimport { STATUS, UploadResponse } from '../model/response';\nimport { AssetService } from '../services/asset.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AccountStructComponent } from '../account-struct/account-struct.component';\nimport { ConfigService } from '../services/config.service';\n\n/** Error when the parent is invalid */\nexport class ErrorMatcher implements ErrorStateMatcher {\n  isErrorState(\n    control: FormControl | null,\n    form: FormGroupDirective | NgForm | null\n  ): boolean {\n    return control.dirty && form.invalid;\n  }\n}\n\n@Component({\n  selector: 'app-upload-assets',\n  templateUrl: './upload-assets.component.html',\n  styleUrls: ['./upload-assets.component.css'],\n  providers: [\n    {\n      provide: STEPPER_GLOBAL_OPTIONS,\n      useValue: { displayDefaultIndicatorType: false },\n    },\n  ],\n})\nexport class UploadAssetsComponent implements OnInit {\n  typeFormGroup: FormGroup;\n  uploadFormGroup: FormGroup;\n  uploadAssetType: AssetType;\n  assetTypes = AssetType;\n  types: Map<AssetType, string>;\n  isBulkUpload: boolean;\n  // used to disable the 'upload' button when no files are selected\n  isBulkFilesSelected: boolean = false;\n\n  /** Dialog initialization values */\n  canAddAsset: boolean;\n  isTextAsset: boolean = true;\n  isChildFormValid: boolean = true;\n\n  /** Update button params */\n  uploadInProgress: boolean = false;\n  uploadMessage: string = '';\n  isErrorMessage: boolean = false;\n\n  @ViewChild('uploadText') uploadText: UploadTextComponent;\n  @ViewChild('uploadImg') uploadImg: UploadImgComponent;\n  @ViewChild('uploadVideo') uploadVideo: UploadVideoComponent;\n  @ViewChild('uploadHtml') uploadHtml: UploadHtmlComponent;\n  @ViewChild('accountAdGroups') adGroups: AccountStructComponent;\n\n  constructor(\n    private _uploadService: UploadAssetService,\n    private _configService: ConfigService,\n    private _uploadAssetService: UploadAssetService,\n    private _assetService: AssetService,\n    private _snackBar: MatSnackBar,\n    public uploadDialogRef: MatDialogRef<UploadAssetsComponent>,\n    @Inject(MAT_DIALOG_DATA) public account: Account\n  ) {}\n\n  ngOnInit(): void {\n    this.types = new Map();\n    this.types.set(this.assetTypes.TEXT_HEADLINE, 'Text - Headline');\n    this.types.set(this.assetTypes.TEXT_DESC, 'Text - Description');\n    this.types.set(this.assetTypes.IMG, 'Image');\n    this.types.set(this.assetTypes.VIDEO, 'YouTube Video');\n    this.types.set(this.assetTypes.HTML, 'HTML');\n\n    // First selected asset type is image when the dialog loads\n    this.canAddAsset = true;\n    this.uploadAssetType = this.assetTypes.IMG;\n\n    this.uploadDialogRef.updateSize('800px', '520px');\n\n    this.uploadDialogRef.beforeClosed().subscribe((result) => {\n      this._uploadService.clearUploads();\n    });\n\n    let yt_creds = this._configService.getYtConfigSettings();\n    if (yt_creds.channel_id !== '') {\n      this._uploadAssetService.loadYtChannelVideos();\n    }\n  }\n\n  onClose() {\n    this.uploadDialogRef.close();\n  }\n\n  onAssetTypeChange(type) {\n    // Update whether an asset can be added without getting linked to an ad group\n    if (\n      type == this.assetTypes.TEXT_DESC ||\n      type == this.assetTypes.TEXT_HEADLINE\n    ) {\n      this.isTextAsset = true;\n      this.canAddAsset = false;\n    } else {\n      this.isTextAsset = false;\n      this.canAddAsset = true;\n    }\n  }\n\n  setIsBulkUpload(value: boolean){\n    this.isBulkUpload = value;\n  }\n\n  // used to disable/enable the 'upload' button\n  setIsBulkFilesSelected(value: boolean){\n    this.isBulkFilesSelected = value;\n  }\n\n  bulkUploadVideos(){\n    let subscription = this.uploadVideo.uploadBulkVids()\n    subscription.subscribe((response) =>{\n      if (response.status === STATUS.SUCCESS || response.status === STATUS.PARTIAL_SUCCESS){\n        for (let asset of <any[]>response.body){\n          this._assetService.addNewAsset(asset);\n        }\n        this.uploadDialogRef.close()\n      }\n    })\n  }\n\n  onNext(stepper: MatStepper) {\n    if (stepper.selectedIndex == 1) {\n      switch (this.uploadAssetType) {\n        case this.assetTypes.IMG:\n          this.uploadImg.uploadToServer();\n          break;\n        case this.assetTypes.VIDEO:\n          !this.uploadVideo.form.invalid;\n          break;\n        case this.assetTypes.HTML:\n          this.uploadHtml.uploadToServer();\n          break;\n        default:\n          !this.uploadText.form.invalid;\n      }\n      // Reset any errors before moving to the next step\n      this.isErrorMessage = false;\n      this.uploadMessage = '';\n    }\n    stepper.next();\n    this.isChildFormValid = this.isCurrentStepValid(stepper);\n  }\n  onBack(stepper: MatStepper) {\n    stepper.previous();\n    this.isChildFormValid = this.isCurrentStepValid(stepper);\n    this.isBulkUpload = false;\n  }\n\n  isCurrentStepValid(stepper: MatStepper): boolean {\n    if (stepper.selectedIndex == 0 || stepper.selectedIndex == 2) {\n      return true;\n    } else {\n      switch (this.uploadAssetType) {\n        case this.assetTypes.IMG:\n          return this.uploadImg.isValid;\n        case this.assetTypes.HTML:\n          return this.uploadHtml.isValid;\n        case this.assetTypes.VIDEO:\n          return !this.uploadVideo.form.invalid;\n        default:\n          return !this.uploadText.form.invalid;\n      }\n    }\n  }\n\n  updateStepValid(isValid: boolean) {\n    this.isChildFormValid = isValid;\n  }\n\n  updateCanAddAsset(canAdd: boolean) {\n    if (\n      this.uploadAssetType == this.assetTypes.TEXT_DESC ||\n      this.uploadAssetType == this.assetTypes.TEXT_HEADLINE\n    ) {\n      this.canAddAsset = canAdd;\n    }\n  }\n  onAddAsset() {\n    // Start the spinner\n    this.uploadInProgress = true;\n\n    let assetName = '';\n    let assetText = '';\n    let url = '';\n    let adGroups = this.adGroups.getSelectedAdGroupIDs();\n\n    switch (this.uploadAssetType) {\n      case this.assetTypes.IMG:\n        assetName = this.uploadImg.upload.fileNames[0];\n        break;\n      case this.assetTypes.HTML:\n        assetName = this.uploadHtml.upload.fileNames[0];\n        break;\n      case this.assetTypes.VIDEO:\n        assetName = this.uploadVideo.form.get('videoNameCtrl').value;\n        url = this.uploadVideo.form.get('videoUrlCtrl').value;\n        break;\n      case this.assetTypes.TEXT_DESC:\n      case this.assetTypes.TEXT_HEADLINE:\n        assetText = this.uploadText.form.get('textCtrl').value;\n        break;\n    }\n\n    if (\n      this.uploadAssetType == this.assetTypes.TEXT_DESC ||\n      this.uploadAssetType == this.assetTypes.TEXT_HEADLINE\n    ) {\n      let subscription = this._uploadService\n        .addTextAsset(\n          this.account.id,\n          assetText,\n          this.uploadAssetType,\n          adGroups\n        )\n        .subscribe(\n          (response) => {\n            this.processUploadResponse(response.status, response.body);\n            subscription.unsubscribe();\n          },\n          (error) => {\n            this.processUploadResponse(\n              STATUS.FAIL,\n              this.buildErrorResponse(error)\n            );\n          }\n        );\n    } else {\n      let subscription = this._uploadService\n        .uploadAsset(\n          this.account.id,\n          assetName,\n          this.uploadAssetType,\n          adGroups,\n          url\n        )\n        .subscribe(\n          (response) => {\n            this.processUploadResponse(\n              response.status,\n              <UploadResponse>response.body\n            );\n            subscription.unsubscribe();\n          },\n          (error) => {\n            this.processUploadResponse(\n              STATUS.FAIL,\n              this.buildErrorResponse(error)\n            );\n          }\n        );\n    }\n  }\n\n  processUploadResponse(status, response?: UploadResponse) {\n    // Stop the progress bar\n    this.uploadInProgress = false;\n    if (status != STATUS.SUCCESS) {\n      this.isErrorMessage = true;\n      let msg = '';\n      if (status === STATUS.FAIL) {\n        msg = response.msg;\n      } else if (status === STATUS.PARTIAL_SUCCESS) {\n        let failures = (<any>response).unsuccessfull;\n        console.log(failures);\n        if (failures) {\n          for (let failure of failures) {\n            msg += `Update failed for the ad group \"${failure.adgroup.adgroup_name}\" from campaign \"${failure.adgroup.campaign_name}\":\n                ${failure.error_message}<br/>`;\n          }\n        } else {\n          msg = 'Update failed for some ad groups.';\n        }\n      }\n      this.uploadMessage = msg;\n    } else if (response?.asset) {\n      // Notify the asset service of newly added asset\n      if (response.asset) {\n        this._assetService.addNewAsset(response.asset);\n        this._snackBar.open('Uploaded Successfully', '', {\n          duration: 2000,\n          horizontalPosition: 'center',\n          verticalPosition: 'bottom',\n        });\n      }\n      this.uploadDialogRef.close({ successful: status == STATUS.SUCCESS });\n    }\n  }\n\n  buildErrorResponse(error) {\n    let response = {};\n    if (error.error) {\n      let msg = '';\n      msg += `${error.error.msg}<br/>`;\n      let failures = error.error?.failures || error.error;\n      if (failures.length) {\n        for (let failure of failures) {\n          msg += `Update failed for the ad group \"${failure.adgroup.adgroup_name}\" from campaign \"${failure.adgroup.campaign_name}\":\n          ${failure.error_message}<br/>`;\n        }\n      } else {\n        msg = `${msg}`;\n      }\n      response['msg'] = msg;\n    } else {\n      response['msg'] = 'Upload Failed';\n    }\n    return response;\n  }\n}","\n<div class=\"fixActionRow\">\n  <h1 mat-dialog-title>Add Asset\n    <button mat-icon-button class=\"close-button\" (click)=\"onClose()\">\n      <mat-icon class=\"close-icon\">close</mat-icon>\n    </button>\n  </h1>\n  <div mat-dialog-content>\n    <mat-horizontal-stepper linear=\"false\" #stepper>\n      <mat-step [stepControl]=\"typeFormGroup\">\n          <ng-template matStepLabel>Type</ng-template>\n          <h3>Select Asset Type:</h3>\n          <mat-radio-group\n            class=\"type-radio-group\"\n            (change)=\"onAssetTypeChange($event.value)\"\n            [(ngModel)]=\"uploadAssetType\">\n            <mat-radio-button *ngFor=\"let type of types| keyvalue\"\n              class=\"type-radio-button\"\n              [value]=\"type.key\">\n              {{type.value}}\n            </mat-radio-button>\n          </mat-radio-group>\n      </mat-step>\n      <mat-step [stepControl]=\"uploadFormGroup\">\n          <ng-template matStepLabel>Asset</ng-template>\n          <h3>Add Asset</h3>\n          <div [ngSwitch]=\"uploadAssetType\">\n              <app-upload-img\n                #uploadImg\n                (isChildFormValid)=\"updateStepValid($event)\"\n                *ngSwitchCase=\"assetTypes.IMG\">\n              </app-upload-img>\n              <app-upload-video\n                #uploadVideo\n                (isChildFormValid)=\"updateStepValid($event)\"\n                (isBulkUpload)=\"setIsBulkUpload($event)\"\n                (isBulkVidFilesSelected)=\"setIsBulkFilesSelected($event)\"\n                *ngSwitchCase=\"assetTypes.VIDEO\">\n              </app-upload-video>\n              <app-upload-html\n                #uploadHtml\n                (isChildFormValid)=\"updateStepValid($event)\"\n                *ngSwitchCase=\"assetTypes.HTML\">\n              </app-upload-html>\n              <app-upload-text\n                #uploadText\n                (isChildFormValid)=\"updateStepValid($event)\"\n                [isHeadline]=\"uploadAssetType === this.assetTypes.TEXT_HEADLINE\"\n                *ngSwitchDefault>\n              </app-upload-text>\n          </div>\n      </mat-step>\n      <mat-step>\n        <ng-template matStepLabel>Add</ng-template>\n        <app-account-struct\n          #accountAdGroups\n          [account]=\"account\"\n          [uploadMode]=true\n          (selectionMade)=\"updateCanAddAsset($event)\">\n        </app-account-struct>\n\n      </mat-step>\n    </mat-horizontal-stepper>\n  </div>\n  <div class=\"spacer\"></div>\n  <div mat-dialog-actions >\n    <div>\n      <button mat-stroked-button\n        color=\"primary\"\n        *ngIf=\"stepper.selectedIndex !== 0\"\n        (click)=\"onBack(stepper)\">Back</button>\n    </div>\n      <button mat-stroked-button\n        color=\"primary\"\n        class=\"right-align\"\n        *ngIf=\"stepper.selectedIndex !== 2 && isBulkUpload != true\"\n        [disabled]=\"!isChildFormValid\"\n        (click)=\"onNext(stepper)\">Next</button>\n        <button mat-stroked-button\n        color=\"primary\"\n        class=\"right-align\"\n        *ngIf=\"isBulkUpload === true\"\n        [disabled]=\"!isBulkFilesSelected\"\n        (click)=\"bulkUploadVideos()\">Upload</button>\n      <app-progress-btn\n        btnLabel='Add Asset'\n        class=\"right-align\"\n        *ngIf=\"stepper.selectedIndex == 2\"\n        [disabled]=\"!canAddAsset\"\n        [btnUpdateMsg]=\"uploadMessage\"\n        [isError]=\"isErrorMessage\"\n        [inProgress]=\"uploadInProgress\"\n        (btnClick)=\"onAddAsset()\">\n      </app-progress-btn>\n  </div>\n</div>\n\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Component,\n  OnInit,\n  ViewChild,\n  Output,\n  EventEmitter,\n} from '@angular/core';\nimport {\n  FileType,\n  UploadComponent,\n} from 'src/app/shared/upload/upload.component';\n\n@Component({\n  selector: 'app-upload-html',\n  templateUrl: './upload-html.component.html',\n  styleUrls: ['./upload-html.component.css'],\n})\nexport class UploadHtmlComponent implements OnInit {\n  isValid: boolean = false;\n  fileTypes: FileType = FileType.HTML;\n\n  @ViewChild('uploadHtml') upload: UploadComponent;\n  @Output() isChildFormValid: EventEmitter<boolean> = new EventEmitter<\n    boolean\n  >();\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  uploadToServer() {\n    this.upload.uploadToServer();\n  }\n\n  updateIsValid(validEvent) {\n    this.isValid = validEvent;\n    this.isChildFormValid.emit(validEvent);\n  }\n}\n","<app-upload #uploadHtml\n  [acceptsType]=\"fileTypes\"\n  (isValid)=updateIsValid($event)></app-upload>\n  <br>\n<a mat-stroked-button href=\"https://h5validator.appspot.com/adwords/asset\" target=\"_blank\">HTML5 Validator</a>\n\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Component,\n  OnInit,\n  Input,\n  ViewChild,\n  ElementRef,\n  EventEmitter,\n  Output,\n} from '@angular/core';\nimport {\n  UploadComponent,\n  FileType,\n} from 'src/app/shared/upload/upload.component';\n\n@Component({\n  selector: 'app-upload-img',\n  templateUrl: './upload-img.component.html',\n  styleUrls: ['./upload-img.component.css'],\n})\nexport class UploadImgComponent implements OnInit {\n  isValid: boolean = false;\n  fileTypes: FileType = FileType.IMG;\n\n  @ViewChild('uploadImg') upload: UploadComponent;\n  @Output() isChildFormValid: EventEmitter<boolean> = new EventEmitter<\n    boolean\n  >();\n\n  constructor() {}\n\n  ngOnInit(): void {}\n\n  uploadToServer() {\n    this.upload.uploadToServer();\n  }\n\n  updateIsValid(validEvent: boolean) {\n    this.isValid = validEvent;\n    this.isChildFormValid.emit(validEvent);\n  }\n}\n","<app-upload #uploadImg\n  [acceptsType]=\"fileTypes\"\n  (isValid)=updateIsValid($event)></app-upload>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  Component,\n  OnInit,\n  Input,\n  SimpleChanges,\n  EventEmitter,\n  Output,\n  AfterViewInit,\n} from '@angular/core';\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators,\n  FormControl,\n  FormGroupDirective,\n  NgForm,\n} from '@angular/forms';\nimport { ErrorMatcher } from '../upload-assets.component';\n\n@Component({\n  selector: 'app-upload-text',\n  templateUrl: './upload-text.component.html',\n  styleUrls: ['./upload-text.component.css'],\n})\nexport class UploadTextComponent implements OnInit, AfterViewInit {\n  form: FormGroup;\n  maxLength: number;\n  textAssetType: string;\n  errorMatcher = new ErrorMatcher();\n  @Input() isHeadline: boolean;\n  @Output() isChildFormValid: EventEmitter<boolean> = new EventEmitter<\n    boolean\n  >();\n\n  constructor(private _formBuilder: FormBuilder) {}\n\n  ngOnInit() {\n    this.form = this._formBuilder.group({\n      textCtrl: [\n        '',\n        [Validators.required, Validators.maxLength(this.maxLength)],\n      ],\n    });\n\n    // Update parent form when the value changes to detect valid and invalid states\n    this.form.valueChanges.subscribe((value) => {\n      if (this.form.get('textCtrl').value.length) {\n        this.isChildFormValid.emit(!this.form.invalid);\n      }\n    });\n  }\n\n  ngAfterViewInit() {}\n\n  // Reflect valid/invalid state to parent - \"empty space\" is bypassed by the\n  // event emitter previous\n  onBackspace() {\n    // This gets triggered before the actual text os deleted\n    // so we want to emit it when there's one character in the textbox\n    if (this.form.get('textCtrl').value.length == 1) {\n      this.isChildFormValid.emit(false);\n    }\n  }\n\n  ngOnChanges(change: SimpleChanges) {\n    // Reset the input control if the text asset type changed\n    if (change.isHeadline.previousValue != change.isHeadline.currentValue) {\n      this.form?.get('textCtrl').setValue('');\n    }\n\n    // Reset the max allowed text size\n    if (this.isHeadline) {\n      this.maxLength = 30;\n      this.textAssetType = 'Headline';\n    } else {\n      this.maxLength = 90;\n      this.textAssetType = 'Description';\n    }\n\n    this.form\n      ?.get('textCtrl')\n      .setValidators([\n        Validators.required,\n        Validators.maxLength(this.maxLength),\n      ]);\n  }\n}\n","<form [formGroup]=\"form\">\n  <mat-form-field [ngClass]=\"{'short-input': this.isHeadline }\">\n    <mat-label>{{textAssetType}}</mat-label>\n    <input matInput #textAsset\n          [errorStateMatcher]=\"errorMatcher\"\n          formControlName=\"textCtrl\"\n          autocomplete=\"off\"\n          (keydown.backspace)=\"onBackspace()\"\n          required>\n    <mat-hint align=\"end\">{{textAsset.value.length}} /{{this.maxLength}} </mat-hint>\n  </mat-form-field>\n</form>\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Component, OnInit, Output, EventEmitter,ViewChild, ChangeDetectorRef,} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { ConfigService } from '../../services/config.service';\nimport { YouTubeVid } from '../../model/yt-vid'\nimport { VideoSelectComponent } from '../video-select/video-select.component';\nimport { UploadAssetService } from '../../services/upload-asset.service'\nimport { AssetService } from '../../services/asset.service'\n\n\n@Component({\n  selector: 'app-upload-video',\n  templateUrl: './upload-video.component.html',\n  styleUrls: ['./upload-video.component.css'],\n})\nexport class UploadVideoComponent implements OnInit {\n  selected: string;\n  options: any[] = [\n    {name:'single', display:'Single Video', disable:false},\n    {name:'channel', display:'Choose From Channel', disable:false},\n    // {name:'csv',display:'Upload CSV', disable:false}  \n  ];\n  option: string;\n  chosenVids: YouTubeVid[] = [];\n\n\n  form: FormGroup;\n  @Output() isChildFormValid: EventEmitter<boolean> = new EventEmitter<\n    boolean\n  >();\n  @Output() isBulkUpload: EventEmitter<boolean> = new EventEmitter<boolean>();\n  @Output() isBulkVidFilesSelected: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  // Used for upload csv option\n  // @ViewChild('fileInput')\n  // fileInput;\n\n  // file: File | null = null;\n\n  // onClickFileInputButton(): void {\n  //   this.fileInput.nativeElement.click();\n  // }\n  \n  // onChangeFileInput(): void {\n  //   const files: { [key: string]: File } = this.fileInput.nativeElement.files;\n  //   this.file = files[0];\n  // }\n  \n  constructor(\n    private _formBuilder: FormBuilder,\n    private _configService: ConfigService,\n    private _uploadAssetService: UploadAssetService,\n    private _assetService: AssetService,\n    private _vidSelect: MatDialogRef<VideoSelectComponent>,\n    private dialog: MatDialog,\n    ) {}\n\n  ngOnInit(): void {\n    this.form = this._formBuilder.group({\n      videoNameCtrl: ['', [Validators.required]],\n      videoUrlCtrl: ['', [Validators.required]],\n    });\n\n    // Update parent form when the value changes to detect valid and invalid states\n    this.form.valueChanges.subscribe((value) => {\n      if (this.form.get('videoUrlCtrl').value.length) {\n        this.isChildFormValid.emit(!this.form.invalid);\n      }\n    });\n    let yt_creds = this._configService.getYtConfigSettings();\n    if (yt_creds.channel_id === ''){\n      this.options[1].disable = true;\n    }\n  }\n\n  openVidSelect(){\n    this._vidSelect = this.dialog.open(VideoSelectComponent, {data:this.chosenVids});\n    this._vidSelect.afterClosed().subscribe((vids)=>{\n      // TODO: concat, not append\n      if (vids != null){\n        this.chosenVids = vids;\n      }\n      if (this.chosenVids.length > 0){\n        this.isBulkVidFilesSelected.emit(true);\n      }\n      else{\n        this.isBulkVidFilesSelected.emit(false);\n      }\n      // fix for if user goes back and then returns\n      this.isBulkUpload.emit(true);\n    })\n  }\n\n  emitIsBulkUpload(){\n    if (this.selected === 'single' ){\n      this.isBulkUpload.emit(false);\n    }\n    else{\n      this.isBulkUpload.emit(true);\n    }\n  }\n\n  uploadBulkVids(){\n    var accountId;\n    this._assetService.activeAccountId$.subscribe((id) =>{\n      accountId = id;\n    })\n    var uploadList = []; \n    for (var item in this.chosenVids){\n      uploadList.push({\n        account:accountId,\n        name:this.chosenVids[item]['name'],\n        url:this.chosenVids[item]['url']\n      })\n    }\n    return this._uploadAssetService.bulkUploadToYt(uploadList)\n  }\n\n  // Reflect valid/invalid state to parent - \"empty space\" is bypassed by the\n  // event emitter previous\n  onBackspace(event) {\n    console.log(event);\n    // This gets triggered before the actual text os deleted\n    // so we want to emit it when there's one character in the textbox\n    if (this.form.get('videoUrlCtrl').value.length == 1) {\n      this.isChildFormValid.emit(false);\n    }\n  }\n}\n","<mat-form-field appearance=\"fill\">\n  <mat-label>Select an option</mat-label>\n  <mat-select [(ngModel)]=\"selected\" (ngModelChange)=\"emitIsBulkUpload()\">\n    <mat-option *ngFor=\"let option of options\" [value]=\"option.name\" [disabled]=\"option.disable\">\n      {{option.display}}\n    </mat-option>\n  </mat-select>\n</mat-form-field>\n<div class=\"single-div\" *ngIf=\"selected==='single'\">\n<form [formGroup]=\"form\">\n  <mat-form-field>\n  <mat-label>Asset Name</mat-label>\n  <input matInput #videoName\n          formControlName=\"videoNameCtrl\"\n          autocomplete=\"off\"\n          required>\n  </mat-form-field>\n  <mat-form-field>\n    <mat-label>YouTube Video Link</mat-label>\n    <input matInput #videoAsset\n\n          formControlName=\"videoUrlCtrl\"\n          autocomplete=\"off\"\n          (keydown.backspace)=\"onBackspace($event)\"\n          required>\n  </mat-form-field>\n</form>\n</div>\n<div class=\"channel-div\" *ngIf=\"selected==='channel'\">\n  <button mat-raised-button (click)=\"openVidSelect()\">Add</button>\n  <p class=\"item-counter\">Total selected videos: {{chosenVids.length}}</p>\n</div>\n\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport {\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n  MatDialog,\n} from '@angular/material/dialog';\nimport { YouTubeVid } from '../../model/yt-vid';\nimport { UploadAssetService } from '../../services/upload-asset.service';\n\n@Component({\n  selector: 'app-video-select',\n  templateUrl: './video-select.component.html',\n  styleUrls: ['./video-select.component.css']\n})\nexport class VideoSelectComponent implements OnInit {\n  videos: YouTubeVid[];\n  form: FormGroup;\n  mySelect: YouTubeVid[] = [];\n  searchText;\n\n  constructor(\n    public dialogRef: MatDialogRef<any>,\n    private _uploadAssetService: UploadAssetService,\n    private formBuilder: FormBuilder,\n    @Inject(MAT_DIALOG_DATA) public data: YouTubeVid[],\n    ) { }\n\n  ngOnInit(): void {\n    this.mySelect = this.data;\n    this.form = this.formBuilder.group({myOtherControl: new FormControl(this.mySelect)})\n    this.dialogRef.updateSize('900px', '450px');\n    this._uploadAssetService.ytVidList$.subscribe((vids)=>{\n      this.videos=vids;\n    })\n    \n  }\n \n  submit(form){\n    this.dialogRef.close(form.value.myOtherControl);\n  }\n}\n","<div class=\"vidSearchField\">\n<mat-form-field floatLabel=never appearance=\"legacy\">\n  <input matInput class=\"form-control\" type=\"text\" name=\"search\" [(ngModel)]=\"searchText\" autocomplete=\"off\" placeholder=\"Search video by name\">\n  <span matPrefix><i class=\"fas fa-search\"></i>&nbsp;</span>\n</mat-form-field>\n</div>\n  <form [formGroup]=\"form\" (ngSubmit)=\"submit(form)\">\n<mat-selection-list class=\"video-list\" #vids formControlName=\"myOtherControl\">\n  <mat-list-option *ngFor=\"let vid of videos | filter:searchText\" [selected]=\"this.mySelect.indexOf(vid) > -1\" [value]=\"vid\">\n    <img matListAvatar src=\"{{vid.thumbnail}}\" alt=\"{{vid.url}}\"/>\n    {{vid.name}}\n    <a href=\"{{vid.url}}\" target=\"_blank\">Link</a>\n  </mat-list-option>\n</mat-selection-list>\n<div class=\"actions\">\n  <button mat-raised-button class=\"add-btn\" type=\"submit\">Add</button>\n  <button mat-raised-button class=\"cancel-btn\" type=\"button\" (click)=\"dialogRef.close()\">Cancel</button>\n</div>\n</form>\n\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}